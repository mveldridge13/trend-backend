generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                 @id @default(cuid())
  email                       String                 @unique
  username                    String?                @unique
  firstName                   String
  lastName                    String
  passwordHash                String?
  currency                    String                 @default("USD")
  timezone                    String                 @default("UTC")
  createdAt                   DateTime               @default(now())
  updatedAt                   DateTime               @updatedAt
  isActive                    Boolean                @default(true)
  hasSeenWelcome              Boolean                @default(false)
  income                      Decimal?               @db.Decimal(12, 2)
  setupComplete               Boolean                @default(false)
  hasSeenAddTransactionTour   Boolean                @default(false)
  hasSeenBalanceCardTour      Boolean                @default(false)
  hasSeenTransactionSwipeTour Boolean                @default(false)
  fixedExpenses               Decimal?               @db.Decimal(12, 2)
  incomeFrequency             IncomeFrequency?
  nextPayDate                 DateTime?
  rolloverAmount              Decimal?               @db.Decimal(12, 2)
  lastRolloverDate            DateTime?
  budgets                     Budget[]
  categories                  Category[]
  goalContributions           GoalContribution[]
  goalReminders               GoalReminder[]
  goals                       Goal[]
  pokerTournamentEvents       PokerTournamentEvent[]
  pokerTournaments            PokerTournament[]
  rolloverHistory             RolloverEntry[]
  transactions                Transaction[]

  @@map("users")
}

model Budget {
  id           String        @id @default(cuid())
  userId       String
  name         String
  description  String?
  totalAmount  Decimal       @db.Decimal(12, 2)
  currency     String        @default("USD")
  startDate    DateTime
  endDate      DateTime?
  isRecurring  Boolean       @default(true)
  status       BudgetStatus  @default(ACTIVE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("budgets")
}

model Category {
  id                      String        @id @default(cuid())
  userId                  String?
  name                    String
  description             String?
  icon                    String?
  color                   String?
  type                    CategoryType  @default(EXPENSE)
  isSystem                Boolean       @default(false)
  isActive                Boolean       @default(true)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  parentId                String?
  parent                  Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories           Category[]    @relation("CategoryHierarchy")
  user                    User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions            Transaction[]
  subcategoryTransactions Transaction[] @relation("TransactionSubcategory")

  @@unique([name, isSystem])
  @@map("categories")
}

model Transaction {
  id                String             @id @default(cuid())
  userId            String
  budgetId          String?
  categoryId        String?
  description       String
  amount            Decimal            @db.Decimal(12, 2)
  currency          String             @default("USD")
  date              DateTime
  type              TransactionType
  isAICategorized   Boolean            @default(false)
  aiConfidence      Float?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  location          String?
  merchantName      String?
  notes             String?
  recurrence        String?
  subcategoryId     String?
  dueDate           DateTime?
  status            PaymentStatus?
  goalContributions GoalContribution[]
  budget            Budget?            @relation(fields: [budgetId], references: [id])
  category          Category?          @relation(fields: [categoryId], references: [id])
  subcategory       Category?          @relation("TransactionSubcategory", fields: [subcategoryId], references: [id])
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([categoryId])
  @@index([subcategoryId])
  @@map("transactions")
}

model Goal {
  id               String             @id @default(cuid())
  userId           String
  name             String
  description      String?
  targetAmount     Decimal            @db.Decimal(12, 2)
  currentAmount    Decimal            @default(0) @db.Decimal(12, 2)
  currency         String             @default("USD")
  targetDate       DateTime?
  category         GoalCategory
  type             GoalType           @default(SAVINGS)
  isActive         Boolean            @default(true)
  isCompleted      Boolean            @default(false)
  completedAt      DateTime?
  priority         GoalPriority       @default(MEDIUM)
  autoContribute   Boolean            @default(false)
  monthlyTarget    Decimal?           @db.Decimal(12, 2)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  originalCategory String?
  contributions    GoalContribution[]
  reminders        GoalReminder[]
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([userId, category])
  @@map("goals")
}

model GoalContribution {
  id            String           @id @default(cuid())
  goalId        String
  userId        String
  amount        Decimal          @db.Decimal(12, 2)
  currency      String           @default("USD")
  date          DateTime         @default(now())
  description   String?
  type          ContributionType @default(MANUAL)
  transactionId String?
  goal          Goal             @relation(fields: [goalId], references: [id], onDelete: Cascade)
  transaction   Transaction?     @relation(fields: [transactionId], references: [id])
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([goalId, date])
  @@index([userId, date])
  @@map("goal_contributions")
}

model GoalReminder {
  id        String            @id @default(cuid())
  goalId    String
  userId    String
  type      ReminderType
  frequency ReminderFrequency
  isActive  Boolean           @default(true)
  lastSent  DateTime?
  nextDue   DateTime?
  message   String?
  createdAt DateTime          @default(now())
  goal      Goal              @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, nextDue])
  @@map("goal_reminders")
}

model PokerTournament {
  id                String                 @id @default(cuid())
  userId            String
  name              String
  location          String
  venue             String?
  dateStart         DateTime
  dateEnd           DateTime?
  accommodationCost Decimal                @default(0) @db.Decimal(10, 2)
  foodBudget        Decimal                @default(0) @db.Decimal(10, 2)
  otherExpenses     Decimal                @default(0) @db.Decimal(10, 2)
  notes             String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  events            PokerTournamentEvent[]
  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dateStart])
  @@map("poker_tournaments")
}

model PokerTournamentEvent {
  id             String          @id @default(cuid())
  tournamentId   String
  userId         String
  eventName      String
  eventNumber    String?
  buyIn          Decimal         @db.Decimal(10, 2)
  winnings       Decimal         @default(0) @db.Decimal(10, 2)
  eventDate      DateTime
  gameType       GameType?
  fieldSize      Int?
  finishPosition Int?
  notes          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  reBuyAmount    Decimal?        @default(0) @db.Decimal(10, 2)
  reBuys         Int?            @default(0)
  startingStack  Int?            @default(0)
  isClosed       Boolean         @default(false)
  tournament     PokerTournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tournamentId, eventDate])
  @@index([userId, eventDate])
  @@map("poker_tournament_events")
}

enum BudgetStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum CategoryType {
  INCOME
  EXPENSE
  TRANSFER
  INVESTMENT
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  REFUND
}

enum IncomeFrequency {
  WEEKLY
  FORTNIGHTLY
  MONTHLY
}

enum GoalCategory {
  EMERGENCY_FUND
  VACATION
  HOME_PURCHASE
  CAR_PURCHASE
  DEBT_PAYOFF
  EDUCATION
  RETIREMENT
  INVESTMENT
  GENERAL_SAVINGS
  OTHER
}

enum GoalType {
  SAVINGS
  SPENDING_LIMIT
  DEBT_PAYOFF
  INVESTMENT
}

enum GoalPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ContributionType {
  MANUAL
  AUTOMATIC
  TRANSACTION
  INTEREST
  WINDFALL
  WITHDRAWAL
  ROLLOVER
}

enum ReminderType {
  CONTRIBUTION
  PROGRESS
  MILESTONE
  DEADLINE
}

enum ReminderFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
}

enum PaymentStatus {
  UPCOMING
  PAID
  OVERDUE
}

enum GameType {
  NO_LIMIT_HOLDEM
  SATELLITE
  FREEZEOUT
  BOUNTY
  TURBO
  DEEPSTACK
  TEAM_EVENT
}

model RolloverEntry {
  id          String       @id @default(cuid())
  userId      String
  amount      Decimal      @db.Decimal(12, 2)
  date        DateTime     @default(now())
  type        RolloverType
  periodStart DateTime
  periodEnd   DateTime
  description String?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@map("rollover_entries")
}

enum RolloverType {
  ROLLOVER
  GOAL_ALLOCATION
}
