
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Budget
 * 
 */
export type Budget = $Result.DefaultSelection<Prisma.$BudgetPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model Goal
 * 
 */
export type Goal = $Result.DefaultSelection<Prisma.$GoalPayload>
/**
 * Model GoalContribution
 * 
 */
export type GoalContribution = $Result.DefaultSelection<Prisma.$GoalContributionPayload>
/**
 * Model GoalReminder
 * 
 */
export type GoalReminder = $Result.DefaultSelection<Prisma.$GoalReminderPayload>
/**
 * Model PokerTournament
 * 
 */
export type PokerTournament = $Result.DefaultSelection<Prisma.$PokerTournamentPayload>
/**
 * Model PokerTournamentEvent
 * 
 */
export type PokerTournamentEvent = $Result.DefaultSelection<Prisma.$PokerTournamentEventPayload>
/**
 * Model RolloverEntry
 * 
 */
export type RolloverEntry = $Result.DefaultSelection<Prisma.$RolloverEntryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const BudgetStatus: {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

export type BudgetStatus = (typeof BudgetStatus)[keyof typeof BudgetStatus]


export const CategoryType: {
  INCOME: 'INCOME',
  EXPENSE: 'EXPENSE',
  TRANSFER: 'TRANSFER',
  INVESTMENT: 'INVESTMENT'
};

export type CategoryType = (typeof CategoryType)[keyof typeof CategoryType]


export const TransactionType: {
  INCOME: 'INCOME',
  EXPENSE: 'EXPENSE',
  TRANSFER: 'TRANSFER',
  REFUND: 'REFUND'
};

export type TransactionType = (typeof TransactionType)[keyof typeof TransactionType]


export const IncomeFrequency: {
  WEEKLY: 'WEEKLY',
  FORTNIGHTLY: 'FORTNIGHTLY',
  MONTHLY: 'MONTHLY'
};

export type IncomeFrequency = (typeof IncomeFrequency)[keyof typeof IncomeFrequency]


export const GoalCategory: {
  EMERGENCY_FUND: 'EMERGENCY_FUND',
  VACATION: 'VACATION',
  HOME_PURCHASE: 'HOME_PURCHASE',
  CAR_PURCHASE: 'CAR_PURCHASE',
  DEBT_PAYOFF: 'DEBT_PAYOFF',
  EDUCATION: 'EDUCATION',
  RETIREMENT: 'RETIREMENT',
  INVESTMENT: 'INVESTMENT',
  GENERAL_SAVINGS: 'GENERAL_SAVINGS',
  OTHER: 'OTHER'
};

export type GoalCategory = (typeof GoalCategory)[keyof typeof GoalCategory]


export const GoalType: {
  SAVINGS: 'SAVINGS',
  SPENDING_LIMIT: 'SPENDING_LIMIT',
  DEBT_PAYOFF: 'DEBT_PAYOFF',
  INVESTMENT: 'INVESTMENT'
};

export type GoalType = (typeof GoalType)[keyof typeof GoalType]


export const GoalPriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type GoalPriority = (typeof GoalPriority)[keyof typeof GoalPriority]


export const ContributionType: {
  MANUAL: 'MANUAL',
  AUTOMATIC: 'AUTOMATIC',
  TRANSACTION: 'TRANSACTION',
  INTEREST: 'INTEREST',
  WINDFALL: 'WINDFALL',
  WITHDRAWAL: 'WITHDRAWAL',
  ROLLOVER: 'ROLLOVER'
};

export type ContributionType = (typeof ContributionType)[keyof typeof ContributionType]


export const ReminderType: {
  CONTRIBUTION: 'CONTRIBUTION',
  PROGRESS: 'PROGRESS',
  MILESTONE: 'MILESTONE',
  DEADLINE: 'DEADLINE'
};

export type ReminderType = (typeof ReminderType)[keyof typeof ReminderType]


export const ReminderFrequency: {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY'
};

export type ReminderFrequency = (typeof ReminderFrequency)[keyof typeof ReminderFrequency]


export const PaymentStatus: {
  UPCOMING: 'UPCOMING',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const GameType: {
  NO_LIMIT_HOLDEM: 'NO_LIMIT_HOLDEM',
  SATELLITE: 'SATELLITE',
  FREEZEOUT: 'FREEZEOUT',
  BOUNTY: 'BOUNTY',
  TURBO: 'TURBO',
  DEEPSTACK: 'DEEPSTACK',
  TEAM_EVENT: 'TEAM_EVENT'
};

export type GameType = (typeof GameType)[keyof typeof GameType]


export const RolloverType: {
  ROLLOVER: 'ROLLOVER',
  GOAL_ALLOCATION: 'GOAL_ALLOCATION'
};

export type RolloverType = (typeof RolloverType)[keyof typeof RolloverType]

}

export type BudgetStatus = $Enums.BudgetStatus

export const BudgetStatus: typeof $Enums.BudgetStatus

export type CategoryType = $Enums.CategoryType

export const CategoryType: typeof $Enums.CategoryType

export type TransactionType = $Enums.TransactionType

export const TransactionType: typeof $Enums.TransactionType

export type IncomeFrequency = $Enums.IncomeFrequency

export const IncomeFrequency: typeof $Enums.IncomeFrequency

export type GoalCategory = $Enums.GoalCategory

export const GoalCategory: typeof $Enums.GoalCategory

export type GoalType = $Enums.GoalType

export const GoalType: typeof $Enums.GoalType

export type GoalPriority = $Enums.GoalPriority

export const GoalPriority: typeof $Enums.GoalPriority

export type ContributionType = $Enums.ContributionType

export const ContributionType: typeof $Enums.ContributionType

export type ReminderType = $Enums.ReminderType

export const ReminderType: typeof $Enums.ReminderType

export type ReminderFrequency = $Enums.ReminderFrequency

export const ReminderFrequency: typeof $Enums.ReminderFrequency

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type GameType = $Enums.GameType

export const GameType: typeof $Enums.GameType

export type RolloverType = $Enums.RolloverType

export const RolloverType: typeof $Enums.RolloverType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.budget`: Exposes CRUD operations for the **Budget** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Budgets
    * const budgets = await prisma.budget.findMany()
    * ```
    */
  get budget(): Prisma.BudgetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.goal`: Exposes CRUD operations for the **Goal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goal.findMany()
    * ```
    */
  get goal(): Prisma.GoalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.goalContribution`: Exposes CRUD operations for the **GoalContribution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GoalContributions
    * const goalContributions = await prisma.goalContribution.findMany()
    * ```
    */
  get goalContribution(): Prisma.GoalContributionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.goalReminder`: Exposes CRUD operations for the **GoalReminder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GoalReminders
    * const goalReminders = await prisma.goalReminder.findMany()
    * ```
    */
  get goalReminder(): Prisma.GoalReminderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pokerTournament`: Exposes CRUD operations for the **PokerTournament** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PokerTournaments
    * const pokerTournaments = await prisma.pokerTournament.findMany()
    * ```
    */
  get pokerTournament(): Prisma.PokerTournamentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pokerTournamentEvent`: Exposes CRUD operations for the **PokerTournamentEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PokerTournamentEvents
    * const pokerTournamentEvents = await prisma.pokerTournamentEvent.findMany()
    * ```
    */
  get pokerTournamentEvent(): Prisma.PokerTournamentEventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rolloverEntry`: Exposes CRUD operations for the **RolloverEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolloverEntries
    * const rolloverEntries = await prisma.rolloverEntry.findMany()
    * ```
    */
  get rolloverEntry(): Prisma.RolloverEntryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Budget: 'Budget',
    Category: 'Category',
    Transaction: 'Transaction',
    Goal: 'Goal',
    GoalContribution: 'GoalContribution',
    GoalReminder: 'GoalReminder',
    PokerTournament: 'PokerTournament',
    PokerTournamentEvent: 'PokerTournamentEvent',
    RolloverEntry: 'RolloverEntry'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "budget" | "category" | "transaction" | "goal" | "goalContribution" | "goalReminder" | "pokerTournament" | "pokerTournamentEvent" | "rolloverEntry"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Budget: {
        payload: Prisma.$BudgetPayload<ExtArgs>
        fields: Prisma.BudgetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BudgetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BudgetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          findFirst: {
            args: Prisma.BudgetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BudgetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          findMany: {
            args: Prisma.BudgetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>[]
          }
          create: {
            args: Prisma.BudgetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          createMany: {
            args: Prisma.BudgetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BudgetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>[]
          }
          delete: {
            args: Prisma.BudgetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          update: {
            args: Prisma.BudgetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          deleteMany: {
            args: Prisma.BudgetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BudgetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BudgetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>[]
          }
          upsert: {
            args: Prisma.BudgetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          aggregate: {
            args: Prisma.BudgetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBudget>
          }
          groupBy: {
            args: Prisma.BudgetGroupByArgs<ExtArgs>
            result: $Utils.Optional<BudgetGroupByOutputType>[]
          }
          count: {
            args: Prisma.BudgetCountArgs<ExtArgs>
            result: $Utils.Optional<BudgetCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      Goal: {
        payload: Prisma.$GoalPayload<ExtArgs>
        fields: Prisma.GoalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findFirst: {
            args: Prisma.GoalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findMany: {
            args: Prisma.GoalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          create: {
            args: Prisma.GoalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          createMany: {
            args: Prisma.GoalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          delete: {
            args: Prisma.GoalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          update: {
            args: Prisma.GoalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          deleteMany: {
            args: Prisma.GoalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GoalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          upsert: {
            args: Prisma.GoalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          aggregate: {
            args: Prisma.GoalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoal>
          }
          groupBy: {
            args: Prisma.GoalGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalCountArgs<ExtArgs>
            result: $Utils.Optional<GoalCountAggregateOutputType> | number
          }
        }
      }
      GoalContribution: {
        payload: Prisma.$GoalContributionPayload<ExtArgs>
        fields: Prisma.GoalContributionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalContributionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalContributionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalContributionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalContributionPayload>
          }
          findFirst: {
            args: Prisma.GoalContributionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalContributionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalContributionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalContributionPayload>
          }
          findMany: {
            args: Prisma.GoalContributionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalContributionPayload>[]
          }
          create: {
            args: Prisma.GoalContributionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalContributionPayload>
          }
          createMany: {
            args: Prisma.GoalContributionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalContributionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalContributionPayload>[]
          }
          delete: {
            args: Prisma.GoalContributionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalContributionPayload>
          }
          update: {
            args: Prisma.GoalContributionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalContributionPayload>
          }
          deleteMany: {
            args: Prisma.GoalContributionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalContributionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GoalContributionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalContributionPayload>[]
          }
          upsert: {
            args: Prisma.GoalContributionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalContributionPayload>
          }
          aggregate: {
            args: Prisma.GoalContributionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoalContribution>
          }
          groupBy: {
            args: Prisma.GoalContributionGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalContributionGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalContributionCountArgs<ExtArgs>
            result: $Utils.Optional<GoalContributionCountAggregateOutputType> | number
          }
        }
      }
      GoalReminder: {
        payload: Prisma.$GoalReminderPayload<ExtArgs>
        fields: Prisma.GoalReminderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalReminderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReminderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalReminderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReminderPayload>
          }
          findFirst: {
            args: Prisma.GoalReminderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReminderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalReminderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReminderPayload>
          }
          findMany: {
            args: Prisma.GoalReminderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReminderPayload>[]
          }
          create: {
            args: Prisma.GoalReminderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReminderPayload>
          }
          createMany: {
            args: Prisma.GoalReminderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalReminderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReminderPayload>[]
          }
          delete: {
            args: Prisma.GoalReminderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReminderPayload>
          }
          update: {
            args: Prisma.GoalReminderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReminderPayload>
          }
          deleteMany: {
            args: Prisma.GoalReminderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalReminderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GoalReminderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReminderPayload>[]
          }
          upsert: {
            args: Prisma.GoalReminderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReminderPayload>
          }
          aggregate: {
            args: Prisma.GoalReminderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoalReminder>
          }
          groupBy: {
            args: Prisma.GoalReminderGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalReminderGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalReminderCountArgs<ExtArgs>
            result: $Utils.Optional<GoalReminderCountAggregateOutputType> | number
          }
        }
      }
      PokerTournament: {
        payload: Prisma.$PokerTournamentPayload<ExtArgs>
        fields: Prisma.PokerTournamentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PokerTournamentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PokerTournamentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentPayload>
          }
          findFirst: {
            args: Prisma.PokerTournamentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PokerTournamentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentPayload>
          }
          findMany: {
            args: Prisma.PokerTournamentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentPayload>[]
          }
          create: {
            args: Prisma.PokerTournamentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentPayload>
          }
          createMany: {
            args: Prisma.PokerTournamentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PokerTournamentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentPayload>[]
          }
          delete: {
            args: Prisma.PokerTournamentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentPayload>
          }
          update: {
            args: Prisma.PokerTournamentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentPayload>
          }
          deleteMany: {
            args: Prisma.PokerTournamentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PokerTournamentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PokerTournamentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentPayload>[]
          }
          upsert: {
            args: Prisma.PokerTournamentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentPayload>
          }
          aggregate: {
            args: Prisma.PokerTournamentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePokerTournament>
          }
          groupBy: {
            args: Prisma.PokerTournamentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PokerTournamentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PokerTournamentCountArgs<ExtArgs>
            result: $Utils.Optional<PokerTournamentCountAggregateOutputType> | number
          }
        }
      }
      PokerTournamentEvent: {
        payload: Prisma.$PokerTournamentEventPayload<ExtArgs>
        fields: Prisma.PokerTournamentEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PokerTournamentEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PokerTournamentEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentEventPayload>
          }
          findFirst: {
            args: Prisma.PokerTournamentEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PokerTournamentEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentEventPayload>
          }
          findMany: {
            args: Prisma.PokerTournamentEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentEventPayload>[]
          }
          create: {
            args: Prisma.PokerTournamentEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentEventPayload>
          }
          createMany: {
            args: Prisma.PokerTournamentEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PokerTournamentEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentEventPayload>[]
          }
          delete: {
            args: Prisma.PokerTournamentEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentEventPayload>
          }
          update: {
            args: Prisma.PokerTournamentEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentEventPayload>
          }
          deleteMany: {
            args: Prisma.PokerTournamentEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PokerTournamentEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PokerTournamentEventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentEventPayload>[]
          }
          upsert: {
            args: Prisma.PokerTournamentEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PokerTournamentEventPayload>
          }
          aggregate: {
            args: Prisma.PokerTournamentEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePokerTournamentEvent>
          }
          groupBy: {
            args: Prisma.PokerTournamentEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<PokerTournamentEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.PokerTournamentEventCountArgs<ExtArgs>
            result: $Utils.Optional<PokerTournamentEventCountAggregateOutputType> | number
          }
        }
      }
      RolloverEntry: {
        payload: Prisma.$RolloverEntryPayload<ExtArgs>
        fields: Prisma.RolloverEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolloverEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolloverEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolloverEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolloverEntryPayload>
          }
          findFirst: {
            args: Prisma.RolloverEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolloverEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolloverEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolloverEntryPayload>
          }
          findMany: {
            args: Prisma.RolloverEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolloverEntryPayload>[]
          }
          create: {
            args: Prisma.RolloverEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolloverEntryPayload>
          }
          createMany: {
            args: Prisma.RolloverEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RolloverEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolloverEntryPayload>[]
          }
          delete: {
            args: Prisma.RolloverEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolloverEntryPayload>
          }
          update: {
            args: Prisma.RolloverEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolloverEntryPayload>
          }
          deleteMany: {
            args: Prisma.RolloverEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolloverEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RolloverEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolloverEntryPayload>[]
          }
          upsert: {
            args: Prisma.RolloverEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolloverEntryPayload>
          }
          aggregate: {
            args: Prisma.RolloverEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRolloverEntry>
          }
          groupBy: {
            args: Prisma.RolloverEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolloverEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolloverEntryCountArgs<ExtArgs>
            result: $Utils.Optional<RolloverEntryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    budget?: BudgetOmit
    category?: CategoryOmit
    transaction?: TransactionOmit
    goal?: GoalOmit
    goalContribution?: GoalContributionOmit
    goalReminder?: GoalReminderOmit
    pokerTournament?: PokerTournamentOmit
    pokerTournamentEvent?: PokerTournamentEventOmit
    rolloverEntry?: RolloverEntryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    budgets: number
    categories: number
    goalContributions: number
    goalReminders: number
    goals: number
    pokerTournamentEvents: number
    pokerTournaments: number
    rolloverHistory: number
    transactions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    budgets?: boolean | UserCountOutputTypeCountBudgetsArgs
    categories?: boolean | UserCountOutputTypeCountCategoriesArgs
    goalContributions?: boolean | UserCountOutputTypeCountGoalContributionsArgs
    goalReminders?: boolean | UserCountOutputTypeCountGoalRemindersArgs
    goals?: boolean | UserCountOutputTypeCountGoalsArgs
    pokerTournamentEvents?: boolean | UserCountOutputTypeCountPokerTournamentEventsArgs
    pokerTournaments?: boolean | UserCountOutputTypeCountPokerTournamentsArgs
    rolloverHistory?: boolean | UserCountOutputTypeCountRolloverHistoryArgs
    transactions?: boolean | UserCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBudgetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGoalContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalContributionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGoalRemindersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalReminderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPokerTournamentEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PokerTournamentEventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPokerTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PokerTournamentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRolloverHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolloverEntryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type BudgetCountOutputType
   */

  export type BudgetCountOutputType = {
    transactions: number
  }

  export type BudgetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | BudgetCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * BudgetCountOutputType without action
   */
  export type BudgetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetCountOutputType
     */
    select?: BudgetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BudgetCountOutputType without action
   */
  export type BudgetCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    subcategories: number
    transactions: number
    subcategoryTransactions: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subcategories?: boolean | CategoryCountOutputTypeCountSubcategoriesArgs
    transactions?: boolean | CategoryCountOutputTypeCountTransactionsArgs
    subcategoryTransactions?: boolean | CategoryCountOutputTypeCountSubcategoryTransactionsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountSubcategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountSubcategoryTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type TransactionCountOutputType
   */

  export type TransactionCountOutputType = {
    goalContributions: number
  }

  export type TransactionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goalContributions?: boolean | TransactionCountOutputTypeCountGoalContributionsArgs
  }

  // Custom InputTypes
  /**
   * TransactionCountOutputType without action
   */
  export type TransactionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionCountOutputType
     */
    select?: TransactionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransactionCountOutputType without action
   */
  export type TransactionCountOutputTypeCountGoalContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalContributionWhereInput
  }


  /**
   * Count Type GoalCountOutputType
   */

  export type GoalCountOutputType = {
    contributions: number
    reminders: number
  }

  export type GoalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributions?: boolean | GoalCountOutputTypeCountContributionsArgs
    reminders?: boolean | GoalCountOutputTypeCountRemindersArgs
  }

  // Custom InputTypes
  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalCountOutputType
     */
    select?: GoalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeCountContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalContributionWhereInput
  }

  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeCountRemindersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalReminderWhereInput
  }


  /**
   * Count Type PokerTournamentCountOutputType
   */

  export type PokerTournamentCountOutputType = {
    events: number
  }

  export type PokerTournamentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | PokerTournamentCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * PokerTournamentCountOutputType without action
   */
  export type PokerTournamentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentCountOutputType
     */
    select?: PokerTournamentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PokerTournamentCountOutputType without action
   */
  export type PokerTournamentCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PokerTournamentEventWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    income: Decimal | null
    fixedExpenses: Decimal | null
    rolloverAmount: Decimal | null
  }

  export type UserSumAggregateOutputType = {
    income: Decimal | null
    fixedExpenses: Decimal | null
    rolloverAmount: Decimal | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    passwordHash: string | null
    currency: string | null
    timezone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    hasSeenWelcome: boolean | null
    income: Decimal | null
    setupComplete: boolean | null
    hasSeenAddTransactionTour: boolean | null
    hasSeenBalanceCardTour: boolean | null
    hasSeenTransactionSwipeTour: boolean | null
    fixedExpenses: Decimal | null
    incomeFrequency: $Enums.IncomeFrequency | null
    nextPayDate: Date | null
    rolloverAmount: Decimal | null
    lastRolloverDate: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    passwordHash: string | null
    currency: string | null
    timezone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    hasSeenWelcome: boolean | null
    income: Decimal | null
    setupComplete: boolean | null
    hasSeenAddTransactionTour: boolean | null
    hasSeenBalanceCardTour: boolean | null
    hasSeenTransactionSwipeTour: boolean | null
    fixedExpenses: Decimal | null
    incomeFrequency: $Enums.IncomeFrequency | null
    nextPayDate: Date | null
    rolloverAmount: Decimal | null
    lastRolloverDate: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    firstName: number
    lastName: number
    passwordHash: number
    currency: number
    timezone: number
    createdAt: number
    updatedAt: number
    isActive: number
    hasSeenWelcome: number
    income: number
    setupComplete: number
    hasSeenAddTransactionTour: number
    hasSeenBalanceCardTour: number
    hasSeenTransactionSwipeTour: number
    fixedExpenses: number
    incomeFrequency: number
    nextPayDate: number
    rolloverAmount: number
    lastRolloverDate: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    income?: true
    fixedExpenses?: true
    rolloverAmount?: true
  }

  export type UserSumAggregateInputType = {
    income?: true
    fixedExpenses?: true
    rolloverAmount?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    firstName?: true
    lastName?: true
    passwordHash?: true
    currency?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    hasSeenWelcome?: true
    income?: true
    setupComplete?: true
    hasSeenAddTransactionTour?: true
    hasSeenBalanceCardTour?: true
    hasSeenTransactionSwipeTour?: true
    fixedExpenses?: true
    incomeFrequency?: true
    nextPayDate?: true
    rolloverAmount?: true
    lastRolloverDate?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    firstName?: true
    lastName?: true
    passwordHash?: true
    currency?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    hasSeenWelcome?: true
    income?: true
    setupComplete?: true
    hasSeenAddTransactionTour?: true
    hasSeenBalanceCardTour?: true
    hasSeenTransactionSwipeTour?: true
    fixedExpenses?: true
    incomeFrequency?: true
    nextPayDate?: true
    rolloverAmount?: true
    lastRolloverDate?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    firstName?: true
    lastName?: true
    passwordHash?: true
    currency?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    hasSeenWelcome?: true
    income?: true
    setupComplete?: true
    hasSeenAddTransactionTour?: true
    hasSeenBalanceCardTour?: true
    hasSeenTransactionSwipeTour?: true
    fixedExpenses?: true
    incomeFrequency?: true
    nextPayDate?: true
    rolloverAmount?: true
    lastRolloverDate?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string | null
    firstName: string
    lastName: string
    passwordHash: string | null
    currency: string
    timezone: string
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    hasSeenWelcome: boolean
    income: Decimal | null
    setupComplete: boolean
    hasSeenAddTransactionTour: boolean
    hasSeenBalanceCardTour: boolean
    hasSeenTransactionSwipeTour: boolean
    fixedExpenses: Decimal | null
    incomeFrequency: $Enums.IncomeFrequency | null
    nextPayDate: Date | null
    rolloverAmount: Decimal | null
    lastRolloverDate: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    passwordHash?: boolean
    currency?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: boolean
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: boolean
    incomeFrequency?: boolean
    nextPayDate?: boolean
    rolloverAmount?: boolean
    lastRolloverDate?: boolean
    budgets?: boolean | User$budgetsArgs<ExtArgs>
    categories?: boolean | User$categoriesArgs<ExtArgs>
    goalContributions?: boolean | User$goalContributionsArgs<ExtArgs>
    goalReminders?: boolean | User$goalRemindersArgs<ExtArgs>
    goals?: boolean | User$goalsArgs<ExtArgs>
    pokerTournamentEvents?: boolean | User$pokerTournamentEventsArgs<ExtArgs>
    pokerTournaments?: boolean | User$pokerTournamentsArgs<ExtArgs>
    rolloverHistory?: boolean | User$rolloverHistoryArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    passwordHash?: boolean
    currency?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: boolean
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: boolean
    incomeFrequency?: boolean
    nextPayDate?: boolean
    rolloverAmount?: boolean
    lastRolloverDate?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    passwordHash?: boolean
    currency?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: boolean
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: boolean
    incomeFrequency?: boolean
    nextPayDate?: boolean
    rolloverAmount?: boolean
    lastRolloverDate?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    passwordHash?: boolean
    currency?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: boolean
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: boolean
    incomeFrequency?: boolean
    nextPayDate?: boolean
    rolloverAmount?: boolean
    lastRolloverDate?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "username" | "firstName" | "lastName" | "passwordHash" | "currency" | "timezone" | "createdAt" | "updatedAt" | "isActive" | "hasSeenWelcome" | "income" | "setupComplete" | "hasSeenAddTransactionTour" | "hasSeenBalanceCardTour" | "hasSeenTransactionSwipeTour" | "fixedExpenses" | "incomeFrequency" | "nextPayDate" | "rolloverAmount" | "lastRolloverDate", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    budgets?: boolean | User$budgetsArgs<ExtArgs>
    categories?: boolean | User$categoriesArgs<ExtArgs>
    goalContributions?: boolean | User$goalContributionsArgs<ExtArgs>
    goalReminders?: boolean | User$goalRemindersArgs<ExtArgs>
    goals?: boolean | User$goalsArgs<ExtArgs>
    pokerTournamentEvents?: boolean | User$pokerTournamentEventsArgs<ExtArgs>
    pokerTournaments?: boolean | User$pokerTournamentsArgs<ExtArgs>
    rolloverHistory?: boolean | User$rolloverHistoryArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      budgets: Prisma.$BudgetPayload<ExtArgs>[]
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      goalContributions: Prisma.$GoalContributionPayload<ExtArgs>[]
      goalReminders: Prisma.$GoalReminderPayload<ExtArgs>[]
      goals: Prisma.$GoalPayload<ExtArgs>[]
      pokerTournamentEvents: Prisma.$PokerTournamentEventPayload<ExtArgs>[]
      pokerTournaments: Prisma.$PokerTournamentPayload<ExtArgs>[]
      rolloverHistory: Prisma.$RolloverEntryPayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string | null
      firstName: string
      lastName: string
      passwordHash: string | null
      currency: string
      timezone: string
      createdAt: Date
      updatedAt: Date
      isActive: boolean
      hasSeenWelcome: boolean
      income: Prisma.Decimal | null
      setupComplete: boolean
      hasSeenAddTransactionTour: boolean
      hasSeenBalanceCardTour: boolean
      hasSeenTransactionSwipeTour: boolean
      fixedExpenses: Prisma.Decimal | null
      incomeFrequency: $Enums.IncomeFrequency | null
      nextPayDate: Date | null
      rolloverAmount: Prisma.Decimal | null
      lastRolloverDate: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    budgets<T extends User$budgetsArgs<ExtArgs> = {}>(args?: Subset<T, User$budgetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categories<T extends User$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    goalContributions<T extends User$goalContributionsArgs<ExtArgs> = {}>(args?: Subset<T, User$goalContributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    goalReminders<T extends User$goalRemindersArgs<ExtArgs> = {}>(args?: Subset<T, User$goalRemindersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    goals<T extends User$goalsArgs<ExtArgs> = {}>(args?: Subset<T, User$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pokerTournamentEvents<T extends User$pokerTournamentEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$pokerTournamentEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pokerTournaments<T extends User$pokerTournamentsArgs<ExtArgs> = {}>(args?: Subset<T, User$pokerTournamentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rolloverHistory<T extends User$rolloverHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$rolloverHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolloverEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends User$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly currency: FieldRef<"User", 'String'>
    readonly timezone: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly hasSeenWelcome: FieldRef<"User", 'Boolean'>
    readonly income: FieldRef<"User", 'Decimal'>
    readonly setupComplete: FieldRef<"User", 'Boolean'>
    readonly hasSeenAddTransactionTour: FieldRef<"User", 'Boolean'>
    readonly hasSeenBalanceCardTour: FieldRef<"User", 'Boolean'>
    readonly hasSeenTransactionSwipeTour: FieldRef<"User", 'Boolean'>
    readonly fixedExpenses: FieldRef<"User", 'Decimal'>
    readonly incomeFrequency: FieldRef<"User", 'IncomeFrequency'>
    readonly nextPayDate: FieldRef<"User", 'DateTime'>
    readonly rolloverAmount: FieldRef<"User", 'Decimal'>
    readonly lastRolloverDate: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.budgets
   */
  export type User$budgetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    where?: BudgetWhereInput
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    cursor?: BudgetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BudgetScalarFieldEnum | BudgetScalarFieldEnum[]
  }

  /**
   * User.categories
   */
  export type User$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * User.goalContributions
   */
  export type User$goalContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
    where?: GoalContributionWhereInput
    orderBy?: GoalContributionOrderByWithRelationInput | GoalContributionOrderByWithRelationInput[]
    cursor?: GoalContributionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalContributionScalarFieldEnum | GoalContributionScalarFieldEnum[]
  }

  /**
   * User.goalReminders
   */
  export type User$goalRemindersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderInclude<ExtArgs> | null
    where?: GoalReminderWhereInput
    orderBy?: GoalReminderOrderByWithRelationInput | GoalReminderOrderByWithRelationInput[]
    cursor?: GoalReminderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalReminderScalarFieldEnum | GoalReminderScalarFieldEnum[]
  }

  /**
   * User.goals
   */
  export type User$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * User.pokerTournamentEvents
   */
  export type User$pokerTournamentEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventInclude<ExtArgs> | null
    where?: PokerTournamentEventWhereInput
    orderBy?: PokerTournamentEventOrderByWithRelationInput | PokerTournamentEventOrderByWithRelationInput[]
    cursor?: PokerTournamentEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PokerTournamentEventScalarFieldEnum | PokerTournamentEventScalarFieldEnum[]
  }

  /**
   * User.pokerTournaments
   */
  export type User$pokerTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentInclude<ExtArgs> | null
    where?: PokerTournamentWhereInput
    orderBy?: PokerTournamentOrderByWithRelationInput | PokerTournamentOrderByWithRelationInput[]
    cursor?: PokerTournamentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PokerTournamentScalarFieldEnum | PokerTournamentScalarFieldEnum[]
  }

  /**
   * User.rolloverHistory
   */
  export type User$rolloverHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryInclude<ExtArgs> | null
    where?: RolloverEntryWhereInput
    orderBy?: RolloverEntryOrderByWithRelationInput | RolloverEntryOrderByWithRelationInput[]
    cursor?: RolloverEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolloverEntryScalarFieldEnum | RolloverEntryScalarFieldEnum[]
  }

  /**
   * User.transactions
   */
  export type User$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Budget
   */

  export type AggregateBudget = {
    _count: BudgetCountAggregateOutputType | null
    _avg: BudgetAvgAggregateOutputType | null
    _sum: BudgetSumAggregateOutputType | null
    _min: BudgetMinAggregateOutputType | null
    _max: BudgetMaxAggregateOutputType | null
  }

  export type BudgetAvgAggregateOutputType = {
    totalAmount: Decimal | null
  }

  export type BudgetSumAggregateOutputType = {
    totalAmount: Decimal | null
  }

  export type BudgetMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    totalAmount: Decimal | null
    currency: string | null
    startDate: Date | null
    endDate: Date | null
    isRecurring: boolean | null
    status: $Enums.BudgetStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BudgetMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    totalAmount: Decimal | null
    currency: string | null
    startDate: Date | null
    endDate: Date | null
    isRecurring: boolean | null
    status: $Enums.BudgetStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BudgetCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    description: number
    totalAmount: number
    currency: number
    startDate: number
    endDate: number
    isRecurring: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BudgetAvgAggregateInputType = {
    totalAmount?: true
  }

  export type BudgetSumAggregateInputType = {
    totalAmount?: true
  }

  export type BudgetMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    totalAmount?: true
    currency?: true
    startDate?: true
    endDate?: true
    isRecurring?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BudgetMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    totalAmount?: true
    currency?: true
    startDate?: true
    endDate?: true
    isRecurring?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BudgetCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    totalAmount?: true
    currency?: true
    startDate?: true
    endDate?: true
    isRecurring?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BudgetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Budget to aggregate.
     */
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Budgets
    **/
    _count?: true | BudgetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BudgetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BudgetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BudgetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BudgetMaxAggregateInputType
  }

  export type GetBudgetAggregateType<T extends BudgetAggregateArgs> = {
        [P in keyof T & keyof AggregateBudget]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBudget[P]>
      : GetScalarType<T[P], AggregateBudget[P]>
  }




  export type BudgetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetWhereInput
    orderBy?: BudgetOrderByWithAggregationInput | BudgetOrderByWithAggregationInput[]
    by: BudgetScalarFieldEnum[] | BudgetScalarFieldEnum
    having?: BudgetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BudgetCountAggregateInputType | true
    _avg?: BudgetAvgAggregateInputType
    _sum?: BudgetSumAggregateInputType
    _min?: BudgetMinAggregateInputType
    _max?: BudgetMaxAggregateInputType
  }

  export type BudgetGroupByOutputType = {
    id: string
    userId: string
    name: string
    description: string | null
    totalAmount: Decimal
    currency: string
    startDate: Date
    endDate: Date | null
    isRecurring: boolean
    status: $Enums.BudgetStatus
    createdAt: Date
    updatedAt: Date
    _count: BudgetCountAggregateOutputType | null
    _avg: BudgetAvgAggregateOutputType | null
    _sum: BudgetSumAggregateOutputType | null
    _min: BudgetMinAggregateOutputType | null
    _max: BudgetMaxAggregateOutputType | null
  }

  type GetBudgetGroupByPayload<T extends BudgetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BudgetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BudgetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BudgetGroupByOutputType[P]>
            : GetScalarType<T[P], BudgetGroupByOutputType[P]>
        }
      >
    >


  export type BudgetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    totalAmount?: boolean
    currency?: boolean
    startDate?: boolean
    endDate?: boolean
    isRecurring?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | Budget$transactionsArgs<ExtArgs>
    _count?: boolean | BudgetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budget"]>

  export type BudgetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    totalAmount?: boolean
    currency?: boolean
    startDate?: boolean
    endDate?: boolean
    isRecurring?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budget"]>

  export type BudgetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    totalAmount?: boolean
    currency?: boolean
    startDate?: boolean
    endDate?: boolean
    isRecurring?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budget"]>

  export type BudgetSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    totalAmount?: boolean
    currency?: boolean
    startDate?: boolean
    endDate?: boolean
    isRecurring?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BudgetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "description" | "totalAmount" | "currency" | "startDate" | "endDate" | "isRecurring" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["budget"]>
  export type BudgetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | Budget$transactionsArgs<ExtArgs>
    _count?: boolean | BudgetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BudgetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BudgetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BudgetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Budget"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      description: string | null
      totalAmount: Prisma.Decimal
      currency: string
      startDate: Date
      endDate: Date | null
      isRecurring: boolean
      status: $Enums.BudgetStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["budget"]>
    composites: {}
  }

  type BudgetGetPayload<S extends boolean | null | undefined | BudgetDefaultArgs> = $Result.GetResult<Prisma.$BudgetPayload, S>

  type BudgetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BudgetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BudgetCountAggregateInputType | true
    }

  export interface BudgetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Budget'], meta: { name: 'Budget' } }
    /**
     * Find zero or one Budget that matches the filter.
     * @param {BudgetFindUniqueArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BudgetFindUniqueArgs>(args: SelectSubset<T, BudgetFindUniqueArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Budget that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BudgetFindUniqueOrThrowArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BudgetFindUniqueOrThrowArgs>(args: SelectSubset<T, BudgetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Budget that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetFindFirstArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BudgetFindFirstArgs>(args?: SelectSubset<T, BudgetFindFirstArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Budget that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetFindFirstOrThrowArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BudgetFindFirstOrThrowArgs>(args?: SelectSubset<T, BudgetFindFirstOrThrowArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Budgets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Budgets
     * const budgets = await prisma.budget.findMany()
     * 
     * // Get first 10 Budgets
     * const budgets = await prisma.budget.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const budgetWithIdOnly = await prisma.budget.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BudgetFindManyArgs>(args?: SelectSubset<T, BudgetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Budget.
     * @param {BudgetCreateArgs} args - Arguments to create a Budget.
     * @example
     * // Create one Budget
     * const Budget = await prisma.budget.create({
     *   data: {
     *     // ... data to create a Budget
     *   }
     * })
     * 
     */
    create<T extends BudgetCreateArgs>(args: SelectSubset<T, BudgetCreateArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Budgets.
     * @param {BudgetCreateManyArgs} args - Arguments to create many Budgets.
     * @example
     * // Create many Budgets
     * const budget = await prisma.budget.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BudgetCreateManyArgs>(args?: SelectSubset<T, BudgetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Budgets and returns the data saved in the database.
     * @param {BudgetCreateManyAndReturnArgs} args - Arguments to create many Budgets.
     * @example
     * // Create many Budgets
     * const budget = await prisma.budget.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Budgets and only return the `id`
     * const budgetWithIdOnly = await prisma.budget.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BudgetCreateManyAndReturnArgs>(args?: SelectSubset<T, BudgetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Budget.
     * @param {BudgetDeleteArgs} args - Arguments to delete one Budget.
     * @example
     * // Delete one Budget
     * const Budget = await prisma.budget.delete({
     *   where: {
     *     // ... filter to delete one Budget
     *   }
     * })
     * 
     */
    delete<T extends BudgetDeleteArgs>(args: SelectSubset<T, BudgetDeleteArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Budget.
     * @param {BudgetUpdateArgs} args - Arguments to update one Budget.
     * @example
     * // Update one Budget
     * const budget = await prisma.budget.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BudgetUpdateArgs>(args: SelectSubset<T, BudgetUpdateArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Budgets.
     * @param {BudgetDeleteManyArgs} args - Arguments to filter Budgets to delete.
     * @example
     * // Delete a few Budgets
     * const { count } = await prisma.budget.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BudgetDeleteManyArgs>(args?: SelectSubset<T, BudgetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Budgets
     * const budget = await prisma.budget.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BudgetUpdateManyArgs>(args: SelectSubset<T, BudgetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Budgets and returns the data updated in the database.
     * @param {BudgetUpdateManyAndReturnArgs} args - Arguments to update many Budgets.
     * @example
     * // Update many Budgets
     * const budget = await prisma.budget.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Budgets and only return the `id`
     * const budgetWithIdOnly = await prisma.budget.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BudgetUpdateManyAndReturnArgs>(args: SelectSubset<T, BudgetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Budget.
     * @param {BudgetUpsertArgs} args - Arguments to update or create a Budget.
     * @example
     * // Update or create a Budget
     * const budget = await prisma.budget.upsert({
     *   create: {
     *     // ... data to create a Budget
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Budget we want to update
     *   }
     * })
     */
    upsert<T extends BudgetUpsertArgs>(args: SelectSubset<T, BudgetUpsertArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetCountArgs} args - Arguments to filter Budgets to count.
     * @example
     * // Count the number of Budgets
     * const count = await prisma.budget.count({
     *   where: {
     *     // ... the filter for the Budgets we want to count
     *   }
     * })
    **/
    count<T extends BudgetCountArgs>(
      args?: Subset<T, BudgetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BudgetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Budget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BudgetAggregateArgs>(args: Subset<T, BudgetAggregateArgs>): Prisma.PrismaPromise<GetBudgetAggregateType<T>>

    /**
     * Group by Budget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BudgetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BudgetGroupByArgs['orderBy'] }
        : { orderBy?: BudgetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BudgetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBudgetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Budget model
   */
  readonly fields: BudgetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Budget.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BudgetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactions<T extends Budget$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Budget$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Budget model
   */
  interface BudgetFieldRefs {
    readonly id: FieldRef<"Budget", 'String'>
    readonly userId: FieldRef<"Budget", 'String'>
    readonly name: FieldRef<"Budget", 'String'>
    readonly description: FieldRef<"Budget", 'String'>
    readonly totalAmount: FieldRef<"Budget", 'Decimal'>
    readonly currency: FieldRef<"Budget", 'String'>
    readonly startDate: FieldRef<"Budget", 'DateTime'>
    readonly endDate: FieldRef<"Budget", 'DateTime'>
    readonly isRecurring: FieldRef<"Budget", 'Boolean'>
    readonly status: FieldRef<"Budget", 'BudgetStatus'>
    readonly createdAt: FieldRef<"Budget", 'DateTime'>
    readonly updatedAt: FieldRef<"Budget", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Budget findUnique
   */
  export type BudgetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budget to fetch.
     */
    where: BudgetWhereUniqueInput
  }

  /**
   * Budget findUniqueOrThrow
   */
  export type BudgetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budget to fetch.
     */
    where: BudgetWhereUniqueInput
  }

  /**
   * Budget findFirst
   */
  export type BudgetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budget to fetch.
     */
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Budgets.
     */
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Budgets.
     */
    distinct?: BudgetScalarFieldEnum | BudgetScalarFieldEnum[]
  }

  /**
   * Budget findFirstOrThrow
   */
  export type BudgetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budget to fetch.
     */
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Budgets.
     */
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Budgets.
     */
    distinct?: BudgetScalarFieldEnum | BudgetScalarFieldEnum[]
  }

  /**
   * Budget findMany
   */
  export type BudgetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budgets to fetch.
     */
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Budgets.
     */
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    distinct?: BudgetScalarFieldEnum | BudgetScalarFieldEnum[]
  }

  /**
   * Budget create
   */
  export type BudgetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * The data needed to create a Budget.
     */
    data: XOR<BudgetCreateInput, BudgetUncheckedCreateInput>
  }

  /**
   * Budget createMany
   */
  export type BudgetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Budgets.
     */
    data: BudgetCreateManyInput | BudgetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Budget createManyAndReturn
   */
  export type BudgetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * The data used to create many Budgets.
     */
    data: BudgetCreateManyInput | BudgetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Budget update
   */
  export type BudgetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * The data needed to update a Budget.
     */
    data: XOR<BudgetUpdateInput, BudgetUncheckedUpdateInput>
    /**
     * Choose, which Budget to update.
     */
    where: BudgetWhereUniqueInput
  }

  /**
   * Budget updateMany
   */
  export type BudgetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Budgets.
     */
    data: XOR<BudgetUpdateManyMutationInput, BudgetUncheckedUpdateManyInput>
    /**
     * Filter which Budgets to update
     */
    where?: BudgetWhereInput
    /**
     * Limit how many Budgets to update.
     */
    limit?: number
  }

  /**
   * Budget updateManyAndReturn
   */
  export type BudgetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * The data used to update Budgets.
     */
    data: XOR<BudgetUpdateManyMutationInput, BudgetUncheckedUpdateManyInput>
    /**
     * Filter which Budgets to update
     */
    where?: BudgetWhereInput
    /**
     * Limit how many Budgets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Budget upsert
   */
  export type BudgetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * The filter to search for the Budget to update in case it exists.
     */
    where: BudgetWhereUniqueInput
    /**
     * In case the Budget found by the `where` argument doesn't exist, create a new Budget with this data.
     */
    create: XOR<BudgetCreateInput, BudgetUncheckedCreateInput>
    /**
     * In case the Budget was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BudgetUpdateInput, BudgetUncheckedUpdateInput>
  }

  /**
   * Budget delete
   */
  export type BudgetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter which Budget to delete.
     */
    where: BudgetWhereUniqueInput
  }

  /**
   * Budget deleteMany
   */
  export type BudgetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Budgets to delete
     */
    where?: BudgetWhereInput
    /**
     * Limit how many Budgets to delete.
     */
    limit?: number
  }

  /**
   * Budget.transactions
   */
  export type Budget$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Budget without action
   */
  export type BudgetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    icon: string | null
    color: string | null
    type: $Enums.CategoryType | null
    isSystem: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    parentId: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    icon: string | null
    color: string | null
    type: $Enums.CategoryType | null
    isSystem: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    parentId: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    description: number
    icon: number
    color: number
    type: number
    isSystem: number
    isActive: number
    createdAt: number
    updatedAt: number
    parentId: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    icon?: true
    color?: true
    type?: true
    isSystem?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    parentId?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    icon?: true
    color?: true
    type?: true
    isSystem?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    parentId?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    icon?: true
    color?: true
    type?: true
    isSystem?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    parentId?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    userId: string | null
    name: string
    description: string | null
    icon: string | null
    color: string | null
    type: $Enums.CategoryType
    isSystem: boolean
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    parentId: string | null
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    color?: boolean
    type?: boolean
    isSystem?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
    subcategories?: boolean | Category$subcategoriesArgs<ExtArgs>
    user?: boolean | Category$userArgs<ExtArgs>
    transactions?: boolean | Category$transactionsArgs<ExtArgs>
    subcategoryTransactions?: boolean | Category$subcategoryTransactionsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    color?: boolean
    type?: boolean
    isSystem?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
    user?: boolean | Category$userArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    color?: boolean
    type?: boolean
    isSystem?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
    user?: boolean | Category$userArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    color?: boolean
    type?: boolean
    isSystem?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentId?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "description" | "icon" | "color" | "type" | "isSystem" | "isActive" | "createdAt" | "updatedAt" | "parentId", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
    subcategories?: boolean | Category$subcategoriesArgs<ExtArgs>
    user?: boolean | Category$userArgs<ExtArgs>
    transactions?: boolean | Category$transactionsArgs<ExtArgs>
    subcategoryTransactions?: boolean | Category$subcategoryTransactionsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
    user?: boolean | Category$userArgs<ExtArgs>
  }
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
    user?: boolean | Category$userArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      parent: Prisma.$CategoryPayload<ExtArgs> | null
      subcategories: Prisma.$CategoryPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs> | null
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      subcategoryTransactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      name: string
      description: string | null
      icon: string | null
      color: string | null
      type: $Enums.CategoryType
      isSystem: boolean
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      parentId: string | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Category$parentArgs<ExtArgs> = {}>(args?: Subset<T, Category$parentArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subcategories<T extends Category$subcategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Category$subcategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends Category$userArgs<ExtArgs> = {}>(args?: Subset<T, Category$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    transactions<T extends Category$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Category$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subcategoryTransactions<T extends Category$subcategoryTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Category$subcategoryTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly userId: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly icon: FieldRef<"Category", 'String'>
    readonly color: FieldRef<"Category", 'String'>
    readonly type: FieldRef<"Category", 'CategoryType'>
    readonly isSystem: FieldRef<"Category", 'Boolean'>
    readonly isActive: FieldRef<"Category", 'Boolean'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
    readonly parentId: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.parent
   */
  export type Category$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Category.subcategories
   */
  export type Category$subcategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category.user
   */
  export type Category$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Category.transactions
   */
  export type Category$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Category.subcategoryTransactions
   */
  export type Category$subcategoryTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: Decimal | null
    aiConfidence: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: Decimal | null
    aiConfidence: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    budgetId: string | null
    categoryId: string | null
    description: string | null
    amount: Decimal | null
    currency: string | null
    date: Date | null
    type: $Enums.TransactionType | null
    isAICategorized: boolean | null
    aiConfidence: number | null
    createdAt: Date | null
    updatedAt: Date | null
    location: string | null
    merchantName: string | null
    notes: string | null
    recurrence: string | null
    subcategoryId: string | null
    dueDate: Date | null
    status: $Enums.PaymentStatus | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    budgetId: string | null
    categoryId: string | null
    description: string | null
    amount: Decimal | null
    currency: string | null
    date: Date | null
    type: $Enums.TransactionType | null
    isAICategorized: boolean | null
    aiConfidence: number | null
    createdAt: Date | null
    updatedAt: Date | null
    location: string | null
    merchantName: string | null
    notes: string | null
    recurrence: string | null
    subcategoryId: string | null
    dueDate: Date | null
    status: $Enums.PaymentStatus | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    userId: number
    budgetId: number
    categoryId: number
    description: number
    amount: number
    currency: number
    date: number
    type: number
    isAICategorized: number
    aiConfidence: number
    createdAt: number
    updatedAt: number
    location: number
    merchantName: number
    notes: number
    recurrence: number
    subcategoryId: number
    dueDate: number
    status: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
    aiConfidence?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
    aiConfidence?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    userId?: true
    budgetId?: true
    categoryId?: true
    description?: true
    amount?: true
    currency?: true
    date?: true
    type?: true
    isAICategorized?: true
    aiConfidence?: true
    createdAt?: true
    updatedAt?: true
    location?: true
    merchantName?: true
    notes?: true
    recurrence?: true
    subcategoryId?: true
    dueDate?: true
    status?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    budgetId?: true
    categoryId?: true
    description?: true
    amount?: true
    currency?: true
    date?: true
    type?: true
    isAICategorized?: true
    aiConfidence?: true
    createdAt?: true
    updatedAt?: true
    location?: true
    merchantName?: true
    notes?: true
    recurrence?: true
    subcategoryId?: true
    dueDate?: true
    status?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    userId?: true
    budgetId?: true
    categoryId?: true
    description?: true
    amount?: true
    currency?: true
    date?: true
    type?: true
    isAICategorized?: true
    aiConfidence?: true
    createdAt?: true
    updatedAt?: true
    location?: true
    merchantName?: true
    notes?: true
    recurrence?: true
    subcategoryId?: true
    dueDate?: true
    status?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    userId: string
    budgetId: string | null
    categoryId: string | null
    description: string
    amount: Decimal
    currency: string
    date: Date
    type: $Enums.TransactionType
    isAICategorized: boolean
    aiConfidence: number | null
    createdAt: Date
    updatedAt: Date
    location: string | null
    merchantName: string | null
    notes: string | null
    recurrence: string | null
    subcategoryId: string | null
    dueDate: Date | null
    status: $Enums.PaymentStatus | null
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    budgetId?: boolean
    categoryId?: boolean
    description?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    type?: boolean
    isAICategorized?: boolean
    aiConfidence?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    location?: boolean
    merchantName?: boolean
    notes?: boolean
    recurrence?: boolean
    subcategoryId?: boolean
    dueDate?: boolean
    status?: boolean
    goalContributions?: boolean | Transaction$goalContributionsArgs<ExtArgs>
    budget?: boolean | Transaction$budgetArgs<ExtArgs>
    category?: boolean | Transaction$categoryArgs<ExtArgs>
    subcategory?: boolean | Transaction$subcategoryArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | TransactionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    budgetId?: boolean
    categoryId?: boolean
    description?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    type?: boolean
    isAICategorized?: boolean
    aiConfidence?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    location?: boolean
    merchantName?: boolean
    notes?: boolean
    recurrence?: boolean
    subcategoryId?: boolean
    dueDate?: boolean
    status?: boolean
    budget?: boolean | Transaction$budgetArgs<ExtArgs>
    category?: boolean | Transaction$categoryArgs<ExtArgs>
    subcategory?: boolean | Transaction$subcategoryArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    budgetId?: boolean
    categoryId?: boolean
    description?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    type?: boolean
    isAICategorized?: boolean
    aiConfidence?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    location?: boolean
    merchantName?: boolean
    notes?: boolean
    recurrence?: boolean
    subcategoryId?: boolean
    dueDate?: boolean
    status?: boolean
    budget?: boolean | Transaction$budgetArgs<ExtArgs>
    category?: boolean | Transaction$categoryArgs<ExtArgs>
    subcategory?: boolean | Transaction$subcategoryArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    userId?: boolean
    budgetId?: boolean
    categoryId?: boolean
    description?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    type?: boolean
    isAICategorized?: boolean
    aiConfidence?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    location?: boolean
    merchantName?: boolean
    notes?: boolean
    recurrence?: boolean
    subcategoryId?: boolean
    dueDate?: boolean
    status?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "budgetId" | "categoryId" | "description" | "amount" | "currency" | "date" | "type" | "isAICategorized" | "aiConfidence" | "createdAt" | "updatedAt" | "location" | "merchantName" | "notes" | "recurrence" | "subcategoryId" | "dueDate" | "status", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goalContributions?: boolean | Transaction$goalContributionsArgs<ExtArgs>
    budget?: boolean | Transaction$budgetArgs<ExtArgs>
    category?: boolean | Transaction$categoryArgs<ExtArgs>
    subcategory?: boolean | Transaction$subcategoryArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | TransactionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    budget?: boolean | Transaction$budgetArgs<ExtArgs>
    category?: boolean | Transaction$categoryArgs<ExtArgs>
    subcategory?: boolean | Transaction$subcategoryArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    budget?: boolean | Transaction$budgetArgs<ExtArgs>
    category?: boolean | Transaction$categoryArgs<ExtArgs>
    subcategory?: boolean | Transaction$subcategoryArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      goalContributions: Prisma.$GoalContributionPayload<ExtArgs>[]
      budget: Prisma.$BudgetPayload<ExtArgs> | null
      category: Prisma.$CategoryPayload<ExtArgs> | null
      subcategory: Prisma.$CategoryPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      budgetId: string | null
      categoryId: string | null
      description: string
      amount: Prisma.Decimal
      currency: string
      date: Date
      type: $Enums.TransactionType
      isAICategorized: boolean
      aiConfidence: number | null
      createdAt: Date
      updatedAt: Date
      location: string | null
      merchantName: string | null
      notes: string | null
      recurrence: string | null
      subcategoryId: string | null
      dueDate: Date | null
      status: $Enums.PaymentStatus | null
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    goalContributions<T extends Transaction$goalContributionsArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$goalContributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    budget<T extends Transaction$budgetArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$budgetArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    category<T extends Transaction$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subcategory<T extends Transaction$subcategoryArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$subcategoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly userId: FieldRef<"Transaction", 'String'>
    readonly budgetId: FieldRef<"Transaction", 'String'>
    readonly categoryId: FieldRef<"Transaction", 'String'>
    readonly description: FieldRef<"Transaction", 'String'>
    readonly amount: FieldRef<"Transaction", 'Decimal'>
    readonly currency: FieldRef<"Transaction", 'String'>
    readonly date: FieldRef<"Transaction", 'DateTime'>
    readonly type: FieldRef<"Transaction", 'TransactionType'>
    readonly isAICategorized: FieldRef<"Transaction", 'Boolean'>
    readonly aiConfidence: FieldRef<"Transaction", 'Float'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
    readonly location: FieldRef<"Transaction", 'String'>
    readonly merchantName: FieldRef<"Transaction", 'String'>
    readonly notes: FieldRef<"Transaction", 'String'>
    readonly recurrence: FieldRef<"Transaction", 'String'>
    readonly subcategoryId: FieldRef<"Transaction", 'String'>
    readonly dueDate: FieldRef<"Transaction", 'DateTime'>
    readonly status: FieldRef<"Transaction", 'PaymentStatus'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction updateManyAndReturn
   */
  export type TransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction.goalContributions
   */
  export type Transaction$goalContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
    where?: GoalContributionWhereInput
    orderBy?: GoalContributionOrderByWithRelationInput | GoalContributionOrderByWithRelationInput[]
    cursor?: GoalContributionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalContributionScalarFieldEnum | GoalContributionScalarFieldEnum[]
  }

  /**
   * Transaction.budget
   */
  export type Transaction$budgetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    where?: BudgetWhereInput
  }

  /**
   * Transaction.category
   */
  export type Transaction$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Transaction.subcategory
   */
  export type Transaction$subcategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model Goal
   */

  export type AggregateGoal = {
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  export type GoalAvgAggregateOutputType = {
    targetAmount: Decimal | null
    currentAmount: Decimal | null
    monthlyTarget: Decimal | null
  }

  export type GoalSumAggregateOutputType = {
    targetAmount: Decimal | null
    currentAmount: Decimal | null
    monthlyTarget: Decimal | null
  }

  export type GoalMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    targetAmount: Decimal | null
    currentAmount: Decimal | null
    currency: string | null
    targetDate: Date | null
    category: $Enums.GoalCategory | null
    type: $Enums.GoalType | null
    isActive: boolean | null
    isCompleted: boolean | null
    completedAt: Date | null
    priority: $Enums.GoalPriority | null
    autoContribute: boolean | null
    monthlyTarget: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    originalCategory: string | null
  }

  export type GoalMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    targetAmount: Decimal | null
    currentAmount: Decimal | null
    currency: string | null
    targetDate: Date | null
    category: $Enums.GoalCategory | null
    type: $Enums.GoalType | null
    isActive: boolean | null
    isCompleted: boolean | null
    completedAt: Date | null
    priority: $Enums.GoalPriority | null
    autoContribute: boolean | null
    monthlyTarget: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    originalCategory: string | null
  }

  export type GoalCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    description: number
    targetAmount: number
    currentAmount: number
    currency: number
    targetDate: number
    category: number
    type: number
    isActive: number
    isCompleted: number
    completedAt: number
    priority: number
    autoContribute: number
    monthlyTarget: number
    createdAt: number
    updatedAt: number
    originalCategory: number
    _all: number
  }


  export type GoalAvgAggregateInputType = {
    targetAmount?: true
    currentAmount?: true
    monthlyTarget?: true
  }

  export type GoalSumAggregateInputType = {
    targetAmount?: true
    currentAmount?: true
    monthlyTarget?: true
  }

  export type GoalMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    targetAmount?: true
    currentAmount?: true
    currency?: true
    targetDate?: true
    category?: true
    type?: true
    isActive?: true
    isCompleted?: true
    completedAt?: true
    priority?: true
    autoContribute?: true
    monthlyTarget?: true
    createdAt?: true
    updatedAt?: true
    originalCategory?: true
  }

  export type GoalMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    targetAmount?: true
    currentAmount?: true
    currency?: true
    targetDate?: true
    category?: true
    type?: true
    isActive?: true
    isCompleted?: true
    completedAt?: true
    priority?: true
    autoContribute?: true
    monthlyTarget?: true
    createdAt?: true
    updatedAt?: true
    originalCategory?: true
  }

  export type GoalCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    targetAmount?: true
    currentAmount?: true
    currency?: true
    targetDate?: true
    category?: true
    type?: true
    isActive?: true
    isCompleted?: true
    completedAt?: true
    priority?: true
    autoContribute?: true
    monthlyTarget?: true
    createdAt?: true
    updatedAt?: true
    originalCategory?: true
    _all?: true
  }

  export type GoalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goal to aggregate.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goals
    **/
    _count?: true | GoalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalMaxAggregateInputType
  }

  export type GetGoalAggregateType<T extends GoalAggregateArgs> = {
        [P in keyof T & keyof AggregateGoal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoal[P]>
      : GetScalarType<T[P], AggregateGoal[P]>
  }




  export type GoalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithAggregationInput | GoalOrderByWithAggregationInput[]
    by: GoalScalarFieldEnum[] | GoalScalarFieldEnum
    having?: GoalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalCountAggregateInputType | true
    _avg?: GoalAvgAggregateInputType
    _sum?: GoalSumAggregateInputType
    _min?: GoalMinAggregateInputType
    _max?: GoalMaxAggregateInputType
  }

  export type GoalGroupByOutputType = {
    id: string
    userId: string
    name: string
    description: string | null
    targetAmount: Decimal
    currentAmount: Decimal
    currency: string
    targetDate: Date | null
    category: $Enums.GoalCategory
    type: $Enums.GoalType
    isActive: boolean
    isCompleted: boolean
    completedAt: Date | null
    priority: $Enums.GoalPriority
    autoContribute: boolean
    monthlyTarget: Decimal | null
    createdAt: Date
    updatedAt: Date
    originalCategory: string | null
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  type GetGoalGroupByPayload<T extends GoalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalGroupByOutputType[P]>
            : GetScalarType<T[P], GoalGroupByOutputType[P]>
        }
      >
    >


  export type GoalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    targetAmount?: boolean
    currentAmount?: boolean
    currency?: boolean
    targetDate?: boolean
    category?: boolean
    type?: boolean
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: boolean
    priority?: boolean
    autoContribute?: boolean
    monthlyTarget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originalCategory?: boolean
    contributions?: boolean | Goal$contributionsArgs<ExtArgs>
    reminders?: boolean | Goal$remindersArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | GoalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    targetAmount?: boolean
    currentAmount?: boolean
    currency?: boolean
    targetDate?: boolean
    category?: boolean
    type?: boolean
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: boolean
    priority?: boolean
    autoContribute?: boolean
    monthlyTarget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originalCategory?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    targetAmount?: boolean
    currentAmount?: boolean
    currency?: boolean
    targetDate?: boolean
    category?: boolean
    type?: boolean
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: boolean
    priority?: boolean
    autoContribute?: boolean
    monthlyTarget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originalCategory?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    targetAmount?: boolean
    currentAmount?: boolean
    currency?: boolean
    targetDate?: boolean
    category?: boolean
    type?: boolean
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: boolean
    priority?: boolean
    autoContribute?: boolean
    monthlyTarget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originalCategory?: boolean
  }

  export type GoalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "description" | "targetAmount" | "currentAmount" | "currency" | "targetDate" | "category" | "type" | "isActive" | "isCompleted" | "completedAt" | "priority" | "autoContribute" | "monthlyTarget" | "createdAt" | "updatedAt" | "originalCategory", ExtArgs["result"]["goal"]>
  export type GoalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributions?: boolean | Goal$contributionsArgs<ExtArgs>
    reminders?: boolean | Goal$remindersArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | GoalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GoalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GoalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GoalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Goal"
    objects: {
      contributions: Prisma.$GoalContributionPayload<ExtArgs>[]
      reminders: Prisma.$GoalReminderPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      description: string | null
      targetAmount: Prisma.Decimal
      currentAmount: Prisma.Decimal
      currency: string
      targetDate: Date | null
      category: $Enums.GoalCategory
      type: $Enums.GoalType
      isActive: boolean
      isCompleted: boolean
      completedAt: Date | null
      priority: $Enums.GoalPriority
      autoContribute: boolean
      monthlyTarget: Prisma.Decimal | null
      createdAt: Date
      updatedAt: Date
      originalCategory: string | null
    }, ExtArgs["result"]["goal"]>
    composites: {}
  }

  type GoalGetPayload<S extends boolean | null | undefined | GoalDefaultArgs> = $Result.GetResult<Prisma.$GoalPayload, S>

  type GoalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GoalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GoalCountAggregateInputType | true
    }

  export interface GoalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Goal'], meta: { name: 'Goal' } }
    /**
     * Find zero or one Goal that matches the filter.
     * @param {GoalFindUniqueArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalFindUniqueArgs>(args: SelectSubset<T, GoalFindUniqueArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Goal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GoalFindUniqueOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Goal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalFindFirstArgs>(args?: SelectSubset<T, GoalFindFirstArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Goal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goal.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalWithIdOnly = await prisma.goal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalFindManyArgs>(args?: SelectSubset<T, GoalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Goal.
     * @param {GoalCreateArgs} args - Arguments to create a Goal.
     * @example
     * // Create one Goal
     * const Goal = await prisma.goal.create({
     *   data: {
     *     // ... data to create a Goal
     *   }
     * })
     * 
     */
    create<T extends GoalCreateArgs>(args: SelectSubset<T, GoalCreateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Goals.
     * @param {GoalCreateManyArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalCreateManyArgs>(args?: SelectSubset<T, GoalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Goals and returns the data saved in the database.
     * @param {GoalCreateManyAndReturnArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Goals and only return the `id`
     * const goalWithIdOnly = await prisma.goal.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Goal.
     * @param {GoalDeleteArgs} args - Arguments to delete one Goal.
     * @example
     * // Delete one Goal
     * const Goal = await prisma.goal.delete({
     *   where: {
     *     // ... filter to delete one Goal
     *   }
     * })
     * 
     */
    delete<T extends GoalDeleteArgs>(args: SelectSubset<T, GoalDeleteArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Goal.
     * @param {GoalUpdateArgs} args - Arguments to update one Goal.
     * @example
     * // Update one Goal
     * const goal = await prisma.goal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalUpdateArgs>(args: SelectSubset<T, GoalUpdateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Goals.
     * @param {GoalDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalDeleteManyArgs>(args?: SelectSubset<T, GoalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalUpdateManyArgs>(args: SelectSubset<T, GoalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals and returns the data updated in the database.
     * @param {GoalUpdateManyAndReturnArgs} args - Arguments to update many Goals.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Goals and only return the `id`
     * const goalWithIdOnly = await prisma.goal.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GoalUpdateManyAndReturnArgs>(args: SelectSubset<T, GoalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Goal.
     * @param {GoalUpsertArgs} args - Arguments to update or create a Goal.
     * @example
     * // Update or create a Goal
     * const goal = await prisma.goal.upsert({
     *   create: {
     *     // ... data to create a Goal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goal we want to update
     *   }
     * })
     */
    upsert<T extends GoalUpsertArgs>(args: SelectSubset<T, GoalUpsertArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goal.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends GoalCountArgs>(
      args?: Subset<T, GoalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalAggregateArgs>(args: Subset<T, GoalAggregateArgs>): Prisma.PrismaPromise<GetGoalAggregateType<T>>

    /**
     * Group by Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalGroupByArgs['orderBy'] }
        : { orderBy?: GoalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Goal model
   */
  readonly fields: GoalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Goal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contributions<T extends Goal$contributionsArgs<ExtArgs> = {}>(args?: Subset<T, Goal$contributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reminders<T extends Goal$remindersArgs<ExtArgs> = {}>(args?: Subset<T, Goal$remindersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Goal model
   */
  interface GoalFieldRefs {
    readonly id: FieldRef<"Goal", 'String'>
    readonly userId: FieldRef<"Goal", 'String'>
    readonly name: FieldRef<"Goal", 'String'>
    readonly description: FieldRef<"Goal", 'String'>
    readonly targetAmount: FieldRef<"Goal", 'Decimal'>
    readonly currentAmount: FieldRef<"Goal", 'Decimal'>
    readonly currency: FieldRef<"Goal", 'String'>
    readonly targetDate: FieldRef<"Goal", 'DateTime'>
    readonly category: FieldRef<"Goal", 'GoalCategory'>
    readonly type: FieldRef<"Goal", 'GoalType'>
    readonly isActive: FieldRef<"Goal", 'Boolean'>
    readonly isCompleted: FieldRef<"Goal", 'Boolean'>
    readonly completedAt: FieldRef<"Goal", 'DateTime'>
    readonly priority: FieldRef<"Goal", 'GoalPriority'>
    readonly autoContribute: FieldRef<"Goal", 'Boolean'>
    readonly monthlyTarget: FieldRef<"Goal", 'Decimal'>
    readonly createdAt: FieldRef<"Goal", 'DateTime'>
    readonly updatedAt: FieldRef<"Goal", 'DateTime'>
    readonly originalCategory: FieldRef<"Goal", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Goal findUnique
   */
  export type GoalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findUniqueOrThrow
   */
  export type GoalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findFirst
   */
  export type GoalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findFirstOrThrow
   */
  export type GoalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findMany
   */
  export type GoalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goals to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal create
   */
  export type GoalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to create a Goal.
     */
    data: XOR<GoalCreateInput, GoalUncheckedCreateInput>
  }

  /**
   * Goal createMany
   */
  export type GoalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Goal createManyAndReturn
   */
  export type GoalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Goal update
   */
  export type GoalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to update a Goal.
     */
    data: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
    /**
     * Choose, which Goal to update.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal updateMany
   */
  export type GoalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Goals.
     */
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     */
    where?: GoalWhereInput
    /**
     * Limit how many Goals to update.
     */
    limit?: number
  }

  /**
   * Goal updateManyAndReturn
   */
  export type GoalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * The data used to update Goals.
     */
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     */
    where?: GoalWhereInput
    /**
     * Limit how many Goals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Goal upsert
   */
  export type GoalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The filter to search for the Goal to update in case it exists.
     */
    where: GoalWhereUniqueInput
    /**
     * In case the Goal found by the `where` argument doesn't exist, create a new Goal with this data.
     */
    create: XOR<GoalCreateInput, GoalUncheckedCreateInput>
    /**
     * In case the Goal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
  }

  /**
   * Goal delete
   */
  export type GoalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter which Goal to delete.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal deleteMany
   */
  export type GoalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goals to delete
     */
    where?: GoalWhereInput
    /**
     * Limit how many Goals to delete.
     */
    limit?: number
  }

  /**
   * Goal.contributions
   */
  export type Goal$contributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
    where?: GoalContributionWhereInput
    orderBy?: GoalContributionOrderByWithRelationInput | GoalContributionOrderByWithRelationInput[]
    cursor?: GoalContributionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalContributionScalarFieldEnum | GoalContributionScalarFieldEnum[]
  }

  /**
   * Goal.reminders
   */
  export type Goal$remindersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderInclude<ExtArgs> | null
    where?: GoalReminderWhereInput
    orderBy?: GoalReminderOrderByWithRelationInput | GoalReminderOrderByWithRelationInput[]
    cursor?: GoalReminderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalReminderScalarFieldEnum | GoalReminderScalarFieldEnum[]
  }

  /**
   * Goal without action
   */
  export type GoalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
  }


  /**
   * Model GoalContribution
   */

  export type AggregateGoalContribution = {
    _count: GoalContributionCountAggregateOutputType | null
    _avg: GoalContributionAvgAggregateOutputType | null
    _sum: GoalContributionSumAggregateOutputType | null
    _min: GoalContributionMinAggregateOutputType | null
    _max: GoalContributionMaxAggregateOutputType | null
  }

  export type GoalContributionAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type GoalContributionSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type GoalContributionMinAggregateOutputType = {
    id: string | null
    goalId: string | null
    userId: string | null
    amount: Decimal | null
    currency: string | null
    date: Date | null
    description: string | null
    type: $Enums.ContributionType | null
    transactionId: string | null
  }

  export type GoalContributionMaxAggregateOutputType = {
    id: string | null
    goalId: string | null
    userId: string | null
    amount: Decimal | null
    currency: string | null
    date: Date | null
    description: string | null
    type: $Enums.ContributionType | null
    transactionId: string | null
  }

  export type GoalContributionCountAggregateOutputType = {
    id: number
    goalId: number
    userId: number
    amount: number
    currency: number
    date: number
    description: number
    type: number
    transactionId: number
    _all: number
  }


  export type GoalContributionAvgAggregateInputType = {
    amount?: true
  }

  export type GoalContributionSumAggregateInputType = {
    amount?: true
  }

  export type GoalContributionMinAggregateInputType = {
    id?: true
    goalId?: true
    userId?: true
    amount?: true
    currency?: true
    date?: true
    description?: true
    type?: true
    transactionId?: true
  }

  export type GoalContributionMaxAggregateInputType = {
    id?: true
    goalId?: true
    userId?: true
    amount?: true
    currency?: true
    date?: true
    description?: true
    type?: true
    transactionId?: true
  }

  export type GoalContributionCountAggregateInputType = {
    id?: true
    goalId?: true
    userId?: true
    amount?: true
    currency?: true
    date?: true
    description?: true
    type?: true
    transactionId?: true
    _all?: true
  }

  export type GoalContributionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoalContribution to aggregate.
     */
    where?: GoalContributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalContributions to fetch.
     */
    orderBy?: GoalContributionOrderByWithRelationInput | GoalContributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalContributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalContributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalContributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GoalContributions
    **/
    _count?: true | GoalContributionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalContributionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalContributionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalContributionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalContributionMaxAggregateInputType
  }

  export type GetGoalContributionAggregateType<T extends GoalContributionAggregateArgs> = {
        [P in keyof T & keyof AggregateGoalContribution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoalContribution[P]>
      : GetScalarType<T[P], AggregateGoalContribution[P]>
  }




  export type GoalContributionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalContributionWhereInput
    orderBy?: GoalContributionOrderByWithAggregationInput | GoalContributionOrderByWithAggregationInput[]
    by: GoalContributionScalarFieldEnum[] | GoalContributionScalarFieldEnum
    having?: GoalContributionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalContributionCountAggregateInputType | true
    _avg?: GoalContributionAvgAggregateInputType
    _sum?: GoalContributionSumAggregateInputType
    _min?: GoalContributionMinAggregateInputType
    _max?: GoalContributionMaxAggregateInputType
  }

  export type GoalContributionGroupByOutputType = {
    id: string
    goalId: string
    userId: string
    amount: Decimal
    currency: string
    date: Date
    description: string | null
    type: $Enums.ContributionType
    transactionId: string | null
    _count: GoalContributionCountAggregateOutputType | null
    _avg: GoalContributionAvgAggregateOutputType | null
    _sum: GoalContributionSumAggregateOutputType | null
    _min: GoalContributionMinAggregateOutputType | null
    _max: GoalContributionMaxAggregateOutputType | null
  }

  type GetGoalContributionGroupByPayload<T extends GoalContributionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalContributionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalContributionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalContributionGroupByOutputType[P]>
            : GetScalarType<T[P], GoalContributionGroupByOutputType[P]>
        }
      >
    >


  export type GoalContributionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goalId?: boolean
    userId?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    description?: boolean
    type?: boolean
    transactionId?: boolean
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    transaction?: boolean | GoalContribution$transactionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goalContribution"]>

  export type GoalContributionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goalId?: boolean
    userId?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    description?: boolean
    type?: boolean
    transactionId?: boolean
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    transaction?: boolean | GoalContribution$transactionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goalContribution"]>

  export type GoalContributionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goalId?: boolean
    userId?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    description?: boolean
    type?: boolean
    transactionId?: boolean
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    transaction?: boolean | GoalContribution$transactionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goalContribution"]>

  export type GoalContributionSelectScalar = {
    id?: boolean
    goalId?: boolean
    userId?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    description?: boolean
    type?: boolean
    transactionId?: boolean
  }

  export type GoalContributionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "goalId" | "userId" | "amount" | "currency" | "date" | "description" | "type" | "transactionId", ExtArgs["result"]["goalContribution"]>
  export type GoalContributionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    transaction?: boolean | GoalContribution$transactionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GoalContributionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    transaction?: boolean | GoalContribution$transactionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GoalContributionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    transaction?: boolean | GoalContribution$transactionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GoalContributionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GoalContribution"
    objects: {
      goal: Prisma.$GoalPayload<ExtArgs>
      transaction: Prisma.$TransactionPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      goalId: string
      userId: string
      amount: Prisma.Decimal
      currency: string
      date: Date
      description: string | null
      type: $Enums.ContributionType
      transactionId: string | null
    }, ExtArgs["result"]["goalContribution"]>
    composites: {}
  }

  type GoalContributionGetPayload<S extends boolean | null | undefined | GoalContributionDefaultArgs> = $Result.GetResult<Prisma.$GoalContributionPayload, S>

  type GoalContributionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GoalContributionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GoalContributionCountAggregateInputType | true
    }

  export interface GoalContributionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GoalContribution'], meta: { name: 'GoalContribution' } }
    /**
     * Find zero or one GoalContribution that matches the filter.
     * @param {GoalContributionFindUniqueArgs} args - Arguments to find a GoalContribution
     * @example
     * // Get one GoalContribution
     * const goalContribution = await prisma.goalContribution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalContributionFindUniqueArgs>(args: SelectSubset<T, GoalContributionFindUniqueArgs<ExtArgs>>): Prisma__GoalContributionClient<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GoalContribution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GoalContributionFindUniqueOrThrowArgs} args - Arguments to find a GoalContribution
     * @example
     * // Get one GoalContribution
     * const goalContribution = await prisma.goalContribution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalContributionFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalContributionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalContributionClient<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GoalContribution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalContributionFindFirstArgs} args - Arguments to find a GoalContribution
     * @example
     * // Get one GoalContribution
     * const goalContribution = await prisma.goalContribution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalContributionFindFirstArgs>(args?: SelectSubset<T, GoalContributionFindFirstArgs<ExtArgs>>): Prisma__GoalContributionClient<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GoalContribution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalContributionFindFirstOrThrowArgs} args - Arguments to find a GoalContribution
     * @example
     * // Get one GoalContribution
     * const goalContribution = await prisma.goalContribution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalContributionFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalContributionFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalContributionClient<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GoalContributions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalContributionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GoalContributions
     * const goalContributions = await prisma.goalContribution.findMany()
     * 
     * // Get first 10 GoalContributions
     * const goalContributions = await prisma.goalContribution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalContributionWithIdOnly = await prisma.goalContribution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalContributionFindManyArgs>(args?: SelectSubset<T, GoalContributionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GoalContribution.
     * @param {GoalContributionCreateArgs} args - Arguments to create a GoalContribution.
     * @example
     * // Create one GoalContribution
     * const GoalContribution = await prisma.goalContribution.create({
     *   data: {
     *     // ... data to create a GoalContribution
     *   }
     * })
     * 
     */
    create<T extends GoalContributionCreateArgs>(args: SelectSubset<T, GoalContributionCreateArgs<ExtArgs>>): Prisma__GoalContributionClient<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GoalContributions.
     * @param {GoalContributionCreateManyArgs} args - Arguments to create many GoalContributions.
     * @example
     * // Create many GoalContributions
     * const goalContribution = await prisma.goalContribution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalContributionCreateManyArgs>(args?: SelectSubset<T, GoalContributionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GoalContributions and returns the data saved in the database.
     * @param {GoalContributionCreateManyAndReturnArgs} args - Arguments to create many GoalContributions.
     * @example
     * // Create many GoalContributions
     * const goalContribution = await prisma.goalContribution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GoalContributions and only return the `id`
     * const goalContributionWithIdOnly = await prisma.goalContribution.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalContributionCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalContributionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GoalContribution.
     * @param {GoalContributionDeleteArgs} args - Arguments to delete one GoalContribution.
     * @example
     * // Delete one GoalContribution
     * const GoalContribution = await prisma.goalContribution.delete({
     *   where: {
     *     // ... filter to delete one GoalContribution
     *   }
     * })
     * 
     */
    delete<T extends GoalContributionDeleteArgs>(args: SelectSubset<T, GoalContributionDeleteArgs<ExtArgs>>): Prisma__GoalContributionClient<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GoalContribution.
     * @param {GoalContributionUpdateArgs} args - Arguments to update one GoalContribution.
     * @example
     * // Update one GoalContribution
     * const goalContribution = await prisma.goalContribution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalContributionUpdateArgs>(args: SelectSubset<T, GoalContributionUpdateArgs<ExtArgs>>): Prisma__GoalContributionClient<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GoalContributions.
     * @param {GoalContributionDeleteManyArgs} args - Arguments to filter GoalContributions to delete.
     * @example
     * // Delete a few GoalContributions
     * const { count } = await prisma.goalContribution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalContributionDeleteManyArgs>(args?: SelectSubset<T, GoalContributionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoalContributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalContributionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GoalContributions
     * const goalContribution = await prisma.goalContribution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalContributionUpdateManyArgs>(args: SelectSubset<T, GoalContributionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoalContributions and returns the data updated in the database.
     * @param {GoalContributionUpdateManyAndReturnArgs} args - Arguments to update many GoalContributions.
     * @example
     * // Update many GoalContributions
     * const goalContribution = await prisma.goalContribution.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GoalContributions and only return the `id`
     * const goalContributionWithIdOnly = await prisma.goalContribution.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GoalContributionUpdateManyAndReturnArgs>(args: SelectSubset<T, GoalContributionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GoalContribution.
     * @param {GoalContributionUpsertArgs} args - Arguments to update or create a GoalContribution.
     * @example
     * // Update or create a GoalContribution
     * const goalContribution = await prisma.goalContribution.upsert({
     *   create: {
     *     // ... data to create a GoalContribution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GoalContribution we want to update
     *   }
     * })
     */
    upsert<T extends GoalContributionUpsertArgs>(args: SelectSubset<T, GoalContributionUpsertArgs<ExtArgs>>): Prisma__GoalContributionClient<$Result.GetResult<Prisma.$GoalContributionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GoalContributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalContributionCountArgs} args - Arguments to filter GoalContributions to count.
     * @example
     * // Count the number of GoalContributions
     * const count = await prisma.goalContribution.count({
     *   where: {
     *     // ... the filter for the GoalContributions we want to count
     *   }
     * })
    **/
    count<T extends GoalContributionCountArgs>(
      args?: Subset<T, GoalContributionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalContributionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GoalContribution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalContributionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalContributionAggregateArgs>(args: Subset<T, GoalContributionAggregateArgs>): Prisma.PrismaPromise<GetGoalContributionAggregateType<T>>

    /**
     * Group by GoalContribution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalContributionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalContributionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalContributionGroupByArgs['orderBy'] }
        : { orderBy?: GoalContributionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalContributionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalContributionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GoalContribution model
   */
  readonly fields: GoalContributionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GoalContribution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalContributionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    goal<T extends GoalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GoalDefaultArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transaction<T extends GoalContribution$transactionArgs<ExtArgs> = {}>(args?: Subset<T, GoalContribution$transactionArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GoalContribution model
   */
  interface GoalContributionFieldRefs {
    readonly id: FieldRef<"GoalContribution", 'String'>
    readonly goalId: FieldRef<"GoalContribution", 'String'>
    readonly userId: FieldRef<"GoalContribution", 'String'>
    readonly amount: FieldRef<"GoalContribution", 'Decimal'>
    readonly currency: FieldRef<"GoalContribution", 'String'>
    readonly date: FieldRef<"GoalContribution", 'DateTime'>
    readonly description: FieldRef<"GoalContribution", 'String'>
    readonly type: FieldRef<"GoalContribution", 'ContributionType'>
    readonly transactionId: FieldRef<"GoalContribution", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GoalContribution findUnique
   */
  export type GoalContributionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
    /**
     * Filter, which GoalContribution to fetch.
     */
    where: GoalContributionWhereUniqueInput
  }

  /**
   * GoalContribution findUniqueOrThrow
   */
  export type GoalContributionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
    /**
     * Filter, which GoalContribution to fetch.
     */
    where: GoalContributionWhereUniqueInput
  }

  /**
   * GoalContribution findFirst
   */
  export type GoalContributionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
    /**
     * Filter, which GoalContribution to fetch.
     */
    where?: GoalContributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalContributions to fetch.
     */
    orderBy?: GoalContributionOrderByWithRelationInput | GoalContributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalContributions.
     */
    cursor?: GoalContributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalContributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalContributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalContributions.
     */
    distinct?: GoalContributionScalarFieldEnum | GoalContributionScalarFieldEnum[]
  }

  /**
   * GoalContribution findFirstOrThrow
   */
  export type GoalContributionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
    /**
     * Filter, which GoalContribution to fetch.
     */
    where?: GoalContributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalContributions to fetch.
     */
    orderBy?: GoalContributionOrderByWithRelationInput | GoalContributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalContributions.
     */
    cursor?: GoalContributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalContributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalContributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalContributions.
     */
    distinct?: GoalContributionScalarFieldEnum | GoalContributionScalarFieldEnum[]
  }

  /**
   * GoalContribution findMany
   */
  export type GoalContributionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
    /**
     * Filter, which GoalContributions to fetch.
     */
    where?: GoalContributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalContributions to fetch.
     */
    orderBy?: GoalContributionOrderByWithRelationInput | GoalContributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GoalContributions.
     */
    cursor?: GoalContributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalContributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalContributions.
     */
    skip?: number
    distinct?: GoalContributionScalarFieldEnum | GoalContributionScalarFieldEnum[]
  }

  /**
   * GoalContribution create
   */
  export type GoalContributionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
    /**
     * The data needed to create a GoalContribution.
     */
    data: XOR<GoalContributionCreateInput, GoalContributionUncheckedCreateInput>
  }

  /**
   * GoalContribution createMany
   */
  export type GoalContributionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GoalContributions.
     */
    data: GoalContributionCreateManyInput | GoalContributionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GoalContribution createManyAndReturn
   */
  export type GoalContributionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * The data used to create many GoalContributions.
     */
    data: GoalContributionCreateManyInput | GoalContributionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GoalContribution update
   */
  export type GoalContributionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
    /**
     * The data needed to update a GoalContribution.
     */
    data: XOR<GoalContributionUpdateInput, GoalContributionUncheckedUpdateInput>
    /**
     * Choose, which GoalContribution to update.
     */
    where: GoalContributionWhereUniqueInput
  }

  /**
   * GoalContribution updateMany
   */
  export type GoalContributionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GoalContributions.
     */
    data: XOR<GoalContributionUpdateManyMutationInput, GoalContributionUncheckedUpdateManyInput>
    /**
     * Filter which GoalContributions to update
     */
    where?: GoalContributionWhereInput
    /**
     * Limit how many GoalContributions to update.
     */
    limit?: number
  }

  /**
   * GoalContribution updateManyAndReturn
   */
  export type GoalContributionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * The data used to update GoalContributions.
     */
    data: XOR<GoalContributionUpdateManyMutationInput, GoalContributionUncheckedUpdateManyInput>
    /**
     * Filter which GoalContributions to update
     */
    where?: GoalContributionWhereInput
    /**
     * Limit how many GoalContributions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GoalContribution upsert
   */
  export type GoalContributionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
    /**
     * The filter to search for the GoalContribution to update in case it exists.
     */
    where: GoalContributionWhereUniqueInput
    /**
     * In case the GoalContribution found by the `where` argument doesn't exist, create a new GoalContribution with this data.
     */
    create: XOR<GoalContributionCreateInput, GoalContributionUncheckedCreateInput>
    /**
     * In case the GoalContribution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalContributionUpdateInput, GoalContributionUncheckedUpdateInput>
  }

  /**
   * GoalContribution delete
   */
  export type GoalContributionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
    /**
     * Filter which GoalContribution to delete.
     */
    where: GoalContributionWhereUniqueInput
  }

  /**
   * GoalContribution deleteMany
   */
  export type GoalContributionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoalContributions to delete
     */
    where?: GoalContributionWhereInput
    /**
     * Limit how many GoalContributions to delete.
     */
    limit?: number
  }

  /**
   * GoalContribution.transaction
   */
  export type GoalContribution$transactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
  }

  /**
   * GoalContribution without action
   */
  export type GoalContributionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalContribution
     */
    select?: GoalContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalContribution
     */
    omit?: GoalContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalContributionInclude<ExtArgs> | null
  }


  /**
   * Model GoalReminder
   */

  export type AggregateGoalReminder = {
    _count: GoalReminderCountAggregateOutputType | null
    _min: GoalReminderMinAggregateOutputType | null
    _max: GoalReminderMaxAggregateOutputType | null
  }

  export type GoalReminderMinAggregateOutputType = {
    id: string | null
    goalId: string | null
    userId: string | null
    type: $Enums.ReminderType | null
    frequency: $Enums.ReminderFrequency | null
    isActive: boolean | null
    lastSent: Date | null
    nextDue: Date | null
    message: string | null
    createdAt: Date | null
  }

  export type GoalReminderMaxAggregateOutputType = {
    id: string | null
    goalId: string | null
    userId: string | null
    type: $Enums.ReminderType | null
    frequency: $Enums.ReminderFrequency | null
    isActive: boolean | null
    lastSent: Date | null
    nextDue: Date | null
    message: string | null
    createdAt: Date | null
  }

  export type GoalReminderCountAggregateOutputType = {
    id: number
    goalId: number
    userId: number
    type: number
    frequency: number
    isActive: number
    lastSent: number
    nextDue: number
    message: number
    createdAt: number
    _all: number
  }


  export type GoalReminderMinAggregateInputType = {
    id?: true
    goalId?: true
    userId?: true
    type?: true
    frequency?: true
    isActive?: true
    lastSent?: true
    nextDue?: true
    message?: true
    createdAt?: true
  }

  export type GoalReminderMaxAggregateInputType = {
    id?: true
    goalId?: true
    userId?: true
    type?: true
    frequency?: true
    isActive?: true
    lastSent?: true
    nextDue?: true
    message?: true
    createdAt?: true
  }

  export type GoalReminderCountAggregateInputType = {
    id?: true
    goalId?: true
    userId?: true
    type?: true
    frequency?: true
    isActive?: true
    lastSent?: true
    nextDue?: true
    message?: true
    createdAt?: true
    _all?: true
  }

  export type GoalReminderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoalReminder to aggregate.
     */
    where?: GoalReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalReminders to fetch.
     */
    orderBy?: GoalReminderOrderByWithRelationInput | GoalReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalReminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalReminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GoalReminders
    **/
    _count?: true | GoalReminderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalReminderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalReminderMaxAggregateInputType
  }

  export type GetGoalReminderAggregateType<T extends GoalReminderAggregateArgs> = {
        [P in keyof T & keyof AggregateGoalReminder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoalReminder[P]>
      : GetScalarType<T[P], AggregateGoalReminder[P]>
  }




  export type GoalReminderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalReminderWhereInput
    orderBy?: GoalReminderOrderByWithAggregationInput | GoalReminderOrderByWithAggregationInput[]
    by: GoalReminderScalarFieldEnum[] | GoalReminderScalarFieldEnum
    having?: GoalReminderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalReminderCountAggregateInputType | true
    _min?: GoalReminderMinAggregateInputType
    _max?: GoalReminderMaxAggregateInputType
  }

  export type GoalReminderGroupByOutputType = {
    id: string
    goalId: string
    userId: string
    type: $Enums.ReminderType
    frequency: $Enums.ReminderFrequency
    isActive: boolean
    lastSent: Date | null
    nextDue: Date | null
    message: string | null
    createdAt: Date
    _count: GoalReminderCountAggregateOutputType | null
    _min: GoalReminderMinAggregateOutputType | null
    _max: GoalReminderMaxAggregateOutputType | null
  }

  type GetGoalReminderGroupByPayload<T extends GoalReminderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalReminderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalReminderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalReminderGroupByOutputType[P]>
            : GetScalarType<T[P], GoalReminderGroupByOutputType[P]>
        }
      >
    >


  export type GoalReminderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goalId?: boolean
    userId?: boolean
    type?: boolean
    frequency?: boolean
    isActive?: boolean
    lastSent?: boolean
    nextDue?: boolean
    message?: boolean
    createdAt?: boolean
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goalReminder"]>

  export type GoalReminderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goalId?: boolean
    userId?: boolean
    type?: boolean
    frequency?: boolean
    isActive?: boolean
    lastSent?: boolean
    nextDue?: boolean
    message?: boolean
    createdAt?: boolean
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goalReminder"]>

  export type GoalReminderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goalId?: boolean
    userId?: boolean
    type?: boolean
    frequency?: boolean
    isActive?: boolean
    lastSent?: boolean
    nextDue?: boolean
    message?: boolean
    createdAt?: boolean
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goalReminder"]>

  export type GoalReminderSelectScalar = {
    id?: boolean
    goalId?: boolean
    userId?: boolean
    type?: boolean
    frequency?: boolean
    isActive?: boolean
    lastSent?: boolean
    nextDue?: boolean
    message?: boolean
    createdAt?: boolean
  }

  export type GoalReminderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "goalId" | "userId" | "type" | "frequency" | "isActive" | "lastSent" | "nextDue" | "message" | "createdAt", ExtArgs["result"]["goalReminder"]>
  export type GoalReminderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GoalReminderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GoalReminderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GoalReminderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GoalReminder"
    objects: {
      goal: Prisma.$GoalPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      goalId: string
      userId: string
      type: $Enums.ReminderType
      frequency: $Enums.ReminderFrequency
      isActive: boolean
      lastSent: Date | null
      nextDue: Date | null
      message: string | null
      createdAt: Date
    }, ExtArgs["result"]["goalReminder"]>
    composites: {}
  }

  type GoalReminderGetPayload<S extends boolean | null | undefined | GoalReminderDefaultArgs> = $Result.GetResult<Prisma.$GoalReminderPayload, S>

  type GoalReminderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GoalReminderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GoalReminderCountAggregateInputType | true
    }

  export interface GoalReminderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GoalReminder'], meta: { name: 'GoalReminder' } }
    /**
     * Find zero or one GoalReminder that matches the filter.
     * @param {GoalReminderFindUniqueArgs} args - Arguments to find a GoalReminder
     * @example
     * // Get one GoalReminder
     * const goalReminder = await prisma.goalReminder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalReminderFindUniqueArgs>(args: SelectSubset<T, GoalReminderFindUniqueArgs<ExtArgs>>): Prisma__GoalReminderClient<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GoalReminder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GoalReminderFindUniqueOrThrowArgs} args - Arguments to find a GoalReminder
     * @example
     * // Get one GoalReminder
     * const goalReminder = await prisma.goalReminder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalReminderFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalReminderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalReminderClient<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GoalReminder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReminderFindFirstArgs} args - Arguments to find a GoalReminder
     * @example
     * // Get one GoalReminder
     * const goalReminder = await prisma.goalReminder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalReminderFindFirstArgs>(args?: SelectSubset<T, GoalReminderFindFirstArgs<ExtArgs>>): Prisma__GoalReminderClient<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GoalReminder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReminderFindFirstOrThrowArgs} args - Arguments to find a GoalReminder
     * @example
     * // Get one GoalReminder
     * const goalReminder = await prisma.goalReminder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalReminderFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalReminderFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalReminderClient<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GoalReminders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReminderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GoalReminders
     * const goalReminders = await prisma.goalReminder.findMany()
     * 
     * // Get first 10 GoalReminders
     * const goalReminders = await prisma.goalReminder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalReminderWithIdOnly = await prisma.goalReminder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalReminderFindManyArgs>(args?: SelectSubset<T, GoalReminderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GoalReminder.
     * @param {GoalReminderCreateArgs} args - Arguments to create a GoalReminder.
     * @example
     * // Create one GoalReminder
     * const GoalReminder = await prisma.goalReminder.create({
     *   data: {
     *     // ... data to create a GoalReminder
     *   }
     * })
     * 
     */
    create<T extends GoalReminderCreateArgs>(args: SelectSubset<T, GoalReminderCreateArgs<ExtArgs>>): Prisma__GoalReminderClient<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GoalReminders.
     * @param {GoalReminderCreateManyArgs} args - Arguments to create many GoalReminders.
     * @example
     * // Create many GoalReminders
     * const goalReminder = await prisma.goalReminder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalReminderCreateManyArgs>(args?: SelectSubset<T, GoalReminderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GoalReminders and returns the data saved in the database.
     * @param {GoalReminderCreateManyAndReturnArgs} args - Arguments to create many GoalReminders.
     * @example
     * // Create many GoalReminders
     * const goalReminder = await prisma.goalReminder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GoalReminders and only return the `id`
     * const goalReminderWithIdOnly = await prisma.goalReminder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalReminderCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalReminderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GoalReminder.
     * @param {GoalReminderDeleteArgs} args - Arguments to delete one GoalReminder.
     * @example
     * // Delete one GoalReminder
     * const GoalReminder = await prisma.goalReminder.delete({
     *   where: {
     *     // ... filter to delete one GoalReminder
     *   }
     * })
     * 
     */
    delete<T extends GoalReminderDeleteArgs>(args: SelectSubset<T, GoalReminderDeleteArgs<ExtArgs>>): Prisma__GoalReminderClient<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GoalReminder.
     * @param {GoalReminderUpdateArgs} args - Arguments to update one GoalReminder.
     * @example
     * // Update one GoalReminder
     * const goalReminder = await prisma.goalReminder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalReminderUpdateArgs>(args: SelectSubset<T, GoalReminderUpdateArgs<ExtArgs>>): Prisma__GoalReminderClient<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GoalReminders.
     * @param {GoalReminderDeleteManyArgs} args - Arguments to filter GoalReminders to delete.
     * @example
     * // Delete a few GoalReminders
     * const { count } = await prisma.goalReminder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalReminderDeleteManyArgs>(args?: SelectSubset<T, GoalReminderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoalReminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReminderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GoalReminders
     * const goalReminder = await prisma.goalReminder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalReminderUpdateManyArgs>(args: SelectSubset<T, GoalReminderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoalReminders and returns the data updated in the database.
     * @param {GoalReminderUpdateManyAndReturnArgs} args - Arguments to update many GoalReminders.
     * @example
     * // Update many GoalReminders
     * const goalReminder = await prisma.goalReminder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GoalReminders and only return the `id`
     * const goalReminderWithIdOnly = await prisma.goalReminder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GoalReminderUpdateManyAndReturnArgs>(args: SelectSubset<T, GoalReminderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GoalReminder.
     * @param {GoalReminderUpsertArgs} args - Arguments to update or create a GoalReminder.
     * @example
     * // Update or create a GoalReminder
     * const goalReminder = await prisma.goalReminder.upsert({
     *   create: {
     *     // ... data to create a GoalReminder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GoalReminder we want to update
     *   }
     * })
     */
    upsert<T extends GoalReminderUpsertArgs>(args: SelectSubset<T, GoalReminderUpsertArgs<ExtArgs>>): Prisma__GoalReminderClient<$Result.GetResult<Prisma.$GoalReminderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GoalReminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReminderCountArgs} args - Arguments to filter GoalReminders to count.
     * @example
     * // Count the number of GoalReminders
     * const count = await prisma.goalReminder.count({
     *   where: {
     *     // ... the filter for the GoalReminders we want to count
     *   }
     * })
    **/
    count<T extends GoalReminderCountArgs>(
      args?: Subset<T, GoalReminderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalReminderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GoalReminder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReminderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalReminderAggregateArgs>(args: Subset<T, GoalReminderAggregateArgs>): Prisma.PrismaPromise<GetGoalReminderAggregateType<T>>

    /**
     * Group by GoalReminder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReminderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalReminderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalReminderGroupByArgs['orderBy'] }
        : { orderBy?: GoalReminderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalReminderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalReminderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GoalReminder model
   */
  readonly fields: GoalReminderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GoalReminder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalReminderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    goal<T extends GoalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GoalDefaultArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GoalReminder model
   */
  interface GoalReminderFieldRefs {
    readonly id: FieldRef<"GoalReminder", 'String'>
    readonly goalId: FieldRef<"GoalReminder", 'String'>
    readonly userId: FieldRef<"GoalReminder", 'String'>
    readonly type: FieldRef<"GoalReminder", 'ReminderType'>
    readonly frequency: FieldRef<"GoalReminder", 'ReminderFrequency'>
    readonly isActive: FieldRef<"GoalReminder", 'Boolean'>
    readonly lastSent: FieldRef<"GoalReminder", 'DateTime'>
    readonly nextDue: FieldRef<"GoalReminder", 'DateTime'>
    readonly message: FieldRef<"GoalReminder", 'String'>
    readonly createdAt: FieldRef<"GoalReminder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GoalReminder findUnique
   */
  export type GoalReminderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderInclude<ExtArgs> | null
    /**
     * Filter, which GoalReminder to fetch.
     */
    where: GoalReminderWhereUniqueInput
  }

  /**
   * GoalReminder findUniqueOrThrow
   */
  export type GoalReminderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderInclude<ExtArgs> | null
    /**
     * Filter, which GoalReminder to fetch.
     */
    where: GoalReminderWhereUniqueInput
  }

  /**
   * GoalReminder findFirst
   */
  export type GoalReminderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderInclude<ExtArgs> | null
    /**
     * Filter, which GoalReminder to fetch.
     */
    where?: GoalReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalReminders to fetch.
     */
    orderBy?: GoalReminderOrderByWithRelationInput | GoalReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalReminders.
     */
    cursor?: GoalReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalReminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalReminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalReminders.
     */
    distinct?: GoalReminderScalarFieldEnum | GoalReminderScalarFieldEnum[]
  }

  /**
   * GoalReminder findFirstOrThrow
   */
  export type GoalReminderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderInclude<ExtArgs> | null
    /**
     * Filter, which GoalReminder to fetch.
     */
    where?: GoalReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalReminders to fetch.
     */
    orderBy?: GoalReminderOrderByWithRelationInput | GoalReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalReminders.
     */
    cursor?: GoalReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalReminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalReminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalReminders.
     */
    distinct?: GoalReminderScalarFieldEnum | GoalReminderScalarFieldEnum[]
  }

  /**
   * GoalReminder findMany
   */
  export type GoalReminderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderInclude<ExtArgs> | null
    /**
     * Filter, which GoalReminders to fetch.
     */
    where?: GoalReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalReminders to fetch.
     */
    orderBy?: GoalReminderOrderByWithRelationInput | GoalReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GoalReminders.
     */
    cursor?: GoalReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalReminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalReminders.
     */
    skip?: number
    distinct?: GoalReminderScalarFieldEnum | GoalReminderScalarFieldEnum[]
  }

  /**
   * GoalReminder create
   */
  export type GoalReminderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderInclude<ExtArgs> | null
    /**
     * The data needed to create a GoalReminder.
     */
    data: XOR<GoalReminderCreateInput, GoalReminderUncheckedCreateInput>
  }

  /**
   * GoalReminder createMany
   */
  export type GoalReminderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GoalReminders.
     */
    data: GoalReminderCreateManyInput | GoalReminderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GoalReminder createManyAndReturn
   */
  export type GoalReminderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * The data used to create many GoalReminders.
     */
    data: GoalReminderCreateManyInput | GoalReminderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GoalReminder update
   */
  export type GoalReminderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderInclude<ExtArgs> | null
    /**
     * The data needed to update a GoalReminder.
     */
    data: XOR<GoalReminderUpdateInput, GoalReminderUncheckedUpdateInput>
    /**
     * Choose, which GoalReminder to update.
     */
    where: GoalReminderWhereUniqueInput
  }

  /**
   * GoalReminder updateMany
   */
  export type GoalReminderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GoalReminders.
     */
    data: XOR<GoalReminderUpdateManyMutationInput, GoalReminderUncheckedUpdateManyInput>
    /**
     * Filter which GoalReminders to update
     */
    where?: GoalReminderWhereInput
    /**
     * Limit how many GoalReminders to update.
     */
    limit?: number
  }

  /**
   * GoalReminder updateManyAndReturn
   */
  export type GoalReminderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * The data used to update GoalReminders.
     */
    data: XOR<GoalReminderUpdateManyMutationInput, GoalReminderUncheckedUpdateManyInput>
    /**
     * Filter which GoalReminders to update
     */
    where?: GoalReminderWhereInput
    /**
     * Limit how many GoalReminders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GoalReminder upsert
   */
  export type GoalReminderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderInclude<ExtArgs> | null
    /**
     * The filter to search for the GoalReminder to update in case it exists.
     */
    where: GoalReminderWhereUniqueInput
    /**
     * In case the GoalReminder found by the `where` argument doesn't exist, create a new GoalReminder with this data.
     */
    create: XOR<GoalReminderCreateInput, GoalReminderUncheckedCreateInput>
    /**
     * In case the GoalReminder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalReminderUpdateInput, GoalReminderUncheckedUpdateInput>
  }

  /**
   * GoalReminder delete
   */
  export type GoalReminderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderInclude<ExtArgs> | null
    /**
     * Filter which GoalReminder to delete.
     */
    where: GoalReminderWhereUniqueInput
  }

  /**
   * GoalReminder deleteMany
   */
  export type GoalReminderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoalReminders to delete
     */
    where?: GoalReminderWhereInput
    /**
     * Limit how many GoalReminders to delete.
     */
    limit?: number
  }

  /**
   * GoalReminder without action
   */
  export type GoalReminderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReminder
     */
    select?: GoalReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalReminder
     */
    omit?: GoalReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReminderInclude<ExtArgs> | null
  }


  /**
   * Model PokerTournament
   */

  export type AggregatePokerTournament = {
    _count: PokerTournamentCountAggregateOutputType | null
    _avg: PokerTournamentAvgAggregateOutputType | null
    _sum: PokerTournamentSumAggregateOutputType | null
    _min: PokerTournamentMinAggregateOutputType | null
    _max: PokerTournamentMaxAggregateOutputType | null
  }

  export type PokerTournamentAvgAggregateOutputType = {
    accommodationCost: Decimal | null
    foodBudget: Decimal | null
    otherExpenses: Decimal | null
  }

  export type PokerTournamentSumAggregateOutputType = {
    accommodationCost: Decimal | null
    foodBudget: Decimal | null
    otherExpenses: Decimal | null
  }

  export type PokerTournamentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    location: string | null
    venue: string | null
    dateStart: Date | null
    dateEnd: Date | null
    accommodationCost: Decimal | null
    foodBudget: Decimal | null
    otherExpenses: Decimal | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PokerTournamentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    location: string | null
    venue: string | null
    dateStart: Date | null
    dateEnd: Date | null
    accommodationCost: Decimal | null
    foodBudget: Decimal | null
    otherExpenses: Decimal | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PokerTournamentCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    location: number
    venue: number
    dateStart: number
    dateEnd: number
    accommodationCost: number
    foodBudget: number
    otherExpenses: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PokerTournamentAvgAggregateInputType = {
    accommodationCost?: true
    foodBudget?: true
    otherExpenses?: true
  }

  export type PokerTournamentSumAggregateInputType = {
    accommodationCost?: true
    foodBudget?: true
    otherExpenses?: true
  }

  export type PokerTournamentMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    location?: true
    venue?: true
    dateStart?: true
    dateEnd?: true
    accommodationCost?: true
    foodBudget?: true
    otherExpenses?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PokerTournamentMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    location?: true
    venue?: true
    dateStart?: true
    dateEnd?: true
    accommodationCost?: true
    foodBudget?: true
    otherExpenses?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PokerTournamentCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    location?: true
    venue?: true
    dateStart?: true
    dateEnd?: true
    accommodationCost?: true
    foodBudget?: true
    otherExpenses?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PokerTournamentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PokerTournament to aggregate.
     */
    where?: PokerTournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PokerTournaments to fetch.
     */
    orderBy?: PokerTournamentOrderByWithRelationInput | PokerTournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PokerTournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PokerTournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PokerTournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PokerTournaments
    **/
    _count?: true | PokerTournamentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PokerTournamentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PokerTournamentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PokerTournamentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PokerTournamentMaxAggregateInputType
  }

  export type GetPokerTournamentAggregateType<T extends PokerTournamentAggregateArgs> = {
        [P in keyof T & keyof AggregatePokerTournament]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePokerTournament[P]>
      : GetScalarType<T[P], AggregatePokerTournament[P]>
  }




  export type PokerTournamentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PokerTournamentWhereInput
    orderBy?: PokerTournamentOrderByWithAggregationInput | PokerTournamentOrderByWithAggregationInput[]
    by: PokerTournamentScalarFieldEnum[] | PokerTournamentScalarFieldEnum
    having?: PokerTournamentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PokerTournamentCountAggregateInputType | true
    _avg?: PokerTournamentAvgAggregateInputType
    _sum?: PokerTournamentSumAggregateInputType
    _min?: PokerTournamentMinAggregateInputType
    _max?: PokerTournamentMaxAggregateInputType
  }

  export type PokerTournamentGroupByOutputType = {
    id: string
    userId: string
    name: string
    location: string
    venue: string | null
    dateStart: Date
    dateEnd: Date | null
    accommodationCost: Decimal
    foodBudget: Decimal
    otherExpenses: Decimal
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: PokerTournamentCountAggregateOutputType | null
    _avg: PokerTournamentAvgAggregateOutputType | null
    _sum: PokerTournamentSumAggregateOutputType | null
    _min: PokerTournamentMinAggregateOutputType | null
    _max: PokerTournamentMaxAggregateOutputType | null
  }

  type GetPokerTournamentGroupByPayload<T extends PokerTournamentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PokerTournamentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PokerTournamentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PokerTournamentGroupByOutputType[P]>
            : GetScalarType<T[P], PokerTournamentGroupByOutputType[P]>
        }
      >
    >


  export type PokerTournamentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    location?: boolean
    venue?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    accommodationCost?: boolean
    foodBudget?: boolean
    otherExpenses?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    events?: boolean | PokerTournament$eventsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | PokerTournamentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pokerTournament"]>

  export type PokerTournamentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    location?: boolean
    venue?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    accommodationCost?: boolean
    foodBudget?: boolean
    otherExpenses?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pokerTournament"]>

  export type PokerTournamentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    location?: boolean
    venue?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    accommodationCost?: boolean
    foodBudget?: boolean
    otherExpenses?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pokerTournament"]>

  export type PokerTournamentSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    location?: boolean
    venue?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    accommodationCost?: boolean
    foodBudget?: boolean
    otherExpenses?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PokerTournamentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "location" | "venue" | "dateStart" | "dateEnd" | "accommodationCost" | "foodBudget" | "otherExpenses" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["pokerTournament"]>
  export type PokerTournamentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | PokerTournament$eventsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | PokerTournamentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PokerTournamentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PokerTournamentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PokerTournamentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PokerTournament"
    objects: {
      events: Prisma.$PokerTournamentEventPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      location: string
      venue: string | null
      dateStart: Date
      dateEnd: Date | null
      accommodationCost: Prisma.Decimal
      foodBudget: Prisma.Decimal
      otherExpenses: Prisma.Decimal
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pokerTournament"]>
    composites: {}
  }

  type PokerTournamentGetPayload<S extends boolean | null | undefined | PokerTournamentDefaultArgs> = $Result.GetResult<Prisma.$PokerTournamentPayload, S>

  type PokerTournamentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PokerTournamentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PokerTournamentCountAggregateInputType | true
    }

  export interface PokerTournamentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PokerTournament'], meta: { name: 'PokerTournament' } }
    /**
     * Find zero or one PokerTournament that matches the filter.
     * @param {PokerTournamentFindUniqueArgs} args - Arguments to find a PokerTournament
     * @example
     * // Get one PokerTournament
     * const pokerTournament = await prisma.pokerTournament.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PokerTournamentFindUniqueArgs>(args: SelectSubset<T, PokerTournamentFindUniqueArgs<ExtArgs>>): Prisma__PokerTournamentClient<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PokerTournament that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PokerTournamentFindUniqueOrThrowArgs} args - Arguments to find a PokerTournament
     * @example
     * // Get one PokerTournament
     * const pokerTournament = await prisma.pokerTournament.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PokerTournamentFindUniqueOrThrowArgs>(args: SelectSubset<T, PokerTournamentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PokerTournamentClient<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PokerTournament that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentFindFirstArgs} args - Arguments to find a PokerTournament
     * @example
     * // Get one PokerTournament
     * const pokerTournament = await prisma.pokerTournament.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PokerTournamentFindFirstArgs>(args?: SelectSubset<T, PokerTournamentFindFirstArgs<ExtArgs>>): Prisma__PokerTournamentClient<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PokerTournament that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentFindFirstOrThrowArgs} args - Arguments to find a PokerTournament
     * @example
     * // Get one PokerTournament
     * const pokerTournament = await prisma.pokerTournament.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PokerTournamentFindFirstOrThrowArgs>(args?: SelectSubset<T, PokerTournamentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PokerTournamentClient<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PokerTournaments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PokerTournaments
     * const pokerTournaments = await prisma.pokerTournament.findMany()
     * 
     * // Get first 10 PokerTournaments
     * const pokerTournaments = await prisma.pokerTournament.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pokerTournamentWithIdOnly = await prisma.pokerTournament.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PokerTournamentFindManyArgs>(args?: SelectSubset<T, PokerTournamentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PokerTournament.
     * @param {PokerTournamentCreateArgs} args - Arguments to create a PokerTournament.
     * @example
     * // Create one PokerTournament
     * const PokerTournament = await prisma.pokerTournament.create({
     *   data: {
     *     // ... data to create a PokerTournament
     *   }
     * })
     * 
     */
    create<T extends PokerTournamentCreateArgs>(args: SelectSubset<T, PokerTournamentCreateArgs<ExtArgs>>): Prisma__PokerTournamentClient<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PokerTournaments.
     * @param {PokerTournamentCreateManyArgs} args - Arguments to create many PokerTournaments.
     * @example
     * // Create many PokerTournaments
     * const pokerTournament = await prisma.pokerTournament.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PokerTournamentCreateManyArgs>(args?: SelectSubset<T, PokerTournamentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PokerTournaments and returns the data saved in the database.
     * @param {PokerTournamentCreateManyAndReturnArgs} args - Arguments to create many PokerTournaments.
     * @example
     * // Create many PokerTournaments
     * const pokerTournament = await prisma.pokerTournament.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PokerTournaments and only return the `id`
     * const pokerTournamentWithIdOnly = await prisma.pokerTournament.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PokerTournamentCreateManyAndReturnArgs>(args?: SelectSubset<T, PokerTournamentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PokerTournament.
     * @param {PokerTournamentDeleteArgs} args - Arguments to delete one PokerTournament.
     * @example
     * // Delete one PokerTournament
     * const PokerTournament = await prisma.pokerTournament.delete({
     *   where: {
     *     // ... filter to delete one PokerTournament
     *   }
     * })
     * 
     */
    delete<T extends PokerTournamentDeleteArgs>(args: SelectSubset<T, PokerTournamentDeleteArgs<ExtArgs>>): Prisma__PokerTournamentClient<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PokerTournament.
     * @param {PokerTournamentUpdateArgs} args - Arguments to update one PokerTournament.
     * @example
     * // Update one PokerTournament
     * const pokerTournament = await prisma.pokerTournament.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PokerTournamentUpdateArgs>(args: SelectSubset<T, PokerTournamentUpdateArgs<ExtArgs>>): Prisma__PokerTournamentClient<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PokerTournaments.
     * @param {PokerTournamentDeleteManyArgs} args - Arguments to filter PokerTournaments to delete.
     * @example
     * // Delete a few PokerTournaments
     * const { count } = await prisma.pokerTournament.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PokerTournamentDeleteManyArgs>(args?: SelectSubset<T, PokerTournamentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PokerTournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PokerTournaments
     * const pokerTournament = await prisma.pokerTournament.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PokerTournamentUpdateManyArgs>(args: SelectSubset<T, PokerTournamentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PokerTournaments and returns the data updated in the database.
     * @param {PokerTournamentUpdateManyAndReturnArgs} args - Arguments to update many PokerTournaments.
     * @example
     * // Update many PokerTournaments
     * const pokerTournament = await prisma.pokerTournament.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PokerTournaments and only return the `id`
     * const pokerTournamentWithIdOnly = await prisma.pokerTournament.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PokerTournamentUpdateManyAndReturnArgs>(args: SelectSubset<T, PokerTournamentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PokerTournament.
     * @param {PokerTournamentUpsertArgs} args - Arguments to update or create a PokerTournament.
     * @example
     * // Update or create a PokerTournament
     * const pokerTournament = await prisma.pokerTournament.upsert({
     *   create: {
     *     // ... data to create a PokerTournament
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PokerTournament we want to update
     *   }
     * })
     */
    upsert<T extends PokerTournamentUpsertArgs>(args: SelectSubset<T, PokerTournamentUpsertArgs<ExtArgs>>): Prisma__PokerTournamentClient<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PokerTournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentCountArgs} args - Arguments to filter PokerTournaments to count.
     * @example
     * // Count the number of PokerTournaments
     * const count = await prisma.pokerTournament.count({
     *   where: {
     *     // ... the filter for the PokerTournaments we want to count
     *   }
     * })
    **/
    count<T extends PokerTournamentCountArgs>(
      args?: Subset<T, PokerTournamentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PokerTournamentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PokerTournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PokerTournamentAggregateArgs>(args: Subset<T, PokerTournamentAggregateArgs>): Prisma.PrismaPromise<GetPokerTournamentAggregateType<T>>

    /**
     * Group by PokerTournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PokerTournamentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PokerTournamentGroupByArgs['orderBy'] }
        : { orderBy?: PokerTournamentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PokerTournamentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPokerTournamentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PokerTournament model
   */
  readonly fields: PokerTournamentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PokerTournament.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PokerTournamentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends PokerTournament$eventsArgs<ExtArgs> = {}>(args?: Subset<T, PokerTournament$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PokerTournament model
   */
  interface PokerTournamentFieldRefs {
    readonly id: FieldRef<"PokerTournament", 'String'>
    readonly userId: FieldRef<"PokerTournament", 'String'>
    readonly name: FieldRef<"PokerTournament", 'String'>
    readonly location: FieldRef<"PokerTournament", 'String'>
    readonly venue: FieldRef<"PokerTournament", 'String'>
    readonly dateStart: FieldRef<"PokerTournament", 'DateTime'>
    readonly dateEnd: FieldRef<"PokerTournament", 'DateTime'>
    readonly accommodationCost: FieldRef<"PokerTournament", 'Decimal'>
    readonly foodBudget: FieldRef<"PokerTournament", 'Decimal'>
    readonly otherExpenses: FieldRef<"PokerTournament", 'Decimal'>
    readonly notes: FieldRef<"PokerTournament", 'String'>
    readonly createdAt: FieldRef<"PokerTournament", 'DateTime'>
    readonly updatedAt: FieldRef<"PokerTournament", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PokerTournament findUnique
   */
  export type PokerTournamentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentInclude<ExtArgs> | null
    /**
     * Filter, which PokerTournament to fetch.
     */
    where: PokerTournamentWhereUniqueInput
  }

  /**
   * PokerTournament findUniqueOrThrow
   */
  export type PokerTournamentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentInclude<ExtArgs> | null
    /**
     * Filter, which PokerTournament to fetch.
     */
    where: PokerTournamentWhereUniqueInput
  }

  /**
   * PokerTournament findFirst
   */
  export type PokerTournamentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentInclude<ExtArgs> | null
    /**
     * Filter, which PokerTournament to fetch.
     */
    where?: PokerTournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PokerTournaments to fetch.
     */
    orderBy?: PokerTournamentOrderByWithRelationInput | PokerTournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PokerTournaments.
     */
    cursor?: PokerTournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PokerTournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PokerTournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PokerTournaments.
     */
    distinct?: PokerTournamentScalarFieldEnum | PokerTournamentScalarFieldEnum[]
  }

  /**
   * PokerTournament findFirstOrThrow
   */
  export type PokerTournamentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentInclude<ExtArgs> | null
    /**
     * Filter, which PokerTournament to fetch.
     */
    where?: PokerTournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PokerTournaments to fetch.
     */
    orderBy?: PokerTournamentOrderByWithRelationInput | PokerTournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PokerTournaments.
     */
    cursor?: PokerTournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PokerTournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PokerTournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PokerTournaments.
     */
    distinct?: PokerTournamentScalarFieldEnum | PokerTournamentScalarFieldEnum[]
  }

  /**
   * PokerTournament findMany
   */
  export type PokerTournamentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentInclude<ExtArgs> | null
    /**
     * Filter, which PokerTournaments to fetch.
     */
    where?: PokerTournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PokerTournaments to fetch.
     */
    orderBy?: PokerTournamentOrderByWithRelationInput | PokerTournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PokerTournaments.
     */
    cursor?: PokerTournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PokerTournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PokerTournaments.
     */
    skip?: number
    distinct?: PokerTournamentScalarFieldEnum | PokerTournamentScalarFieldEnum[]
  }

  /**
   * PokerTournament create
   */
  export type PokerTournamentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentInclude<ExtArgs> | null
    /**
     * The data needed to create a PokerTournament.
     */
    data: XOR<PokerTournamentCreateInput, PokerTournamentUncheckedCreateInput>
  }

  /**
   * PokerTournament createMany
   */
  export type PokerTournamentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PokerTournaments.
     */
    data: PokerTournamentCreateManyInput | PokerTournamentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PokerTournament createManyAndReturn
   */
  export type PokerTournamentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * The data used to create many PokerTournaments.
     */
    data: PokerTournamentCreateManyInput | PokerTournamentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PokerTournament update
   */
  export type PokerTournamentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentInclude<ExtArgs> | null
    /**
     * The data needed to update a PokerTournament.
     */
    data: XOR<PokerTournamentUpdateInput, PokerTournamentUncheckedUpdateInput>
    /**
     * Choose, which PokerTournament to update.
     */
    where: PokerTournamentWhereUniqueInput
  }

  /**
   * PokerTournament updateMany
   */
  export type PokerTournamentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PokerTournaments.
     */
    data: XOR<PokerTournamentUpdateManyMutationInput, PokerTournamentUncheckedUpdateManyInput>
    /**
     * Filter which PokerTournaments to update
     */
    where?: PokerTournamentWhereInput
    /**
     * Limit how many PokerTournaments to update.
     */
    limit?: number
  }

  /**
   * PokerTournament updateManyAndReturn
   */
  export type PokerTournamentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * The data used to update PokerTournaments.
     */
    data: XOR<PokerTournamentUpdateManyMutationInput, PokerTournamentUncheckedUpdateManyInput>
    /**
     * Filter which PokerTournaments to update
     */
    where?: PokerTournamentWhereInput
    /**
     * Limit how many PokerTournaments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PokerTournament upsert
   */
  export type PokerTournamentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentInclude<ExtArgs> | null
    /**
     * The filter to search for the PokerTournament to update in case it exists.
     */
    where: PokerTournamentWhereUniqueInput
    /**
     * In case the PokerTournament found by the `where` argument doesn't exist, create a new PokerTournament with this data.
     */
    create: XOR<PokerTournamentCreateInput, PokerTournamentUncheckedCreateInput>
    /**
     * In case the PokerTournament was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PokerTournamentUpdateInput, PokerTournamentUncheckedUpdateInput>
  }

  /**
   * PokerTournament delete
   */
  export type PokerTournamentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentInclude<ExtArgs> | null
    /**
     * Filter which PokerTournament to delete.
     */
    where: PokerTournamentWhereUniqueInput
  }

  /**
   * PokerTournament deleteMany
   */
  export type PokerTournamentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PokerTournaments to delete
     */
    where?: PokerTournamentWhereInput
    /**
     * Limit how many PokerTournaments to delete.
     */
    limit?: number
  }

  /**
   * PokerTournament.events
   */
  export type PokerTournament$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventInclude<ExtArgs> | null
    where?: PokerTournamentEventWhereInput
    orderBy?: PokerTournamentEventOrderByWithRelationInput | PokerTournamentEventOrderByWithRelationInput[]
    cursor?: PokerTournamentEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PokerTournamentEventScalarFieldEnum | PokerTournamentEventScalarFieldEnum[]
  }

  /**
   * PokerTournament without action
   */
  export type PokerTournamentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournament
     */
    select?: PokerTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournament
     */
    omit?: PokerTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentInclude<ExtArgs> | null
  }


  /**
   * Model PokerTournamentEvent
   */

  export type AggregatePokerTournamentEvent = {
    _count: PokerTournamentEventCountAggregateOutputType | null
    _avg: PokerTournamentEventAvgAggregateOutputType | null
    _sum: PokerTournamentEventSumAggregateOutputType | null
    _min: PokerTournamentEventMinAggregateOutputType | null
    _max: PokerTournamentEventMaxAggregateOutputType | null
  }

  export type PokerTournamentEventAvgAggregateOutputType = {
    buyIn: Decimal | null
    winnings: Decimal | null
    fieldSize: number | null
    finishPosition: number | null
    reBuyAmount: Decimal | null
    reBuys: number | null
    startingStack: number | null
  }

  export type PokerTournamentEventSumAggregateOutputType = {
    buyIn: Decimal | null
    winnings: Decimal | null
    fieldSize: number | null
    finishPosition: number | null
    reBuyAmount: Decimal | null
    reBuys: number | null
    startingStack: number | null
  }

  export type PokerTournamentEventMinAggregateOutputType = {
    id: string | null
    tournamentId: string | null
    userId: string | null
    eventName: string | null
    eventNumber: string | null
    buyIn: Decimal | null
    winnings: Decimal | null
    eventDate: Date | null
    gameType: $Enums.GameType | null
    fieldSize: number | null
    finishPosition: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reBuyAmount: Decimal | null
    reBuys: number | null
    startingStack: number | null
    isClosed: boolean | null
  }

  export type PokerTournamentEventMaxAggregateOutputType = {
    id: string | null
    tournamentId: string | null
    userId: string | null
    eventName: string | null
    eventNumber: string | null
    buyIn: Decimal | null
    winnings: Decimal | null
    eventDate: Date | null
    gameType: $Enums.GameType | null
    fieldSize: number | null
    finishPosition: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reBuyAmount: Decimal | null
    reBuys: number | null
    startingStack: number | null
    isClosed: boolean | null
  }

  export type PokerTournamentEventCountAggregateOutputType = {
    id: number
    tournamentId: number
    userId: number
    eventName: number
    eventNumber: number
    buyIn: number
    winnings: number
    eventDate: number
    gameType: number
    fieldSize: number
    finishPosition: number
    notes: number
    createdAt: number
    updatedAt: number
    reBuyAmount: number
    reBuys: number
    startingStack: number
    isClosed: number
    _all: number
  }


  export type PokerTournamentEventAvgAggregateInputType = {
    buyIn?: true
    winnings?: true
    fieldSize?: true
    finishPosition?: true
    reBuyAmount?: true
    reBuys?: true
    startingStack?: true
  }

  export type PokerTournamentEventSumAggregateInputType = {
    buyIn?: true
    winnings?: true
    fieldSize?: true
    finishPosition?: true
    reBuyAmount?: true
    reBuys?: true
    startingStack?: true
  }

  export type PokerTournamentEventMinAggregateInputType = {
    id?: true
    tournamentId?: true
    userId?: true
    eventName?: true
    eventNumber?: true
    buyIn?: true
    winnings?: true
    eventDate?: true
    gameType?: true
    fieldSize?: true
    finishPosition?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    reBuyAmount?: true
    reBuys?: true
    startingStack?: true
    isClosed?: true
  }

  export type PokerTournamentEventMaxAggregateInputType = {
    id?: true
    tournamentId?: true
    userId?: true
    eventName?: true
    eventNumber?: true
    buyIn?: true
    winnings?: true
    eventDate?: true
    gameType?: true
    fieldSize?: true
    finishPosition?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    reBuyAmount?: true
    reBuys?: true
    startingStack?: true
    isClosed?: true
  }

  export type PokerTournamentEventCountAggregateInputType = {
    id?: true
    tournamentId?: true
    userId?: true
    eventName?: true
    eventNumber?: true
    buyIn?: true
    winnings?: true
    eventDate?: true
    gameType?: true
    fieldSize?: true
    finishPosition?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    reBuyAmount?: true
    reBuys?: true
    startingStack?: true
    isClosed?: true
    _all?: true
  }

  export type PokerTournamentEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PokerTournamentEvent to aggregate.
     */
    where?: PokerTournamentEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PokerTournamentEvents to fetch.
     */
    orderBy?: PokerTournamentEventOrderByWithRelationInput | PokerTournamentEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PokerTournamentEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PokerTournamentEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PokerTournamentEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PokerTournamentEvents
    **/
    _count?: true | PokerTournamentEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PokerTournamentEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PokerTournamentEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PokerTournamentEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PokerTournamentEventMaxAggregateInputType
  }

  export type GetPokerTournamentEventAggregateType<T extends PokerTournamentEventAggregateArgs> = {
        [P in keyof T & keyof AggregatePokerTournamentEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePokerTournamentEvent[P]>
      : GetScalarType<T[P], AggregatePokerTournamentEvent[P]>
  }




  export type PokerTournamentEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PokerTournamentEventWhereInput
    orderBy?: PokerTournamentEventOrderByWithAggregationInput | PokerTournamentEventOrderByWithAggregationInput[]
    by: PokerTournamentEventScalarFieldEnum[] | PokerTournamentEventScalarFieldEnum
    having?: PokerTournamentEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PokerTournamentEventCountAggregateInputType | true
    _avg?: PokerTournamentEventAvgAggregateInputType
    _sum?: PokerTournamentEventSumAggregateInputType
    _min?: PokerTournamentEventMinAggregateInputType
    _max?: PokerTournamentEventMaxAggregateInputType
  }

  export type PokerTournamentEventGroupByOutputType = {
    id: string
    tournamentId: string
    userId: string
    eventName: string
    eventNumber: string | null
    buyIn: Decimal
    winnings: Decimal
    eventDate: Date
    gameType: $Enums.GameType | null
    fieldSize: number | null
    finishPosition: number | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    reBuyAmount: Decimal | null
    reBuys: number | null
    startingStack: number | null
    isClosed: boolean
    _count: PokerTournamentEventCountAggregateOutputType | null
    _avg: PokerTournamentEventAvgAggregateOutputType | null
    _sum: PokerTournamentEventSumAggregateOutputType | null
    _min: PokerTournamentEventMinAggregateOutputType | null
    _max: PokerTournamentEventMaxAggregateOutputType | null
  }

  type GetPokerTournamentEventGroupByPayload<T extends PokerTournamentEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PokerTournamentEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PokerTournamentEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PokerTournamentEventGroupByOutputType[P]>
            : GetScalarType<T[P], PokerTournamentEventGroupByOutputType[P]>
        }
      >
    >


  export type PokerTournamentEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    userId?: boolean
    eventName?: boolean
    eventNumber?: boolean
    buyIn?: boolean
    winnings?: boolean
    eventDate?: boolean
    gameType?: boolean
    fieldSize?: boolean
    finishPosition?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reBuyAmount?: boolean
    reBuys?: boolean
    startingStack?: boolean
    isClosed?: boolean
    tournament?: boolean | PokerTournamentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pokerTournamentEvent"]>

  export type PokerTournamentEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    userId?: boolean
    eventName?: boolean
    eventNumber?: boolean
    buyIn?: boolean
    winnings?: boolean
    eventDate?: boolean
    gameType?: boolean
    fieldSize?: boolean
    finishPosition?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reBuyAmount?: boolean
    reBuys?: boolean
    startingStack?: boolean
    isClosed?: boolean
    tournament?: boolean | PokerTournamentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pokerTournamentEvent"]>

  export type PokerTournamentEventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    userId?: boolean
    eventName?: boolean
    eventNumber?: boolean
    buyIn?: boolean
    winnings?: boolean
    eventDate?: boolean
    gameType?: boolean
    fieldSize?: boolean
    finishPosition?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reBuyAmount?: boolean
    reBuys?: boolean
    startingStack?: boolean
    isClosed?: boolean
    tournament?: boolean | PokerTournamentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pokerTournamentEvent"]>

  export type PokerTournamentEventSelectScalar = {
    id?: boolean
    tournamentId?: boolean
    userId?: boolean
    eventName?: boolean
    eventNumber?: boolean
    buyIn?: boolean
    winnings?: boolean
    eventDate?: boolean
    gameType?: boolean
    fieldSize?: boolean
    finishPosition?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reBuyAmount?: boolean
    reBuys?: boolean
    startingStack?: boolean
    isClosed?: boolean
  }

  export type PokerTournamentEventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tournamentId" | "userId" | "eventName" | "eventNumber" | "buyIn" | "winnings" | "eventDate" | "gameType" | "fieldSize" | "finishPosition" | "notes" | "createdAt" | "updatedAt" | "reBuyAmount" | "reBuys" | "startingStack" | "isClosed", ExtArgs["result"]["pokerTournamentEvent"]>
  export type PokerTournamentEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | PokerTournamentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PokerTournamentEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | PokerTournamentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PokerTournamentEventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | PokerTournamentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PokerTournamentEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PokerTournamentEvent"
    objects: {
      tournament: Prisma.$PokerTournamentPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tournamentId: string
      userId: string
      eventName: string
      eventNumber: string | null
      buyIn: Prisma.Decimal
      winnings: Prisma.Decimal
      eventDate: Date
      gameType: $Enums.GameType | null
      fieldSize: number | null
      finishPosition: number | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
      reBuyAmount: Prisma.Decimal | null
      reBuys: number | null
      startingStack: number | null
      isClosed: boolean
    }, ExtArgs["result"]["pokerTournamentEvent"]>
    composites: {}
  }

  type PokerTournamentEventGetPayload<S extends boolean | null | undefined | PokerTournamentEventDefaultArgs> = $Result.GetResult<Prisma.$PokerTournamentEventPayload, S>

  type PokerTournamentEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PokerTournamentEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PokerTournamentEventCountAggregateInputType | true
    }

  export interface PokerTournamentEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PokerTournamentEvent'], meta: { name: 'PokerTournamentEvent' } }
    /**
     * Find zero or one PokerTournamentEvent that matches the filter.
     * @param {PokerTournamentEventFindUniqueArgs} args - Arguments to find a PokerTournamentEvent
     * @example
     * // Get one PokerTournamentEvent
     * const pokerTournamentEvent = await prisma.pokerTournamentEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PokerTournamentEventFindUniqueArgs>(args: SelectSubset<T, PokerTournamentEventFindUniqueArgs<ExtArgs>>): Prisma__PokerTournamentEventClient<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PokerTournamentEvent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PokerTournamentEventFindUniqueOrThrowArgs} args - Arguments to find a PokerTournamentEvent
     * @example
     * // Get one PokerTournamentEvent
     * const pokerTournamentEvent = await prisma.pokerTournamentEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PokerTournamentEventFindUniqueOrThrowArgs>(args: SelectSubset<T, PokerTournamentEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PokerTournamentEventClient<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PokerTournamentEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentEventFindFirstArgs} args - Arguments to find a PokerTournamentEvent
     * @example
     * // Get one PokerTournamentEvent
     * const pokerTournamentEvent = await prisma.pokerTournamentEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PokerTournamentEventFindFirstArgs>(args?: SelectSubset<T, PokerTournamentEventFindFirstArgs<ExtArgs>>): Prisma__PokerTournamentEventClient<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PokerTournamentEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentEventFindFirstOrThrowArgs} args - Arguments to find a PokerTournamentEvent
     * @example
     * // Get one PokerTournamentEvent
     * const pokerTournamentEvent = await prisma.pokerTournamentEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PokerTournamentEventFindFirstOrThrowArgs>(args?: SelectSubset<T, PokerTournamentEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__PokerTournamentEventClient<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PokerTournamentEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PokerTournamentEvents
     * const pokerTournamentEvents = await prisma.pokerTournamentEvent.findMany()
     * 
     * // Get first 10 PokerTournamentEvents
     * const pokerTournamentEvents = await prisma.pokerTournamentEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pokerTournamentEventWithIdOnly = await prisma.pokerTournamentEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PokerTournamentEventFindManyArgs>(args?: SelectSubset<T, PokerTournamentEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PokerTournamentEvent.
     * @param {PokerTournamentEventCreateArgs} args - Arguments to create a PokerTournamentEvent.
     * @example
     * // Create one PokerTournamentEvent
     * const PokerTournamentEvent = await prisma.pokerTournamentEvent.create({
     *   data: {
     *     // ... data to create a PokerTournamentEvent
     *   }
     * })
     * 
     */
    create<T extends PokerTournamentEventCreateArgs>(args: SelectSubset<T, PokerTournamentEventCreateArgs<ExtArgs>>): Prisma__PokerTournamentEventClient<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PokerTournamentEvents.
     * @param {PokerTournamentEventCreateManyArgs} args - Arguments to create many PokerTournamentEvents.
     * @example
     * // Create many PokerTournamentEvents
     * const pokerTournamentEvent = await prisma.pokerTournamentEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PokerTournamentEventCreateManyArgs>(args?: SelectSubset<T, PokerTournamentEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PokerTournamentEvents and returns the data saved in the database.
     * @param {PokerTournamentEventCreateManyAndReturnArgs} args - Arguments to create many PokerTournamentEvents.
     * @example
     * // Create many PokerTournamentEvents
     * const pokerTournamentEvent = await prisma.pokerTournamentEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PokerTournamentEvents and only return the `id`
     * const pokerTournamentEventWithIdOnly = await prisma.pokerTournamentEvent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PokerTournamentEventCreateManyAndReturnArgs>(args?: SelectSubset<T, PokerTournamentEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PokerTournamentEvent.
     * @param {PokerTournamentEventDeleteArgs} args - Arguments to delete one PokerTournamentEvent.
     * @example
     * // Delete one PokerTournamentEvent
     * const PokerTournamentEvent = await prisma.pokerTournamentEvent.delete({
     *   where: {
     *     // ... filter to delete one PokerTournamentEvent
     *   }
     * })
     * 
     */
    delete<T extends PokerTournamentEventDeleteArgs>(args: SelectSubset<T, PokerTournamentEventDeleteArgs<ExtArgs>>): Prisma__PokerTournamentEventClient<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PokerTournamentEvent.
     * @param {PokerTournamentEventUpdateArgs} args - Arguments to update one PokerTournamentEvent.
     * @example
     * // Update one PokerTournamentEvent
     * const pokerTournamentEvent = await prisma.pokerTournamentEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PokerTournamentEventUpdateArgs>(args: SelectSubset<T, PokerTournamentEventUpdateArgs<ExtArgs>>): Prisma__PokerTournamentEventClient<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PokerTournamentEvents.
     * @param {PokerTournamentEventDeleteManyArgs} args - Arguments to filter PokerTournamentEvents to delete.
     * @example
     * // Delete a few PokerTournamentEvents
     * const { count } = await prisma.pokerTournamentEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PokerTournamentEventDeleteManyArgs>(args?: SelectSubset<T, PokerTournamentEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PokerTournamentEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PokerTournamentEvents
     * const pokerTournamentEvent = await prisma.pokerTournamentEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PokerTournamentEventUpdateManyArgs>(args: SelectSubset<T, PokerTournamentEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PokerTournamentEvents and returns the data updated in the database.
     * @param {PokerTournamentEventUpdateManyAndReturnArgs} args - Arguments to update many PokerTournamentEvents.
     * @example
     * // Update many PokerTournamentEvents
     * const pokerTournamentEvent = await prisma.pokerTournamentEvent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PokerTournamentEvents and only return the `id`
     * const pokerTournamentEventWithIdOnly = await prisma.pokerTournamentEvent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PokerTournamentEventUpdateManyAndReturnArgs>(args: SelectSubset<T, PokerTournamentEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PokerTournamentEvent.
     * @param {PokerTournamentEventUpsertArgs} args - Arguments to update or create a PokerTournamentEvent.
     * @example
     * // Update or create a PokerTournamentEvent
     * const pokerTournamentEvent = await prisma.pokerTournamentEvent.upsert({
     *   create: {
     *     // ... data to create a PokerTournamentEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PokerTournamentEvent we want to update
     *   }
     * })
     */
    upsert<T extends PokerTournamentEventUpsertArgs>(args: SelectSubset<T, PokerTournamentEventUpsertArgs<ExtArgs>>): Prisma__PokerTournamentEventClient<$Result.GetResult<Prisma.$PokerTournamentEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PokerTournamentEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentEventCountArgs} args - Arguments to filter PokerTournamentEvents to count.
     * @example
     * // Count the number of PokerTournamentEvents
     * const count = await prisma.pokerTournamentEvent.count({
     *   where: {
     *     // ... the filter for the PokerTournamentEvents we want to count
     *   }
     * })
    **/
    count<T extends PokerTournamentEventCountArgs>(
      args?: Subset<T, PokerTournamentEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PokerTournamentEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PokerTournamentEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PokerTournamentEventAggregateArgs>(args: Subset<T, PokerTournamentEventAggregateArgs>): Prisma.PrismaPromise<GetPokerTournamentEventAggregateType<T>>

    /**
     * Group by PokerTournamentEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PokerTournamentEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PokerTournamentEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PokerTournamentEventGroupByArgs['orderBy'] }
        : { orderBy?: PokerTournamentEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PokerTournamentEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPokerTournamentEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PokerTournamentEvent model
   */
  readonly fields: PokerTournamentEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PokerTournamentEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PokerTournamentEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tournament<T extends PokerTournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PokerTournamentDefaultArgs<ExtArgs>>): Prisma__PokerTournamentClient<$Result.GetResult<Prisma.$PokerTournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PokerTournamentEvent model
   */
  interface PokerTournamentEventFieldRefs {
    readonly id: FieldRef<"PokerTournamentEvent", 'String'>
    readonly tournamentId: FieldRef<"PokerTournamentEvent", 'String'>
    readonly userId: FieldRef<"PokerTournamentEvent", 'String'>
    readonly eventName: FieldRef<"PokerTournamentEvent", 'String'>
    readonly eventNumber: FieldRef<"PokerTournamentEvent", 'String'>
    readonly buyIn: FieldRef<"PokerTournamentEvent", 'Decimal'>
    readonly winnings: FieldRef<"PokerTournamentEvent", 'Decimal'>
    readonly eventDate: FieldRef<"PokerTournamentEvent", 'DateTime'>
    readonly gameType: FieldRef<"PokerTournamentEvent", 'GameType'>
    readonly fieldSize: FieldRef<"PokerTournamentEvent", 'Int'>
    readonly finishPosition: FieldRef<"PokerTournamentEvent", 'Int'>
    readonly notes: FieldRef<"PokerTournamentEvent", 'String'>
    readonly createdAt: FieldRef<"PokerTournamentEvent", 'DateTime'>
    readonly updatedAt: FieldRef<"PokerTournamentEvent", 'DateTime'>
    readonly reBuyAmount: FieldRef<"PokerTournamentEvent", 'Decimal'>
    readonly reBuys: FieldRef<"PokerTournamentEvent", 'Int'>
    readonly startingStack: FieldRef<"PokerTournamentEvent", 'Int'>
    readonly isClosed: FieldRef<"PokerTournamentEvent", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PokerTournamentEvent findUnique
   */
  export type PokerTournamentEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventInclude<ExtArgs> | null
    /**
     * Filter, which PokerTournamentEvent to fetch.
     */
    where: PokerTournamentEventWhereUniqueInput
  }

  /**
   * PokerTournamentEvent findUniqueOrThrow
   */
  export type PokerTournamentEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventInclude<ExtArgs> | null
    /**
     * Filter, which PokerTournamentEvent to fetch.
     */
    where: PokerTournamentEventWhereUniqueInput
  }

  /**
   * PokerTournamentEvent findFirst
   */
  export type PokerTournamentEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventInclude<ExtArgs> | null
    /**
     * Filter, which PokerTournamentEvent to fetch.
     */
    where?: PokerTournamentEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PokerTournamentEvents to fetch.
     */
    orderBy?: PokerTournamentEventOrderByWithRelationInput | PokerTournamentEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PokerTournamentEvents.
     */
    cursor?: PokerTournamentEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PokerTournamentEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PokerTournamentEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PokerTournamentEvents.
     */
    distinct?: PokerTournamentEventScalarFieldEnum | PokerTournamentEventScalarFieldEnum[]
  }

  /**
   * PokerTournamentEvent findFirstOrThrow
   */
  export type PokerTournamentEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventInclude<ExtArgs> | null
    /**
     * Filter, which PokerTournamentEvent to fetch.
     */
    where?: PokerTournamentEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PokerTournamentEvents to fetch.
     */
    orderBy?: PokerTournamentEventOrderByWithRelationInput | PokerTournamentEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PokerTournamentEvents.
     */
    cursor?: PokerTournamentEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PokerTournamentEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PokerTournamentEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PokerTournamentEvents.
     */
    distinct?: PokerTournamentEventScalarFieldEnum | PokerTournamentEventScalarFieldEnum[]
  }

  /**
   * PokerTournamentEvent findMany
   */
  export type PokerTournamentEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventInclude<ExtArgs> | null
    /**
     * Filter, which PokerTournamentEvents to fetch.
     */
    where?: PokerTournamentEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PokerTournamentEvents to fetch.
     */
    orderBy?: PokerTournamentEventOrderByWithRelationInput | PokerTournamentEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PokerTournamentEvents.
     */
    cursor?: PokerTournamentEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PokerTournamentEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PokerTournamentEvents.
     */
    skip?: number
    distinct?: PokerTournamentEventScalarFieldEnum | PokerTournamentEventScalarFieldEnum[]
  }

  /**
   * PokerTournamentEvent create
   */
  export type PokerTournamentEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventInclude<ExtArgs> | null
    /**
     * The data needed to create a PokerTournamentEvent.
     */
    data: XOR<PokerTournamentEventCreateInput, PokerTournamentEventUncheckedCreateInput>
  }

  /**
   * PokerTournamentEvent createMany
   */
  export type PokerTournamentEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PokerTournamentEvents.
     */
    data: PokerTournamentEventCreateManyInput | PokerTournamentEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PokerTournamentEvent createManyAndReturn
   */
  export type PokerTournamentEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * The data used to create many PokerTournamentEvents.
     */
    data: PokerTournamentEventCreateManyInput | PokerTournamentEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PokerTournamentEvent update
   */
  export type PokerTournamentEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventInclude<ExtArgs> | null
    /**
     * The data needed to update a PokerTournamentEvent.
     */
    data: XOR<PokerTournamentEventUpdateInput, PokerTournamentEventUncheckedUpdateInput>
    /**
     * Choose, which PokerTournamentEvent to update.
     */
    where: PokerTournamentEventWhereUniqueInput
  }

  /**
   * PokerTournamentEvent updateMany
   */
  export type PokerTournamentEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PokerTournamentEvents.
     */
    data: XOR<PokerTournamentEventUpdateManyMutationInput, PokerTournamentEventUncheckedUpdateManyInput>
    /**
     * Filter which PokerTournamentEvents to update
     */
    where?: PokerTournamentEventWhereInput
    /**
     * Limit how many PokerTournamentEvents to update.
     */
    limit?: number
  }

  /**
   * PokerTournamentEvent updateManyAndReturn
   */
  export type PokerTournamentEventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * The data used to update PokerTournamentEvents.
     */
    data: XOR<PokerTournamentEventUpdateManyMutationInput, PokerTournamentEventUncheckedUpdateManyInput>
    /**
     * Filter which PokerTournamentEvents to update
     */
    where?: PokerTournamentEventWhereInput
    /**
     * Limit how many PokerTournamentEvents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PokerTournamentEvent upsert
   */
  export type PokerTournamentEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventInclude<ExtArgs> | null
    /**
     * The filter to search for the PokerTournamentEvent to update in case it exists.
     */
    where: PokerTournamentEventWhereUniqueInput
    /**
     * In case the PokerTournamentEvent found by the `where` argument doesn't exist, create a new PokerTournamentEvent with this data.
     */
    create: XOR<PokerTournamentEventCreateInput, PokerTournamentEventUncheckedCreateInput>
    /**
     * In case the PokerTournamentEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PokerTournamentEventUpdateInput, PokerTournamentEventUncheckedUpdateInput>
  }

  /**
   * PokerTournamentEvent delete
   */
  export type PokerTournamentEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventInclude<ExtArgs> | null
    /**
     * Filter which PokerTournamentEvent to delete.
     */
    where: PokerTournamentEventWhereUniqueInput
  }

  /**
   * PokerTournamentEvent deleteMany
   */
  export type PokerTournamentEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PokerTournamentEvents to delete
     */
    where?: PokerTournamentEventWhereInput
    /**
     * Limit how many PokerTournamentEvents to delete.
     */
    limit?: number
  }

  /**
   * PokerTournamentEvent without action
   */
  export type PokerTournamentEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PokerTournamentEvent
     */
    select?: PokerTournamentEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PokerTournamentEvent
     */
    omit?: PokerTournamentEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PokerTournamentEventInclude<ExtArgs> | null
  }


  /**
   * Model RolloverEntry
   */

  export type AggregateRolloverEntry = {
    _count: RolloverEntryCountAggregateOutputType | null
    _avg: RolloverEntryAvgAggregateOutputType | null
    _sum: RolloverEntrySumAggregateOutputType | null
    _min: RolloverEntryMinAggregateOutputType | null
    _max: RolloverEntryMaxAggregateOutputType | null
  }

  export type RolloverEntryAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type RolloverEntrySumAggregateOutputType = {
    amount: Decimal | null
  }

  export type RolloverEntryMinAggregateOutputType = {
    id: string | null
    userId: string | null
    amount: Decimal | null
    date: Date | null
    type: $Enums.RolloverType | null
    periodStart: Date | null
    periodEnd: Date | null
    description: string | null
  }

  export type RolloverEntryMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    amount: Decimal | null
    date: Date | null
    type: $Enums.RolloverType | null
    periodStart: Date | null
    periodEnd: Date | null
    description: string | null
  }

  export type RolloverEntryCountAggregateOutputType = {
    id: number
    userId: number
    amount: number
    date: number
    type: number
    periodStart: number
    periodEnd: number
    description: number
    _all: number
  }


  export type RolloverEntryAvgAggregateInputType = {
    amount?: true
  }

  export type RolloverEntrySumAggregateInputType = {
    amount?: true
  }

  export type RolloverEntryMinAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    date?: true
    type?: true
    periodStart?: true
    periodEnd?: true
    description?: true
  }

  export type RolloverEntryMaxAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    date?: true
    type?: true
    periodStart?: true
    periodEnd?: true
    description?: true
  }

  export type RolloverEntryCountAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    date?: true
    type?: true
    periodStart?: true
    periodEnd?: true
    description?: true
    _all?: true
  }

  export type RolloverEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolloverEntry to aggregate.
     */
    where?: RolloverEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolloverEntries to fetch.
     */
    orderBy?: RolloverEntryOrderByWithRelationInput | RolloverEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolloverEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolloverEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolloverEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RolloverEntries
    **/
    _count?: true | RolloverEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolloverEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolloverEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolloverEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolloverEntryMaxAggregateInputType
  }

  export type GetRolloverEntryAggregateType<T extends RolloverEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateRolloverEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolloverEntry[P]>
      : GetScalarType<T[P], AggregateRolloverEntry[P]>
  }




  export type RolloverEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolloverEntryWhereInput
    orderBy?: RolloverEntryOrderByWithAggregationInput | RolloverEntryOrderByWithAggregationInput[]
    by: RolloverEntryScalarFieldEnum[] | RolloverEntryScalarFieldEnum
    having?: RolloverEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolloverEntryCountAggregateInputType | true
    _avg?: RolloverEntryAvgAggregateInputType
    _sum?: RolloverEntrySumAggregateInputType
    _min?: RolloverEntryMinAggregateInputType
    _max?: RolloverEntryMaxAggregateInputType
  }

  export type RolloverEntryGroupByOutputType = {
    id: string
    userId: string
    amount: Decimal
    date: Date
    type: $Enums.RolloverType
    periodStart: Date
    periodEnd: Date
    description: string | null
    _count: RolloverEntryCountAggregateOutputType | null
    _avg: RolloverEntryAvgAggregateOutputType | null
    _sum: RolloverEntrySumAggregateOutputType | null
    _min: RolloverEntryMinAggregateOutputType | null
    _max: RolloverEntryMaxAggregateOutputType | null
  }

  type GetRolloverEntryGroupByPayload<T extends RolloverEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolloverEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolloverEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolloverEntryGroupByOutputType[P]>
            : GetScalarType<T[P], RolloverEntryGroupByOutputType[P]>
        }
      >
    >


  export type RolloverEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    date?: boolean
    type?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    description?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolloverEntry"]>

  export type RolloverEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    date?: boolean
    type?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    description?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolloverEntry"]>

  export type RolloverEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    date?: boolean
    type?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    description?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolloverEntry"]>

  export type RolloverEntrySelectScalar = {
    id?: boolean
    userId?: boolean
    amount?: boolean
    date?: boolean
    type?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    description?: boolean
  }

  export type RolloverEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "amount" | "date" | "type" | "periodStart" | "periodEnd" | "description", ExtArgs["result"]["rolloverEntry"]>
  export type RolloverEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RolloverEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RolloverEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RolloverEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RolloverEntry"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      amount: Prisma.Decimal
      date: Date
      type: $Enums.RolloverType
      periodStart: Date
      periodEnd: Date
      description: string | null
    }, ExtArgs["result"]["rolloverEntry"]>
    composites: {}
  }

  type RolloverEntryGetPayload<S extends boolean | null | undefined | RolloverEntryDefaultArgs> = $Result.GetResult<Prisma.$RolloverEntryPayload, S>

  type RolloverEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RolloverEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RolloverEntryCountAggregateInputType | true
    }

  export interface RolloverEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RolloverEntry'], meta: { name: 'RolloverEntry' } }
    /**
     * Find zero or one RolloverEntry that matches the filter.
     * @param {RolloverEntryFindUniqueArgs} args - Arguments to find a RolloverEntry
     * @example
     * // Get one RolloverEntry
     * const rolloverEntry = await prisma.rolloverEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolloverEntryFindUniqueArgs>(args: SelectSubset<T, RolloverEntryFindUniqueArgs<ExtArgs>>): Prisma__RolloverEntryClient<$Result.GetResult<Prisma.$RolloverEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RolloverEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RolloverEntryFindUniqueOrThrowArgs} args - Arguments to find a RolloverEntry
     * @example
     * // Get one RolloverEntry
     * const rolloverEntry = await prisma.rolloverEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolloverEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, RolloverEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolloverEntryClient<$Result.GetResult<Prisma.$RolloverEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RolloverEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolloverEntryFindFirstArgs} args - Arguments to find a RolloverEntry
     * @example
     * // Get one RolloverEntry
     * const rolloverEntry = await prisma.rolloverEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolloverEntryFindFirstArgs>(args?: SelectSubset<T, RolloverEntryFindFirstArgs<ExtArgs>>): Prisma__RolloverEntryClient<$Result.GetResult<Prisma.$RolloverEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RolloverEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolloverEntryFindFirstOrThrowArgs} args - Arguments to find a RolloverEntry
     * @example
     * // Get one RolloverEntry
     * const rolloverEntry = await prisma.rolloverEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolloverEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, RolloverEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolloverEntryClient<$Result.GetResult<Prisma.$RolloverEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RolloverEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolloverEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolloverEntries
     * const rolloverEntries = await prisma.rolloverEntry.findMany()
     * 
     * // Get first 10 RolloverEntries
     * const rolloverEntries = await prisma.rolloverEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolloverEntryWithIdOnly = await prisma.rolloverEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RolloverEntryFindManyArgs>(args?: SelectSubset<T, RolloverEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolloverEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RolloverEntry.
     * @param {RolloverEntryCreateArgs} args - Arguments to create a RolloverEntry.
     * @example
     * // Create one RolloverEntry
     * const RolloverEntry = await prisma.rolloverEntry.create({
     *   data: {
     *     // ... data to create a RolloverEntry
     *   }
     * })
     * 
     */
    create<T extends RolloverEntryCreateArgs>(args: SelectSubset<T, RolloverEntryCreateArgs<ExtArgs>>): Prisma__RolloverEntryClient<$Result.GetResult<Prisma.$RolloverEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RolloverEntries.
     * @param {RolloverEntryCreateManyArgs} args - Arguments to create many RolloverEntries.
     * @example
     * // Create many RolloverEntries
     * const rolloverEntry = await prisma.rolloverEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolloverEntryCreateManyArgs>(args?: SelectSubset<T, RolloverEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RolloverEntries and returns the data saved in the database.
     * @param {RolloverEntryCreateManyAndReturnArgs} args - Arguments to create many RolloverEntries.
     * @example
     * // Create many RolloverEntries
     * const rolloverEntry = await prisma.rolloverEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RolloverEntries and only return the `id`
     * const rolloverEntryWithIdOnly = await prisma.rolloverEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RolloverEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, RolloverEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolloverEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RolloverEntry.
     * @param {RolloverEntryDeleteArgs} args - Arguments to delete one RolloverEntry.
     * @example
     * // Delete one RolloverEntry
     * const RolloverEntry = await prisma.rolloverEntry.delete({
     *   where: {
     *     // ... filter to delete one RolloverEntry
     *   }
     * })
     * 
     */
    delete<T extends RolloverEntryDeleteArgs>(args: SelectSubset<T, RolloverEntryDeleteArgs<ExtArgs>>): Prisma__RolloverEntryClient<$Result.GetResult<Prisma.$RolloverEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RolloverEntry.
     * @param {RolloverEntryUpdateArgs} args - Arguments to update one RolloverEntry.
     * @example
     * // Update one RolloverEntry
     * const rolloverEntry = await prisma.rolloverEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolloverEntryUpdateArgs>(args: SelectSubset<T, RolloverEntryUpdateArgs<ExtArgs>>): Prisma__RolloverEntryClient<$Result.GetResult<Prisma.$RolloverEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RolloverEntries.
     * @param {RolloverEntryDeleteManyArgs} args - Arguments to filter RolloverEntries to delete.
     * @example
     * // Delete a few RolloverEntries
     * const { count } = await prisma.rolloverEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolloverEntryDeleteManyArgs>(args?: SelectSubset<T, RolloverEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolloverEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolloverEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolloverEntries
     * const rolloverEntry = await prisma.rolloverEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolloverEntryUpdateManyArgs>(args: SelectSubset<T, RolloverEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolloverEntries and returns the data updated in the database.
     * @param {RolloverEntryUpdateManyAndReturnArgs} args - Arguments to update many RolloverEntries.
     * @example
     * // Update many RolloverEntries
     * const rolloverEntry = await prisma.rolloverEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RolloverEntries and only return the `id`
     * const rolloverEntryWithIdOnly = await prisma.rolloverEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RolloverEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, RolloverEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolloverEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RolloverEntry.
     * @param {RolloverEntryUpsertArgs} args - Arguments to update or create a RolloverEntry.
     * @example
     * // Update or create a RolloverEntry
     * const rolloverEntry = await prisma.rolloverEntry.upsert({
     *   create: {
     *     // ... data to create a RolloverEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolloverEntry we want to update
     *   }
     * })
     */
    upsert<T extends RolloverEntryUpsertArgs>(args: SelectSubset<T, RolloverEntryUpsertArgs<ExtArgs>>): Prisma__RolloverEntryClient<$Result.GetResult<Prisma.$RolloverEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RolloverEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolloverEntryCountArgs} args - Arguments to filter RolloverEntries to count.
     * @example
     * // Count the number of RolloverEntries
     * const count = await prisma.rolloverEntry.count({
     *   where: {
     *     // ... the filter for the RolloverEntries we want to count
     *   }
     * })
    **/
    count<T extends RolloverEntryCountArgs>(
      args?: Subset<T, RolloverEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolloverEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolloverEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolloverEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolloverEntryAggregateArgs>(args: Subset<T, RolloverEntryAggregateArgs>): Prisma.PrismaPromise<GetRolloverEntryAggregateType<T>>

    /**
     * Group by RolloverEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolloverEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolloverEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolloverEntryGroupByArgs['orderBy'] }
        : { orderBy?: RolloverEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolloverEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolloverEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RolloverEntry model
   */
  readonly fields: RolloverEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RolloverEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolloverEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RolloverEntry model
   */
  interface RolloverEntryFieldRefs {
    readonly id: FieldRef<"RolloverEntry", 'String'>
    readonly userId: FieldRef<"RolloverEntry", 'String'>
    readonly amount: FieldRef<"RolloverEntry", 'Decimal'>
    readonly date: FieldRef<"RolloverEntry", 'DateTime'>
    readonly type: FieldRef<"RolloverEntry", 'RolloverType'>
    readonly periodStart: FieldRef<"RolloverEntry", 'DateTime'>
    readonly periodEnd: FieldRef<"RolloverEntry", 'DateTime'>
    readonly description: FieldRef<"RolloverEntry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RolloverEntry findUnique
   */
  export type RolloverEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryInclude<ExtArgs> | null
    /**
     * Filter, which RolloverEntry to fetch.
     */
    where: RolloverEntryWhereUniqueInput
  }

  /**
   * RolloverEntry findUniqueOrThrow
   */
  export type RolloverEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryInclude<ExtArgs> | null
    /**
     * Filter, which RolloverEntry to fetch.
     */
    where: RolloverEntryWhereUniqueInput
  }

  /**
   * RolloverEntry findFirst
   */
  export type RolloverEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryInclude<ExtArgs> | null
    /**
     * Filter, which RolloverEntry to fetch.
     */
    where?: RolloverEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolloverEntries to fetch.
     */
    orderBy?: RolloverEntryOrderByWithRelationInput | RolloverEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolloverEntries.
     */
    cursor?: RolloverEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolloverEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolloverEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolloverEntries.
     */
    distinct?: RolloverEntryScalarFieldEnum | RolloverEntryScalarFieldEnum[]
  }

  /**
   * RolloverEntry findFirstOrThrow
   */
  export type RolloverEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryInclude<ExtArgs> | null
    /**
     * Filter, which RolloverEntry to fetch.
     */
    where?: RolloverEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolloverEntries to fetch.
     */
    orderBy?: RolloverEntryOrderByWithRelationInput | RolloverEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolloverEntries.
     */
    cursor?: RolloverEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolloverEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolloverEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolloverEntries.
     */
    distinct?: RolloverEntryScalarFieldEnum | RolloverEntryScalarFieldEnum[]
  }

  /**
   * RolloverEntry findMany
   */
  export type RolloverEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryInclude<ExtArgs> | null
    /**
     * Filter, which RolloverEntries to fetch.
     */
    where?: RolloverEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolloverEntries to fetch.
     */
    orderBy?: RolloverEntryOrderByWithRelationInput | RolloverEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RolloverEntries.
     */
    cursor?: RolloverEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolloverEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolloverEntries.
     */
    skip?: number
    distinct?: RolloverEntryScalarFieldEnum | RolloverEntryScalarFieldEnum[]
  }

  /**
   * RolloverEntry create
   */
  export type RolloverEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a RolloverEntry.
     */
    data: XOR<RolloverEntryCreateInput, RolloverEntryUncheckedCreateInput>
  }

  /**
   * RolloverEntry createMany
   */
  export type RolloverEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RolloverEntries.
     */
    data: RolloverEntryCreateManyInput | RolloverEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RolloverEntry createManyAndReturn
   */
  export type RolloverEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * The data used to create many RolloverEntries.
     */
    data: RolloverEntryCreateManyInput | RolloverEntryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RolloverEntry update
   */
  export type RolloverEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a RolloverEntry.
     */
    data: XOR<RolloverEntryUpdateInput, RolloverEntryUncheckedUpdateInput>
    /**
     * Choose, which RolloverEntry to update.
     */
    where: RolloverEntryWhereUniqueInput
  }

  /**
   * RolloverEntry updateMany
   */
  export type RolloverEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RolloverEntries.
     */
    data: XOR<RolloverEntryUpdateManyMutationInput, RolloverEntryUncheckedUpdateManyInput>
    /**
     * Filter which RolloverEntries to update
     */
    where?: RolloverEntryWhereInput
    /**
     * Limit how many RolloverEntries to update.
     */
    limit?: number
  }

  /**
   * RolloverEntry updateManyAndReturn
   */
  export type RolloverEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * The data used to update RolloverEntries.
     */
    data: XOR<RolloverEntryUpdateManyMutationInput, RolloverEntryUncheckedUpdateManyInput>
    /**
     * Filter which RolloverEntries to update
     */
    where?: RolloverEntryWhereInput
    /**
     * Limit how many RolloverEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RolloverEntry upsert
   */
  export type RolloverEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the RolloverEntry to update in case it exists.
     */
    where: RolloverEntryWhereUniqueInput
    /**
     * In case the RolloverEntry found by the `where` argument doesn't exist, create a new RolloverEntry with this data.
     */
    create: XOR<RolloverEntryCreateInput, RolloverEntryUncheckedCreateInput>
    /**
     * In case the RolloverEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolloverEntryUpdateInput, RolloverEntryUncheckedUpdateInput>
  }

  /**
   * RolloverEntry delete
   */
  export type RolloverEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryInclude<ExtArgs> | null
    /**
     * Filter which RolloverEntry to delete.
     */
    where: RolloverEntryWhereUniqueInput
  }

  /**
   * RolloverEntry deleteMany
   */
  export type RolloverEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolloverEntries to delete
     */
    where?: RolloverEntryWhereInput
    /**
     * Limit how many RolloverEntries to delete.
     */
    limit?: number
  }

  /**
   * RolloverEntry without action
   */
  export type RolloverEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolloverEntry
     */
    select?: RolloverEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolloverEntry
     */
    omit?: RolloverEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolloverEntryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    firstName: 'firstName',
    lastName: 'lastName',
    passwordHash: 'passwordHash',
    currency: 'currency',
    timezone: 'timezone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive',
    hasSeenWelcome: 'hasSeenWelcome',
    income: 'income',
    setupComplete: 'setupComplete',
    hasSeenAddTransactionTour: 'hasSeenAddTransactionTour',
    hasSeenBalanceCardTour: 'hasSeenBalanceCardTour',
    hasSeenTransactionSwipeTour: 'hasSeenTransactionSwipeTour',
    fixedExpenses: 'fixedExpenses',
    incomeFrequency: 'incomeFrequency',
    nextPayDate: 'nextPayDate',
    rolloverAmount: 'rolloverAmount',
    lastRolloverDate: 'lastRolloverDate'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BudgetScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    description: 'description',
    totalAmount: 'totalAmount',
    currency: 'currency',
    startDate: 'startDate',
    endDate: 'endDate',
    isRecurring: 'isRecurring',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BudgetScalarFieldEnum = (typeof BudgetScalarFieldEnum)[keyof typeof BudgetScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    description: 'description',
    icon: 'icon',
    color: 'color',
    type: 'type',
    isSystem: 'isSystem',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    parentId: 'parentId'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    budgetId: 'budgetId',
    categoryId: 'categoryId',
    description: 'description',
    amount: 'amount',
    currency: 'currency',
    date: 'date',
    type: 'type',
    isAICategorized: 'isAICategorized',
    aiConfidence: 'aiConfidence',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    location: 'location',
    merchantName: 'merchantName',
    notes: 'notes',
    recurrence: 'recurrence',
    subcategoryId: 'subcategoryId',
    dueDate: 'dueDate',
    status: 'status'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const GoalScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    description: 'description',
    targetAmount: 'targetAmount',
    currentAmount: 'currentAmount',
    currency: 'currency',
    targetDate: 'targetDate',
    category: 'category',
    type: 'type',
    isActive: 'isActive',
    isCompleted: 'isCompleted',
    completedAt: 'completedAt',
    priority: 'priority',
    autoContribute: 'autoContribute',
    monthlyTarget: 'monthlyTarget',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    originalCategory: 'originalCategory'
  };

  export type GoalScalarFieldEnum = (typeof GoalScalarFieldEnum)[keyof typeof GoalScalarFieldEnum]


  export const GoalContributionScalarFieldEnum: {
    id: 'id',
    goalId: 'goalId',
    userId: 'userId',
    amount: 'amount',
    currency: 'currency',
    date: 'date',
    description: 'description',
    type: 'type',
    transactionId: 'transactionId'
  };

  export type GoalContributionScalarFieldEnum = (typeof GoalContributionScalarFieldEnum)[keyof typeof GoalContributionScalarFieldEnum]


  export const GoalReminderScalarFieldEnum: {
    id: 'id',
    goalId: 'goalId',
    userId: 'userId',
    type: 'type',
    frequency: 'frequency',
    isActive: 'isActive',
    lastSent: 'lastSent',
    nextDue: 'nextDue',
    message: 'message',
    createdAt: 'createdAt'
  };

  export type GoalReminderScalarFieldEnum = (typeof GoalReminderScalarFieldEnum)[keyof typeof GoalReminderScalarFieldEnum]


  export const PokerTournamentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    location: 'location',
    venue: 'venue',
    dateStart: 'dateStart',
    dateEnd: 'dateEnd',
    accommodationCost: 'accommodationCost',
    foodBudget: 'foodBudget',
    otherExpenses: 'otherExpenses',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PokerTournamentScalarFieldEnum = (typeof PokerTournamentScalarFieldEnum)[keyof typeof PokerTournamentScalarFieldEnum]


  export const PokerTournamentEventScalarFieldEnum: {
    id: 'id',
    tournamentId: 'tournamentId',
    userId: 'userId',
    eventName: 'eventName',
    eventNumber: 'eventNumber',
    buyIn: 'buyIn',
    winnings: 'winnings',
    eventDate: 'eventDate',
    gameType: 'gameType',
    fieldSize: 'fieldSize',
    finishPosition: 'finishPosition',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reBuyAmount: 'reBuyAmount',
    reBuys: 'reBuys',
    startingStack: 'startingStack',
    isClosed: 'isClosed'
  };

  export type PokerTournamentEventScalarFieldEnum = (typeof PokerTournamentEventScalarFieldEnum)[keyof typeof PokerTournamentEventScalarFieldEnum]


  export const RolloverEntryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    amount: 'amount',
    date: 'date',
    type: 'type',
    periodStart: 'periodStart',
    periodEnd: 'periodEnd',
    description: 'description'
  };

  export type RolloverEntryScalarFieldEnum = (typeof RolloverEntryScalarFieldEnum)[keyof typeof RolloverEntryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'IncomeFrequency'
   */
  export type EnumIncomeFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IncomeFrequency'>
    


  /**
   * Reference to a field of type 'IncomeFrequency[]'
   */
  export type ListEnumIncomeFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IncomeFrequency[]'>
    


  /**
   * Reference to a field of type 'BudgetStatus'
   */
  export type EnumBudgetStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BudgetStatus'>
    


  /**
   * Reference to a field of type 'BudgetStatus[]'
   */
  export type ListEnumBudgetStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BudgetStatus[]'>
    


  /**
   * Reference to a field of type 'CategoryType'
   */
  export type EnumCategoryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CategoryType'>
    


  /**
   * Reference to a field of type 'CategoryType[]'
   */
  export type ListEnumCategoryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CategoryType[]'>
    


  /**
   * Reference to a field of type 'TransactionType'
   */
  export type EnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType'>
    


  /**
   * Reference to a field of type 'TransactionType[]'
   */
  export type ListEnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'GoalCategory'
   */
  export type EnumGoalCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GoalCategory'>
    


  /**
   * Reference to a field of type 'GoalCategory[]'
   */
  export type ListEnumGoalCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GoalCategory[]'>
    


  /**
   * Reference to a field of type 'GoalType'
   */
  export type EnumGoalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GoalType'>
    


  /**
   * Reference to a field of type 'GoalType[]'
   */
  export type ListEnumGoalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GoalType[]'>
    


  /**
   * Reference to a field of type 'GoalPriority'
   */
  export type EnumGoalPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GoalPriority'>
    


  /**
   * Reference to a field of type 'GoalPriority[]'
   */
  export type ListEnumGoalPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GoalPriority[]'>
    


  /**
   * Reference to a field of type 'ContributionType'
   */
  export type EnumContributionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContributionType'>
    


  /**
   * Reference to a field of type 'ContributionType[]'
   */
  export type ListEnumContributionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContributionType[]'>
    


  /**
   * Reference to a field of type 'ReminderType'
   */
  export type EnumReminderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReminderType'>
    


  /**
   * Reference to a field of type 'ReminderType[]'
   */
  export type ListEnumReminderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReminderType[]'>
    


  /**
   * Reference to a field of type 'ReminderFrequency'
   */
  export type EnumReminderFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReminderFrequency'>
    


  /**
   * Reference to a field of type 'ReminderFrequency[]'
   */
  export type ListEnumReminderFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReminderFrequency[]'>
    


  /**
   * Reference to a field of type 'GameType'
   */
  export type EnumGameTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameType'>
    


  /**
   * Reference to a field of type 'GameType[]'
   */
  export type ListEnumGameTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'RolloverType'
   */
  export type EnumRolloverTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RolloverType'>
    


  /**
   * Reference to a field of type 'RolloverType[]'
   */
  export type ListEnumRolloverTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RolloverType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    passwordHash?: StringNullableFilter<"User"> | string | null
    currency?: StringFilter<"User"> | string
    timezone?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isActive?: BoolFilter<"User"> | boolean
    hasSeenWelcome?: BoolFilter<"User"> | boolean
    income?: DecimalNullableFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFilter<"User"> | boolean
    hasSeenAddTransactionTour?: BoolFilter<"User"> | boolean
    hasSeenBalanceCardTour?: BoolFilter<"User"> | boolean
    hasSeenTransactionSwipeTour?: BoolFilter<"User"> | boolean
    fixedExpenses?: DecimalNullableFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: EnumIncomeFrequencyNullableFilter<"User"> | $Enums.IncomeFrequency | null
    nextPayDate?: DateTimeNullableFilter<"User"> | Date | string | null
    rolloverAmount?: DecimalNullableFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: DateTimeNullableFilter<"User"> | Date | string | null
    budgets?: BudgetListRelationFilter
    categories?: CategoryListRelationFilter
    goalContributions?: GoalContributionListRelationFilter
    goalReminders?: GoalReminderListRelationFilter
    goals?: GoalListRelationFilter
    pokerTournamentEvents?: PokerTournamentEventListRelationFilter
    pokerTournaments?: PokerTournamentListRelationFilter
    rolloverHistory?: RolloverEntryListRelationFilter
    transactions?: TransactionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    currency?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    hasSeenWelcome?: SortOrder
    income?: SortOrderInput | SortOrder
    setupComplete?: SortOrder
    hasSeenAddTransactionTour?: SortOrder
    hasSeenBalanceCardTour?: SortOrder
    hasSeenTransactionSwipeTour?: SortOrder
    fixedExpenses?: SortOrderInput | SortOrder
    incomeFrequency?: SortOrderInput | SortOrder
    nextPayDate?: SortOrderInput | SortOrder
    rolloverAmount?: SortOrderInput | SortOrder
    lastRolloverDate?: SortOrderInput | SortOrder
    budgets?: BudgetOrderByRelationAggregateInput
    categories?: CategoryOrderByRelationAggregateInput
    goalContributions?: GoalContributionOrderByRelationAggregateInput
    goalReminders?: GoalReminderOrderByRelationAggregateInput
    goals?: GoalOrderByRelationAggregateInput
    pokerTournamentEvents?: PokerTournamentEventOrderByRelationAggregateInput
    pokerTournaments?: PokerTournamentOrderByRelationAggregateInput
    rolloverHistory?: RolloverEntryOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    passwordHash?: StringNullableFilter<"User"> | string | null
    currency?: StringFilter<"User"> | string
    timezone?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isActive?: BoolFilter<"User"> | boolean
    hasSeenWelcome?: BoolFilter<"User"> | boolean
    income?: DecimalNullableFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFilter<"User"> | boolean
    hasSeenAddTransactionTour?: BoolFilter<"User"> | boolean
    hasSeenBalanceCardTour?: BoolFilter<"User"> | boolean
    hasSeenTransactionSwipeTour?: BoolFilter<"User"> | boolean
    fixedExpenses?: DecimalNullableFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: EnumIncomeFrequencyNullableFilter<"User"> | $Enums.IncomeFrequency | null
    nextPayDate?: DateTimeNullableFilter<"User"> | Date | string | null
    rolloverAmount?: DecimalNullableFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: DateTimeNullableFilter<"User"> | Date | string | null
    budgets?: BudgetListRelationFilter
    categories?: CategoryListRelationFilter
    goalContributions?: GoalContributionListRelationFilter
    goalReminders?: GoalReminderListRelationFilter
    goals?: GoalListRelationFilter
    pokerTournamentEvents?: PokerTournamentEventListRelationFilter
    pokerTournaments?: PokerTournamentListRelationFilter
    rolloverHistory?: RolloverEntryListRelationFilter
    transactions?: TransactionListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    currency?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    hasSeenWelcome?: SortOrder
    income?: SortOrderInput | SortOrder
    setupComplete?: SortOrder
    hasSeenAddTransactionTour?: SortOrder
    hasSeenBalanceCardTour?: SortOrder
    hasSeenTransactionSwipeTour?: SortOrder
    fixedExpenses?: SortOrderInput | SortOrder
    incomeFrequency?: SortOrderInput | SortOrder
    nextPayDate?: SortOrderInput | SortOrder
    rolloverAmount?: SortOrderInput | SortOrder
    lastRolloverDate?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    currency?: StringWithAggregatesFilter<"User"> | string
    timezone?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    hasSeenWelcome?: BoolWithAggregatesFilter<"User"> | boolean
    income?: DecimalNullableWithAggregatesFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolWithAggregatesFilter<"User"> | boolean
    hasSeenAddTransactionTour?: BoolWithAggregatesFilter<"User"> | boolean
    hasSeenBalanceCardTour?: BoolWithAggregatesFilter<"User"> | boolean
    hasSeenTransactionSwipeTour?: BoolWithAggregatesFilter<"User"> | boolean
    fixedExpenses?: DecimalNullableWithAggregatesFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: EnumIncomeFrequencyNullableWithAggregatesFilter<"User"> | $Enums.IncomeFrequency | null
    nextPayDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    rolloverAmount?: DecimalNullableWithAggregatesFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type BudgetWhereInput = {
    AND?: BudgetWhereInput | BudgetWhereInput[]
    OR?: BudgetWhereInput[]
    NOT?: BudgetWhereInput | BudgetWhereInput[]
    id?: StringFilter<"Budget"> | string
    userId?: StringFilter<"Budget"> | string
    name?: StringFilter<"Budget"> | string
    description?: StringNullableFilter<"Budget"> | string | null
    totalAmount?: DecimalFilter<"Budget"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Budget"> | string
    startDate?: DateTimeFilter<"Budget"> | Date | string
    endDate?: DateTimeNullableFilter<"Budget"> | Date | string | null
    isRecurring?: BoolFilter<"Budget"> | boolean
    status?: EnumBudgetStatusFilter<"Budget"> | $Enums.BudgetStatus
    createdAt?: DateTimeFilter<"Budget"> | Date | string
    updatedAt?: DateTimeFilter<"Budget"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactions?: TransactionListRelationFilter
  }

  export type BudgetOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    totalAmount?: SortOrder
    currency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isRecurring?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
  }

  export type BudgetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BudgetWhereInput | BudgetWhereInput[]
    OR?: BudgetWhereInput[]
    NOT?: BudgetWhereInput | BudgetWhereInput[]
    userId?: StringFilter<"Budget"> | string
    name?: StringFilter<"Budget"> | string
    description?: StringNullableFilter<"Budget"> | string | null
    totalAmount?: DecimalFilter<"Budget"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Budget"> | string
    startDate?: DateTimeFilter<"Budget"> | Date | string
    endDate?: DateTimeNullableFilter<"Budget"> | Date | string | null
    isRecurring?: BoolFilter<"Budget"> | boolean
    status?: EnumBudgetStatusFilter<"Budget"> | $Enums.BudgetStatus
    createdAt?: DateTimeFilter<"Budget"> | Date | string
    updatedAt?: DateTimeFilter<"Budget"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactions?: TransactionListRelationFilter
  }, "id">

  export type BudgetOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    totalAmount?: SortOrder
    currency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isRecurring?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BudgetCountOrderByAggregateInput
    _avg?: BudgetAvgOrderByAggregateInput
    _max?: BudgetMaxOrderByAggregateInput
    _min?: BudgetMinOrderByAggregateInput
    _sum?: BudgetSumOrderByAggregateInput
  }

  export type BudgetScalarWhereWithAggregatesInput = {
    AND?: BudgetScalarWhereWithAggregatesInput | BudgetScalarWhereWithAggregatesInput[]
    OR?: BudgetScalarWhereWithAggregatesInput[]
    NOT?: BudgetScalarWhereWithAggregatesInput | BudgetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Budget"> | string
    userId?: StringWithAggregatesFilter<"Budget"> | string
    name?: StringWithAggregatesFilter<"Budget"> | string
    description?: StringNullableWithAggregatesFilter<"Budget"> | string | null
    totalAmount?: DecimalWithAggregatesFilter<"Budget"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"Budget"> | string
    startDate?: DateTimeWithAggregatesFilter<"Budget"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Budget"> | Date | string | null
    isRecurring?: BoolWithAggregatesFilter<"Budget"> | boolean
    status?: EnumBudgetStatusWithAggregatesFilter<"Budget"> | $Enums.BudgetStatus
    createdAt?: DateTimeWithAggregatesFilter<"Budget"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Budget"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    userId?: StringNullableFilter<"Category"> | string | null
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    icon?: StringNullableFilter<"Category"> | string | null
    color?: StringNullableFilter<"Category"> | string | null
    type?: EnumCategoryTypeFilter<"Category"> | $Enums.CategoryType
    isSystem?: BoolFilter<"Category"> | boolean
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parentId?: StringNullableFilter<"Category"> | string | null
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    subcategories?: CategoryListRelationFilter
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    transactions?: TransactionListRelationFilter
    subcategoryTransactions?: TransactionListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    type?: SortOrder
    isSystem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrderInput | SortOrder
    parent?: CategoryOrderByWithRelationInput
    subcategories?: CategoryOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
    subcategoryTransactions?: TransactionOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_isSystem?: CategoryNameIsSystemCompoundUniqueInput
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    userId?: StringNullableFilter<"Category"> | string | null
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    icon?: StringNullableFilter<"Category"> | string | null
    color?: StringNullableFilter<"Category"> | string | null
    type?: EnumCategoryTypeFilter<"Category"> | $Enums.CategoryType
    isSystem?: BoolFilter<"Category"> | boolean
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parentId?: StringNullableFilter<"Category"> | string | null
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    subcategories?: CategoryListRelationFilter
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    transactions?: TransactionListRelationFilter
    subcategoryTransactions?: TransactionListRelationFilter
  }, "id" | "name_isSystem">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    type?: SortOrder
    isSystem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    userId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    name?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    icon?: StringNullableWithAggregatesFilter<"Category"> | string | null
    color?: StringNullableWithAggregatesFilter<"Category"> | string | null
    type?: EnumCategoryTypeWithAggregatesFilter<"Category"> | $Enums.CategoryType
    isSystem?: BoolWithAggregatesFilter<"Category"> | boolean
    isActive?: BoolWithAggregatesFilter<"Category"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    parentId?: StringNullableWithAggregatesFilter<"Category"> | string | null
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    userId?: StringFilter<"Transaction"> | string
    budgetId?: StringNullableFilter<"Transaction"> | string | null
    categoryId?: StringNullableFilter<"Transaction"> | string | null
    description?: StringFilter<"Transaction"> | string
    amount?: DecimalFilter<"Transaction"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Transaction"> | string
    date?: DateTimeFilter<"Transaction"> | Date | string
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    isAICategorized?: BoolFilter<"Transaction"> | boolean
    aiConfidence?: FloatNullableFilter<"Transaction"> | number | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    location?: StringNullableFilter<"Transaction"> | string | null
    merchantName?: StringNullableFilter<"Transaction"> | string | null
    notes?: StringNullableFilter<"Transaction"> | string | null
    recurrence?: StringNullableFilter<"Transaction"> | string | null
    subcategoryId?: StringNullableFilter<"Transaction"> | string | null
    dueDate?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    status?: EnumPaymentStatusNullableFilter<"Transaction"> | $Enums.PaymentStatus | null
    goalContributions?: GoalContributionListRelationFilter
    budget?: XOR<BudgetNullableScalarRelationFilter, BudgetWhereInput> | null
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    subcategory?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    budgetId?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    description?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    type?: SortOrder
    isAICategorized?: SortOrder
    aiConfidence?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    location?: SortOrderInput | SortOrder
    merchantName?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    recurrence?: SortOrderInput | SortOrder
    subcategoryId?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    goalContributions?: GoalContributionOrderByRelationAggregateInput
    budget?: BudgetOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    subcategory?: CategoryOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    userId?: StringFilter<"Transaction"> | string
    budgetId?: StringNullableFilter<"Transaction"> | string | null
    categoryId?: StringNullableFilter<"Transaction"> | string | null
    description?: StringFilter<"Transaction"> | string
    amount?: DecimalFilter<"Transaction"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Transaction"> | string
    date?: DateTimeFilter<"Transaction"> | Date | string
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    isAICategorized?: BoolFilter<"Transaction"> | boolean
    aiConfidence?: FloatNullableFilter<"Transaction"> | number | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    location?: StringNullableFilter<"Transaction"> | string | null
    merchantName?: StringNullableFilter<"Transaction"> | string | null
    notes?: StringNullableFilter<"Transaction"> | string | null
    recurrence?: StringNullableFilter<"Transaction"> | string | null
    subcategoryId?: StringNullableFilter<"Transaction"> | string | null
    dueDate?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    status?: EnumPaymentStatusNullableFilter<"Transaction"> | $Enums.PaymentStatus | null
    goalContributions?: GoalContributionListRelationFilter
    budget?: XOR<BudgetNullableScalarRelationFilter, BudgetWhereInput> | null
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    subcategory?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    budgetId?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    description?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    type?: SortOrder
    isAICategorized?: SortOrder
    aiConfidence?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    location?: SortOrderInput | SortOrder
    merchantName?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    recurrence?: SortOrderInput | SortOrder
    subcategoryId?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    userId?: StringWithAggregatesFilter<"Transaction"> | string
    budgetId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    categoryId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    description?: StringWithAggregatesFilter<"Transaction"> | string
    amount?: DecimalWithAggregatesFilter<"Transaction"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"Transaction"> | string
    date?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    type?: EnumTransactionTypeWithAggregatesFilter<"Transaction"> | $Enums.TransactionType
    isAICategorized?: BoolWithAggregatesFilter<"Transaction"> | boolean
    aiConfidence?: FloatNullableWithAggregatesFilter<"Transaction"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    location?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    merchantName?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    recurrence?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    subcategoryId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"Transaction"> | Date | string | null
    status?: EnumPaymentStatusNullableWithAggregatesFilter<"Transaction"> | $Enums.PaymentStatus | null
  }

  export type GoalWhereInput = {
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    id?: StringFilter<"Goal"> | string
    userId?: StringFilter<"Goal"> | string
    name?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    targetAmount?: DecimalFilter<"Goal"> | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFilter<"Goal"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Goal"> | string
    targetDate?: DateTimeNullableFilter<"Goal"> | Date | string | null
    category?: EnumGoalCategoryFilter<"Goal"> | $Enums.GoalCategory
    type?: EnumGoalTypeFilter<"Goal"> | $Enums.GoalType
    isActive?: BoolFilter<"Goal"> | boolean
    isCompleted?: BoolFilter<"Goal"> | boolean
    completedAt?: DateTimeNullableFilter<"Goal"> | Date | string | null
    priority?: EnumGoalPriorityFilter<"Goal"> | $Enums.GoalPriority
    autoContribute?: BoolFilter<"Goal"> | boolean
    monthlyTarget?: DecimalNullableFilter<"Goal"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    originalCategory?: StringNullableFilter<"Goal"> | string | null
    contributions?: GoalContributionListRelationFilter
    reminders?: GoalReminderListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type GoalOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    targetAmount?: SortOrder
    currentAmount?: SortOrder
    currency?: SortOrder
    targetDate?: SortOrderInput | SortOrder
    category?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    isCompleted?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    priority?: SortOrder
    autoContribute?: SortOrder
    monthlyTarget?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalCategory?: SortOrderInput | SortOrder
    contributions?: GoalContributionOrderByRelationAggregateInput
    reminders?: GoalReminderOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type GoalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    userId?: StringFilter<"Goal"> | string
    name?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    targetAmount?: DecimalFilter<"Goal"> | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFilter<"Goal"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Goal"> | string
    targetDate?: DateTimeNullableFilter<"Goal"> | Date | string | null
    category?: EnumGoalCategoryFilter<"Goal"> | $Enums.GoalCategory
    type?: EnumGoalTypeFilter<"Goal"> | $Enums.GoalType
    isActive?: BoolFilter<"Goal"> | boolean
    isCompleted?: BoolFilter<"Goal"> | boolean
    completedAt?: DateTimeNullableFilter<"Goal"> | Date | string | null
    priority?: EnumGoalPriorityFilter<"Goal"> | $Enums.GoalPriority
    autoContribute?: BoolFilter<"Goal"> | boolean
    monthlyTarget?: DecimalNullableFilter<"Goal"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    originalCategory?: StringNullableFilter<"Goal"> | string | null
    contributions?: GoalContributionListRelationFilter
    reminders?: GoalReminderListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type GoalOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    targetAmount?: SortOrder
    currentAmount?: SortOrder
    currency?: SortOrder
    targetDate?: SortOrderInput | SortOrder
    category?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    isCompleted?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    priority?: SortOrder
    autoContribute?: SortOrder
    monthlyTarget?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalCategory?: SortOrderInput | SortOrder
    _count?: GoalCountOrderByAggregateInput
    _avg?: GoalAvgOrderByAggregateInput
    _max?: GoalMaxOrderByAggregateInput
    _min?: GoalMinOrderByAggregateInput
    _sum?: GoalSumOrderByAggregateInput
  }

  export type GoalScalarWhereWithAggregatesInput = {
    AND?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    OR?: GoalScalarWhereWithAggregatesInput[]
    NOT?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Goal"> | string
    userId?: StringWithAggregatesFilter<"Goal"> | string
    name?: StringWithAggregatesFilter<"Goal"> | string
    description?: StringNullableWithAggregatesFilter<"Goal"> | string | null
    targetAmount?: DecimalWithAggregatesFilter<"Goal"> | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalWithAggregatesFilter<"Goal"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"Goal"> | string
    targetDate?: DateTimeNullableWithAggregatesFilter<"Goal"> | Date | string | null
    category?: EnumGoalCategoryWithAggregatesFilter<"Goal"> | $Enums.GoalCategory
    type?: EnumGoalTypeWithAggregatesFilter<"Goal"> | $Enums.GoalType
    isActive?: BoolWithAggregatesFilter<"Goal"> | boolean
    isCompleted?: BoolWithAggregatesFilter<"Goal"> | boolean
    completedAt?: DateTimeNullableWithAggregatesFilter<"Goal"> | Date | string | null
    priority?: EnumGoalPriorityWithAggregatesFilter<"Goal"> | $Enums.GoalPriority
    autoContribute?: BoolWithAggregatesFilter<"Goal"> | boolean
    monthlyTarget?: DecimalNullableWithAggregatesFilter<"Goal"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    originalCategory?: StringNullableWithAggregatesFilter<"Goal"> | string | null
  }

  export type GoalContributionWhereInput = {
    AND?: GoalContributionWhereInput | GoalContributionWhereInput[]
    OR?: GoalContributionWhereInput[]
    NOT?: GoalContributionWhereInput | GoalContributionWhereInput[]
    id?: StringFilter<"GoalContribution"> | string
    goalId?: StringFilter<"GoalContribution"> | string
    userId?: StringFilter<"GoalContribution"> | string
    amount?: DecimalFilter<"GoalContribution"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"GoalContribution"> | string
    date?: DateTimeFilter<"GoalContribution"> | Date | string
    description?: StringNullableFilter<"GoalContribution"> | string | null
    type?: EnumContributionTypeFilter<"GoalContribution"> | $Enums.ContributionType
    transactionId?: StringNullableFilter<"GoalContribution"> | string | null
    goal?: XOR<GoalScalarRelationFilter, GoalWhereInput>
    transaction?: XOR<TransactionNullableScalarRelationFilter, TransactionWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type GoalContributionOrderByWithRelationInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    goal?: GoalOrderByWithRelationInput
    transaction?: TransactionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type GoalContributionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GoalContributionWhereInput | GoalContributionWhereInput[]
    OR?: GoalContributionWhereInput[]
    NOT?: GoalContributionWhereInput | GoalContributionWhereInput[]
    goalId?: StringFilter<"GoalContribution"> | string
    userId?: StringFilter<"GoalContribution"> | string
    amount?: DecimalFilter<"GoalContribution"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"GoalContribution"> | string
    date?: DateTimeFilter<"GoalContribution"> | Date | string
    description?: StringNullableFilter<"GoalContribution"> | string | null
    type?: EnumContributionTypeFilter<"GoalContribution"> | $Enums.ContributionType
    transactionId?: StringNullableFilter<"GoalContribution"> | string | null
    goal?: XOR<GoalScalarRelationFilter, GoalWhereInput>
    transaction?: XOR<TransactionNullableScalarRelationFilter, TransactionWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type GoalContributionOrderByWithAggregationInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    _count?: GoalContributionCountOrderByAggregateInput
    _avg?: GoalContributionAvgOrderByAggregateInput
    _max?: GoalContributionMaxOrderByAggregateInput
    _min?: GoalContributionMinOrderByAggregateInput
    _sum?: GoalContributionSumOrderByAggregateInput
  }

  export type GoalContributionScalarWhereWithAggregatesInput = {
    AND?: GoalContributionScalarWhereWithAggregatesInput | GoalContributionScalarWhereWithAggregatesInput[]
    OR?: GoalContributionScalarWhereWithAggregatesInput[]
    NOT?: GoalContributionScalarWhereWithAggregatesInput | GoalContributionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GoalContribution"> | string
    goalId?: StringWithAggregatesFilter<"GoalContribution"> | string
    userId?: StringWithAggregatesFilter<"GoalContribution"> | string
    amount?: DecimalWithAggregatesFilter<"GoalContribution"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"GoalContribution"> | string
    date?: DateTimeWithAggregatesFilter<"GoalContribution"> | Date | string
    description?: StringNullableWithAggregatesFilter<"GoalContribution"> | string | null
    type?: EnumContributionTypeWithAggregatesFilter<"GoalContribution"> | $Enums.ContributionType
    transactionId?: StringNullableWithAggregatesFilter<"GoalContribution"> | string | null
  }

  export type GoalReminderWhereInput = {
    AND?: GoalReminderWhereInput | GoalReminderWhereInput[]
    OR?: GoalReminderWhereInput[]
    NOT?: GoalReminderWhereInput | GoalReminderWhereInput[]
    id?: StringFilter<"GoalReminder"> | string
    goalId?: StringFilter<"GoalReminder"> | string
    userId?: StringFilter<"GoalReminder"> | string
    type?: EnumReminderTypeFilter<"GoalReminder"> | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFilter<"GoalReminder"> | $Enums.ReminderFrequency
    isActive?: BoolFilter<"GoalReminder"> | boolean
    lastSent?: DateTimeNullableFilter<"GoalReminder"> | Date | string | null
    nextDue?: DateTimeNullableFilter<"GoalReminder"> | Date | string | null
    message?: StringNullableFilter<"GoalReminder"> | string | null
    createdAt?: DateTimeFilter<"GoalReminder"> | Date | string
    goal?: XOR<GoalScalarRelationFilter, GoalWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type GoalReminderOrderByWithRelationInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    frequency?: SortOrder
    isActive?: SortOrder
    lastSent?: SortOrderInput | SortOrder
    nextDue?: SortOrderInput | SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    goal?: GoalOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type GoalReminderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GoalReminderWhereInput | GoalReminderWhereInput[]
    OR?: GoalReminderWhereInput[]
    NOT?: GoalReminderWhereInput | GoalReminderWhereInput[]
    goalId?: StringFilter<"GoalReminder"> | string
    userId?: StringFilter<"GoalReminder"> | string
    type?: EnumReminderTypeFilter<"GoalReminder"> | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFilter<"GoalReminder"> | $Enums.ReminderFrequency
    isActive?: BoolFilter<"GoalReminder"> | boolean
    lastSent?: DateTimeNullableFilter<"GoalReminder"> | Date | string | null
    nextDue?: DateTimeNullableFilter<"GoalReminder"> | Date | string | null
    message?: StringNullableFilter<"GoalReminder"> | string | null
    createdAt?: DateTimeFilter<"GoalReminder"> | Date | string
    goal?: XOR<GoalScalarRelationFilter, GoalWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type GoalReminderOrderByWithAggregationInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    frequency?: SortOrder
    isActive?: SortOrder
    lastSent?: SortOrderInput | SortOrder
    nextDue?: SortOrderInput | SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: GoalReminderCountOrderByAggregateInput
    _max?: GoalReminderMaxOrderByAggregateInput
    _min?: GoalReminderMinOrderByAggregateInput
  }

  export type GoalReminderScalarWhereWithAggregatesInput = {
    AND?: GoalReminderScalarWhereWithAggregatesInput | GoalReminderScalarWhereWithAggregatesInput[]
    OR?: GoalReminderScalarWhereWithAggregatesInput[]
    NOT?: GoalReminderScalarWhereWithAggregatesInput | GoalReminderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GoalReminder"> | string
    goalId?: StringWithAggregatesFilter<"GoalReminder"> | string
    userId?: StringWithAggregatesFilter<"GoalReminder"> | string
    type?: EnumReminderTypeWithAggregatesFilter<"GoalReminder"> | $Enums.ReminderType
    frequency?: EnumReminderFrequencyWithAggregatesFilter<"GoalReminder"> | $Enums.ReminderFrequency
    isActive?: BoolWithAggregatesFilter<"GoalReminder"> | boolean
    lastSent?: DateTimeNullableWithAggregatesFilter<"GoalReminder"> | Date | string | null
    nextDue?: DateTimeNullableWithAggregatesFilter<"GoalReminder"> | Date | string | null
    message?: StringNullableWithAggregatesFilter<"GoalReminder"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"GoalReminder"> | Date | string
  }

  export type PokerTournamentWhereInput = {
    AND?: PokerTournamentWhereInput | PokerTournamentWhereInput[]
    OR?: PokerTournamentWhereInput[]
    NOT?: PokerTournamentWhereInput | PokerTournamentWhereInput[]
    id?: StringFilter<"PokerTournament"> | string
    userId?: StringFilter<"PokerTournament"> | string
    name?: StringFilter<"PokerTournament"> | string
    location?: StringFilter<"PokerTournament"> | string
    venue?: StringNullableFilter<"PokerTournament"> | string | null
    dateStart?: DateTimeFilter<"PokerTournament"> | Date | string
    dateEnd?: DateTimeNullableFilter<"PokerTournament"> | Date | string | null
    accommodationCost?: DecimalFilter<"PokerTournament"> | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalFilter<"PokerTournament"> | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalFilter<"PokerTournament"> | Decimal | DecimalJsLike | number | string
    notes?: StringNullableFilter<"PokerTournament"> | string | null
    createdAt?: DateTimeFilter<"PokerTournament"> | Date | string
    updatedAt?: DateTimeFilter<"PokerTournament"> | Date | string
    events?: PokerTournamentEventListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PokerTournamentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    venue?: SortOrderInput | SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrderInput | SortOrder
    accommodationCost?: SortOrder
    foodBudget?: SortOrder
    otherExpenses?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    events?: PokerTournamentEventOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type PokerTournamentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PokerTournamentWhereInput | PokerTournamentWhereInput[]
    OR?: PokerTournamentWhereInput[]
    NOT?: PokerTournamentWhereInput | PokerTournamentWhereInput[]
    userId?: StringFilter<"PokerTournament"> | string
    name?: StringFilter<"PokerTournament"> | string
    location?: StringFilter<"PokerTournament"> | string
    venue?: StringNullableFilter<"PokerTournament"> | string | null
    dateStart?: DateTimeFilter<"PokerTournament"> | Date | string
    dateEnd?: DateTimeNullableFilter<"PokerTournament"> | Date | string | null
    accommodationCost?: DecimalFilter<"PokerTournament"> | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalFilter<"PokerTournament"> | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalFilter<"PokerTournament"> | Decimal | DecimalJsLike | number | string
    notes?: StringNullableFilter<"PokerTournament"> | string | null
    createdAt?: DateTimeFilter<"PokerTournament"> | Date | string
    updatedAt?: DateTimeFilter<"PokerTournament"> | Date | string
    events?: PokerTournamentEventListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PokerTournamentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    venue?: SortOrderInput | SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrderInput | SortOrder
    accommodationCost?: SortOrder
    foodBudget?: SortOrder
    otherExpenses?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PokerTournamentCountOrderByAggregateInput
    _avg?: PokerTournamentAvgOrderByAggregateInput
    _max?: PokerTournamentMaxOrderByAggregateInput
    _min?: PokerTournamentMinOrderByAggregateInput
    _sum?: PokerTournamentSumOrderByAggregateInput
  }

  export type PokerTournamentScalarWhereWithAggregatesInput = {
    AND?: PokerTournamentScalarWhereWithAggregatesInput | PokerTournamentScalarWhereWithAggregatesInput[]
    OR?: PokerTournamentScalarWhereWithAggregatesInput[]
    NOT?: PokerTournamentScalarWhereWithAggregatesInput | PokerTournamentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PokerTournament"> | string
    userId?: StringWithAggregatesFilter<"PokerTournament"> | string
    name?: StringWithAggregatesFilter<"PokerTournament"> | string
    location?: StringWithAggregatesFilter<"PokerTournament"> | string
    venue?: StringNullableWithAggregatesFilter<"PokerTournament"> | string | null
    dateStart?: DateTimeWithAggregatesFilter<"PokerTournament"> | Date | string
    dateEnd?: DateTimeNullableWithAggregatesFilter<"PokerTournament"> | Date | string | null
    accommodationCost?: DecimalWithAggregatesFilter<"PokerTournament"> | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalWithAggregatesFilter<"PokerTournament"> | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalWithAggregatesFilter<"PokerTournament"> | Decimal | DecimalJsLike | number | string
    notes?: StringNullableWithAggregatesFilter<"PokerTournament"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PokerTournament"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PokerTournament"> | Date | string
  }

  export type PokerTournamentEventWhereInput = {
    AND?: PokerTournamentEventWhereInput | PokerTournamentEventWhereInput[]
    OR?: PokerTournamentEventWhereInput[]
    NOT?: PokerTournamentEventWhereInput | PokerTournamentEventWhereInput[]
    id?: StringFilter<"PokerTournamentEvent"> | string
    tournamentId?: StringFilter<"PokerTournamentEvent"> | string
    userId?: StringFilter<"PokerTournamentEvent"> | string
    eventName?: StringFilter<"PokerTournamentEvent"> | string
    eventNumber?: StringNullableFilter<"PokerTournamentEvent"> | string | null
    buyIn?: DecimalFilter<"PokerTournamentEvent"> | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFilter<"PokerTournamentEvent"> | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFilter<"PokerTournamentEvent"> | Date | string
    gameType?: EnumGameTypeNullableFilter<"PokerTournamentEvent"> | $Enums.GameType | null
    fieldSize?: IntNullableFilter<"PokerTournamentEvent"> | number | null
    finishPosition?: IntNullableFilter<"PokerTournamentEvent"> | number | null
    notes?: StringNullableFilter<"PokerTournamentEvent"> | string | null
    createdAt?: DateTimeFilter<"PokerTournamentEvent"> | Date | string
    updatedAt?: DateTimeFilter<"PokerTournamentEvent"> | Date | string
    reBuyAmount?: DecimalNullableFilter<"PokerTournamentEvent"> | Decimal | DecimalJsLike | number | string | null
    reBuys?: IntNullableFilter<"PokerTournamentEvent"> | number | null
    startingStack?: IntNullableFilter<"PokerTournamentEvent"> | number | null
    isClosed?: BoolFilter<"PokerTournamentEvent"> | boolean
    tournament?: XOR<PokerTournamentScalarRelationFilter, PokerTournamentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PokerTournamentEventOrderByWithRelationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    userId?: SortOrder
    eventName?: SortOrder
    eventNumber?: SortOrderInput | SortOrder
    buyIn?: SortOrder
    winnings?: SortOrder
    eventDate?: SortOrder
    gameType?: SortOrderInput | SortOrder
    fieldSize?: SortOrderInput | SortOrder
    finishPosition?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reBuyAmount?: SortOrderInput | SortOrder
    reBuys?: SortOrderInput | SortOrder
    startingStack?: SortOrderInput | SortOrder
    isClosed?: SortOrder
    tournament?: PokerTournamentOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type PokerTournamentEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PokerTournamentEventWhereInput | PokerTournamentEventWhereInput[]
    OR?: PokerTournamentEventWhereInput[]
    NOT?: PokerTournamentEventWhereInput | PokerTournamentEventWhereInput[]
    tournamentId?: StringFilter<"PokerTournamentEvent"> | string
    userId?: StringFilter<"PokerTournamentEvent"> | string
    eventName?: StringFilter<"PokerTournamentEvent"> | string
    eventNumber?: StringNullableFilter<"PokerTournamentEvent"> | string | null
    buyIn?: DecimalFilter<"PokerTournamentEvent"> | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFilter<"PokerTournamentEvent"> | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFilter<"PokerTournamentEvent"> | Date | string
    gameType?: EnumGameTypeNullableFilter<"PokerTournamentEvent"> | $Enums.GameType | null
    fieldSize?: IntNullableFilter<"PokerTournamentEvent"> | number | null
    finishPosition?: IntNullableFilter<"PokerTournamentEvent"> | number | null
    notes?: StringNullableFilter<"PokerTournamentEvent"> | string | null
    createdAt?: DateTimeFilter<"PokerTournamentEvent"> | Date | string
    updatedAt?: DateTimeFilter<"PokerTournamentEvent"> | Date | string
    reBuyAmount?: DecimalNullableFilter<"PokerTournamentEvent"> | Decimal | DecimalJsLike | number | string | null
    reBuys?: IntNullableFilter<"PokerTournamentEvent"> | number | null
    startingStack?: IntNullableFilter<"PokerTournamentEvent"> | number | null
    isClosed?: BoolFilter<"PokerTournamentEvent"> | boolean
    tournament?: XOR<PokerTournamentScalarRelationFilter, PokerTournamentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PokerTournamentEventOrderByWithAggregationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    userId?: SortOrder
    eventName?: SortOrder
    eventNumber?: SortOrderInput | SortOrder
    buyIn?: SortOrder
    winnings?: SortOrder
    eventDate?: SortOrder
    gameType?: SortOrderInput | SortOrder
    fieldSize?: SortOrderInput | SortOrder
    finishPosition?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reBuyAmount?: SortOrderInput | SortOrder
    reBuys?: SortOrderInput | SortOrder
    startingStack?: SortOrderInput | SortOrder
    isClosed?: SortOrder
    _count?: PokerTournamentEventCountOrderByAggregateInput
    _avg?: PokerTournamentEventAvgOrderByAggregateInput
    _max?: PokerTournamentEventMaxOrderByAggregateInput
    _min?: PokerTournamentEventMinOrderByAggregateInput
    _sum?: PokerTournamentEventSumOrderByAggregateInput
  }

  export type PokerTournamentEventScalarWhereWithAggregatesInput = {
    AND?: PokerTournamentEventScalarWhereWithAggregatesInput | PokerTournamentEventScalarWhereWithAggregatesInput[]
    OR?: PokerTournamentEventScalarWhereWithAggregatesInput[]
    NOT?: PokerTournamentEventScalarWhereWithAggregatesInput | PokerTournamentEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PokerTournamentEvent"> | string
    tournamentId?: StringWithAggregatesFilter<"PokerTournamentEvent"> | string
    userId?: StringWithAggregatesFilter<"PokerTournamentEvent"> | string
    eventName?: StringWithAggregatesFilter<"PokerTournamentEvent"> | string
    eventNumber?: StringNullableWithAggregatesFilter<"PokerTournamentEvent"> | string | null
    buyIn?: DecimalWithAggregatesFilter<"PokerTournamentEvent"> | Decimal | DecimalJsLike | number | string
    winnings?: DecimalWithAggregatesFilter<"PokerTournamentEvent"> | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeWithAggregatesFilter<"PokerTournamentEvent"> | Date | string
    gameType?: EnumGameTypeNullableWithAggregatesFilter<"PokerTournamentEvent"> | $Enums.GameType | null
    fieldSize?: IntNullableWithAggregatesFilter<"PokerTournamentEvent"> | number | null
    finishPosition?: IntNullableWithAggregatesFilter<"PokerTournamentEvent"> | number | null
    notes?: StringNullableWithAggregatesFilter<"PokerTournamentEvent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PokerTournamentEvent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PokerTournamentEvent"> | Date | string
    reBuyAmount?: DecimalNullableWithAggregatesFilter<"PokerTournamentEvent"> | Decimal | DecimalJsLike | number | string | null
    reBuys?: IntNullableWithAggregatesFilter<"PokerTournamentEvent"> | number | null
    startingStack?: IntNullableWithAggregatesFilter<"PokerTournamentEvent"> | number | null
    isClosed?: BoolWithAggregatesFilter<"PokerTournamentEvent"> | boolean
  }

  export type RolloverEntryWhereInput = {
    AND?: RolloverEntryWhereInput | RolloverEntryWhereInput[]
    OR?: RolloverEntryWhereInput[]
    NOT?: RolloverEntryWhereInput | RolloverEntryWhereInput[]
    id?: StringFilter<"RolloverEntry"> | string
    userId?: StringFilter<"RolloverEntry"> | string
    amount?: DecimalFilter<"RolloverEntry"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"RolloverEntry"> | Date | string
    type?: EnumRolloverTypeFilter<"RolloverEntry"> | $Enums.RolloverType
    periodStart?: DateTimeFilter<"RolloverEntry"> | Date | string
    periodEnd?: DateTimeFilter<"RolloverEntry"> | Date | string
    description?: StringNullableFilter<"RolloverEntry"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RolloverEntryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    type?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    description?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RolloverEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RolloverEntryWhereInput | RolloverEntryWhereInput[]
    OR?: RolloverEntryWhereInput[]
    NOT?: RolloverEntryWhereInput | RolloverEntryWhereInput[]
    userId?: StringFilter<"RolloverEntry"> | string
    amount?: DecimalFilter<"RolloverEntry"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"RolloverEntry"> | Date | string
    type?: EnumRolloverTypeFilter<"RolloverEntry"> | $Enums.RolloverType
    periodStart?: DateTimeFilter<"RolloverEntry"> | Date | string
    periodEnd?: DateTimeFilter<"RolloverEntry"> | Date | string
    description?: StringNullableFilter<"RolloverEntry"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type RolloverEntryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    type?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: RolloverEntryCountOrderByAggregateInput
    _avg?: RolloverEntryAvgOrderByAggregateInput
    _max?: RolloverEntryMaxOrderByAggregateInput
    _min?: RolloverEntryMinOrderByAggregateInput
    _sum?: RolloverEntrySumOrderByAggregateInput
  }

  export type RolloverEntryScalarWhereWithAggregatesInput = {
    AND?: RolloverEntryScalarWhereWithAggregatesInput | RolloverEntryScalarWhereWithAggregatesInput[]
    OR?: RolloverEntryScalarWhereWithAggregatesInput[]
    NOT?: RolloverEntryScalarWhereWithAggregatesInput | RolloverEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RolloverEntry"> | string
    userId?: StringWithAggregatesFilter<"RolloverEntry"> | string
    amount?: DecimalWithAggregatesFilter<"RolloverEntry"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeWithAggregatesFilter<"RolloverEntry"> | Date | string
    type?: EnumRolloverTypeWithAggregatesFilter<"RolloverEntry"> | $Enums.RolloverType
    periodStart?: DateTimeWithAggregatesFilter<"RolloverEntry"> | Date | string
    periodEnd?: DateTimeWithAggregatesFilter<"RolloverEntry"> | Date | string
    description?: StringNullableWithAggregatesFilter<"RolloverEntry"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetCreateNestedManyWithoutUserInput
    categories?: CategoryCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentUncheckedCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUpdateManyWithoutUserNestedInput
    categories?: CategoryUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUncheckedUpdateManyWithoutUserNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUncheckedUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BudgetCreateInput = {
    id?: string
    name: string
    description?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    startDate: Date | string
    endDate?: Date | string | null
    isRecurring?: boolean
    status?: $Enums.BudgetStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBudgetsInput
    transactions?: TransactionCreateNestedManyWithoutBudgetInput
  }

  export type BudgetUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    startDate: Date | string
    endDate?: Date | string | null
    isRecurring?: boolean
    status?: $Enums.BudgetStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutBudgetInput
  }

  export type BudgetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBudgetStatusFieldUpdateOperationsInput | $Enums.BudgetStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBudgetsNestedInput
    transactions?: TransactionUpdateManyWithoutBudgetNestedInput
  }

  export type BudgetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBudgetStatusFieldUpdateOperationsInput | $Enums.BudgetStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutBudgetNestedInput
  }

  export type BudgetCreateManyInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    startDate: Date | string
    endDate?: Date | string | null
    isRecurring?: boolean
    status?: $Enums.BudgetStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BudgetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBudgetStatusFieldUpdateOperationsInput | $Enums.BudgetStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BudgetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBudgetStatusFieldUpdateOperationsInput | $Enums.BudgetStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutSubcategoriesInput
    subcategories?: CategoryCreateNestedManyWithoutParentInput
    user?: UserCreateNestedOneWithoutCategoriesInput
    transactions?: TransactionCreateNestedManyWithoutCategoryInput
    subcategoryTransactions?: TransactionCreateNestedManyWithoutSubcategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    userId?: string | null
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    subcategories?: CategoryUncheckedCreateNestedManyWithoutParentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
    subcategoryTransactions?: TransactionUncheckedCreateNestedManyWithoutSubcategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutSubcategoriesNestedInput
    subcategories?: CategoryUpdateManyWithoutParentNestedInput
    user?: UserUpdateOneWithoutCategoriesNestedInput
    transactions?: TransactionUpdateManyWithoutCategoryNestedInput
    subcategoryTransactions?: TransactionUpdateManyWithoutSubcategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    subcategories?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCategoryNestedInput
    subcategoryTransactions?: TransactionUncheckedUpdateManyWithoutSubcategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    userId?: string | null
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionCreateInput = {
    id?: string
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
    goalContributions?: GoalContributionCreateNestedManyWithoutTransactionInput
    budget?: BudgetCreateNestedOneWithoutTransactionsInput
    category?: CategoryCreateNestedOneWithoutTransactionsInput
    subcategory?: CategoryCreateNestedOneWithoutSubcategoryTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    userId: string
    budgetId?: string | null
    categoryId?: string | null
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    subcategoryId?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUpdateManyWithoutTransactionNestedInput
    budget?: BudgetUpdateOneWithoutTransactionsNestedInput
    category?: CategoryUpdateOneWithoutTransactionsNestedInput
    subcategory?: CategoryUpdateOneWithoutSubcategoryTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    subcategoryId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionCreateManyInput = {
    id?: string
    userId: string
    budgetId?: string | null
    categoryId?: string | null
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    subcategoryId?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    subcategoryId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
  }

  export type GoalCreateInput = {
    id?: string
    name: string
    description?: string | null
    targetAmount: Decimal | DecimalJsLike | number | string
    currentAmount?: Decimal | DecimalJsLike | number | string
    currency?: string
    targetDate?: Date | string | null
    category: $Enums.GoalCategory
    type?: $Enums.GoalType
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    priority?: $Enums.GoalPriority
    autoContribute?: boolean
    monthlyTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    originalCategory?: string | null
    contributions?: GoalContributionCreateNestedManyWithoutGoalInput
    reminders?: GoalReminderCreateNestedManyWithoutGoalInput
    user: UserCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    targetAmount: Decimal | DecimalJsLike | number | string
    currentAmount?: Decimal | DecimalJsLike | number | string
    currency?: string
    targetDate?: Date | string | null
    category: $Enums.GoalCategory
    type?: $Enums.GoalType
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    priority?: $Enums.GoalPriority
    autoContribute?: boolean
    monthlyTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    originalCategory?: string | null
    contributions?: GoalContributionUncheckedCreateNestedManyWithoutGoalInput
    reminders?: GoalReminderUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    targetAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumGoalCategoryFieldUpdateOperationsInput | $Enums.GoalCategory
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumGoalPriorityFieldUpdateOperationsInput | $Enums.GoalPriority
    autoContribute?: BoolFieldUpdateOperationsInput | boolean
    monthlyTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalCategory?: NullableStringFieldUpdateOperationsInput | string | null
    contributions?: GoalContributionUpdateManyWithoutGoalNestedInput
    reminders?: GoalReminderUpdateManyWithoutGoalNestedInput
    user?: UserUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    targetAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumGoalCategoryFieldUpdateOperationsInput | $Enums.GoalCategory
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumGoalPriorityFieldUpdateOperationsInput | $Enums.GoalPriority
    autoContribute?: BoolFieldUpdateOperationsInput | boolean
    monthlyTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalCategory?: NullableStringFieldUpdateOperationsInput | string | null
    contributions?: GoalContributionUncheckedUpdateManyWithoutGoalNestedInput
    reminders?: GoalReminderUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type GoalCreateManyInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    targetAmount: Decimal | DecimalJsLike | number | string
    currentAmount?: Decimal | DecimalJsLike | number | string
    currency?: string
    targetDate?: Date | string | null
    category: $Enums.GoalCategory
    type?: $Enums.GoalType
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    priority?: $Enums.GoalPriority
    autoContribute?: boolean
    monthlyTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    originalCategory?: string | null
  }

  export type GoalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    targetAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumGoalCategoryFieldUpdateOperationsInput | $Enums.GoalCategory
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumGoalPriorityFieldUpdateOperationsInput | $Enums.GoalPriority
    autoContribute?: BoolFieldUpdateOperationsInput | boolean
    monthlyTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalCategory?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    targetAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumGoalCategoryFieldUpdateOperationsInput | $Enums.GoalCategory
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumGoalPriorityFieldUpdateOperationsInput | $Enums.GoalPriority
    autoContribute?: BoolFieldUpdateOperationsInput | boolean
    monthlyTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalCategory?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalContributionCreateInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date?: Date | string
    description?: string | null
    type?: $Enums.ContributionType
    goal: GoalCreateNestedOneWithoutContributionsInput
    transaction?: TransactionCreateNestedOneWithoutGoalContributionsInput
    user: UserCreateNestedOneWithoutGoalContributionsInput
  }

  export type GoalContributionUncheckedCreateInput = {
    id?: string
    goalId: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date?: Date | string
    description?: string | null
    type?: $Enums.ContributionType
    transactionId?: string | null
  }

  export type GoalContributionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
    goal?: GoalUpdateOneRequiredWithoutContributionsNestedInput
    transaction?: TransactionUpdateOneWithoutGoalContributionsNestedInput
    user?: UserUpdateOneRequiredWithoutGoalContributionsNestedInput
  }

  export type GoalContributionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalContributionCreateManyInput = {
    id?: string
    goalId: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date?: Date | string
    description?: string | null
    type?: $Enums.ContributionType
    transactionId?: string | null
  }

  export type GoalContributionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
  }

  export type GoalContributionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalReminderCreateInput = {
    id?: string
    type: $Enums.ReminderType
    frequency: $Enums.ReminderFrequency
    isActive?: boolean
    lastSent?: Date | string | null
    nextDue?: Date | string | null
    message?: string | null
    createdAt?: Date | string
    goal: GoalCreateNestedOneWithoutRemindersInput
    user: UserCreateNestedOneWithoutGoalRemindersInput
  }

  export type GoalReminderUncheckedCreateInput = {
    id?: string
    goalId: string
    userId: string
    type: $Enums.ReminderType
    frequency: $Enums.ReminderFrequency
    isActive?: boolean
    lastSent?: Date | string | null
    nextDue?: Date | string | null
    message?: string | null
    createdAt?: Date | string
  }

  export type GoalReminderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFieldUpdateOperationsInput | $Enums.ReminderFrequency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneRequiredWithoutRemindersNestedInput
    user?: UserUpdateOneRequiredWithoutGoalRemindersNestedInput
  }

  export type GoalReminderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFieldUpdateOperationsInput | $Enums.ReminderFrequency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalReminderCreateManyInput = {
    id?: string
    goalId: string
    userId: string
    type: $Enums.ReminderType
    frequency: $Enums.ReminderFrequency
    isActive?: boolean
    lastSent?: Date | string | null
    nextDue?: Date | string | null
    message?: string | null
    createdAt?: Date | string
  }

  export type GoalReminderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFieldUpdateOperationsInput | $Enums.ReminderFrequency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalReminderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFieldUpdateOperationsInput | $Enums.ReminderFrequency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PokerTournamentCreateInput = {
    id?: string
    name: string
    location: string
    venue?: string | null
    dateStart: Date | string
    dateEnd?: Date | string | null
    accommodationCost?: Decimal | DecimalJsLike | number | string
    foodBudget?: Decimal | DecimalJsLike | number | string
    otherExpenses?: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: PokerTournamentEventCreateNestedManyWithoutTournamentInput
    user: UserCreateNestedOneWithoutPokerTournamentsInput
  }

  export type PokerTournamentUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    location: string
    venue?: string | null
    dateStart: Date | string
    dateEnd?: Date | string | null
    accommodationCost?: Decimal | DecimalJsLike | number | string
    foodBudget?: Decimal | DecimalJsLike | number | string
    otherExpenses?: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: PokerTournamentEventUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type PokerTournamentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accommodationCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: PokerTournamentEventUpdateManyWithoutTournamentNestedInput
    user?: UserUpdateOneRequiredWithoutPokerTournamentsNestedInput
  }

  export type PokerTournamentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accommodationCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: PokerTournamentEventUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type PokerTournamentCreateManyInput = {
    id?: string
    userId: string
    name: string
    location: string
    venue?: string | null
    dateStart: Date | string
    dateEnd?: Date | string | null
    accommodationCost?: Decimal | DecimalJsLike | number | string
    foodBudget?: Decimal | DecimalJsLike | number | string
    otherExpenses?: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PokerTournamentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accommodationCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PokerTournamentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accommodationCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PokerTournamentEventCreateInput = {
    id?: string
    eventName: string
    eventNumber?: string | null
    buyIn: Decimal | DecimalJsLike | number | string
    winnings?: Decimal | DecimalJsLike | number | string
    eventDate: Date | string
    gameType?: $Enums.GameType | null
    fieldSize?: number | null
    finishPosition?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reBuyAmount?: Decimal | DecimalJsLike | number | string | null
    reBuys?: number | null
    startingStack?: number | null
    isClosed?: boolean
    tournament: PokerTournamentCreateNestedOneWithoutEventsInput
    user: UserCreateNestedOneWithoutPokerTournamentEventsInput
  }

  export type PokerTournamentEventUncheckedCreateInput = {
    id?: string
    tournamentId: string
    userId: string
    eventName: string
    eventNumber?: string | null
    buyIn: Decimal | DecimalJsLike | number | string
    winnings?: Decimal | DecimalJsLike | number | string
    eventDate: Date | string
    gameType?: $Enums.GameType | null
    fieldSize?: number | null
    finishPosition?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reBuyAmount?: Decimal | DecimalJsLike | number | string | null
    reBuys?: number | null
    startingStack?: number | null
    isClosed?: boolean
  }

  export type PokerTournamentEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventName?: StringFieldUpdateOperationsInput | string
    eventNumber?: NullableStringFieldUpdateOperationsInput | string | null
    buyIn?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: NullableEnumGameTypeFieldUpdateOperationsInput | $Enums.GameType | null
    fieldSize?: NullableIntFieldUpdateOperationsInput | number | null
    finishPosition?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reBuyAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reBuys?: NullableIntFieldUpdateOperationsInput | number | null
    startingStack?: NullableIntFieldUpdateOperationsInput | number | null
    isClosed?: BoolFieldUpdateOperationsInput | boolean
    tournament?: PokerTournamentUpdateOneRequiredWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutPokerTournamentEventsNestedInput
  }

  export type PokerTournamentEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventName?: StringFieldUpdateOperationsInput | string
    eventNumber?: NullableStringFieldUpdateOperationsInput | string | null
    buyIn?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: NullableEnumGameTypeFieldUpdateOperationsInput | $Enums.GameType | null
    fieldSize?: NullableIntFieldUpdateOperationsInput | number | null
    finishPosition?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reBuyAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reBuys?: NullableIntFieldUpdateOperationsInput | number | null
    startingStack?: NullableIntFieldUpdateOperationsInput | number | null
    isClosed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PokerTournamentEventCreateManyInput = {
    id?: string
    tournamentId: string
    userId: string
    eventName: string
    eventNumber?: string | null
    buyIn: Decimal | DecimalJsLike | number | string
    winnings?: Decimal | DecimalJsLike | number | string
    eventDate: Date | string
    gameType?: $Enums.GameType | null
    fieldSize?: number | null
    finishPosition?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reBuyAmount?: Decimal | DecimalJsLike | number | string | null
    reBuys?: number | null
    startingStack?: number | null
    isClosed?: boolean
  }

  export type PokerTournamentEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventName?: StringFieldUpdateOperationsInput | string
    eventNumber?: NullableStringFieldUpdateOperationsInput | string | null
    buyIn?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: NullableEnumGameTypeFieldUpdateOperationsInput | $Enums.GameType | null
    fieldSize?: NullableIntFieldUpdateOperationsInput | number | null
    finishPosition?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reBuyAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reBuys?: NullableIntFieldUpdateOperationsInput | number | null
    startingStack?: NullableIntFieldUpdateOperationsInput | number | null
    isClosed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PokerTournamentEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventName?: StringFieldUpdateOperationsInput | string
    eventNumber?: NullableStringFieldUpdateOperationsInput | string | null
    buyIn?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: NullableEnumGameTypeFieldUpdateOperationsInput | $Enums.GameType | null
    fieldSize?: NullableIntFieldUpdateOperationsInput | number | null
    finishPosition?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reBuyAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reBuys?: NullableIntFieldUpdateOperationsInput | number | null
    startingStack?: NullableIntFieldUpdateOperationsInput | number | null
    isClosed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolloverEntryCreateInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    date?: Date | string
    type: $Enums.RolloverType
    periodStart: Date | string
    periodEnd: Date | string
    description?: string | null
    user: UserCreateNestedOneWithoutRolloverHistoryInput
  }

  export type RolloverEntryUncheckedCreateInput = {
    id?: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    date?: Date | string
    type: $Enums.RolloverType
    periodStart: Date | string
    periodEnd: Date | string
    description?: string | null
  }

  export type RolloverEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumRolloverTypeFieldUpdateOperationsInput | $Enums.RolloverType
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutRolloverHistoryNestedInput
  }

  export type RolloverEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumRolloverTypeFieldUpdateOperationsInput | $Enums.RolloverType
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolloverEntryCreateManyInput = {
    id?: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    date?: Date | string
    type: $Enums.RolloverType
    periodStart: Date | string
    periodEnd: Date | string
    description?: string | null
  }

  export type RolloverEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumRolloverTypeFieldUpdateOperationsInput | $Enums.RolloverType
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolloverEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumRolloverTypeFieldUpdateOperationsInput | $Enums.RolloverType
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type EnumIncomeFrequencyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.IncomeFrequency | EnumIncomeFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.IncomeFrequency[] | ListEnumIncomeFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.IncomeFrequency[] | ListEnumIncomeFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumIncomeFrequencyNullableFilter<$PrismaModel> | $Enums.IncomeFrequency | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BudgetListRelationFilter = {
    every?: BudgetWhereInput
    some?: BudgetWhereInput
    none?: BudgetWhereInput
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type GoalContributionListRelationFilter = {
    every?: GoalContributionWhereInput
    some?: GoalContributionWhereInput
    none?: GoalContributionWhereInput
  }

  export type GoalReminderListRelationFilter = {
    every?: GoalReminderWhereInput
    some?: GoalReminderWhereInput
    none?: GoalReminderWhereInput
  }

  export type GoalListRelationFilter = {
    every?: GoalWhereInput
    some?: GoalWhereInput
    none?: GoalWhereInput
  }

  export type PokerTournamentEventListRelationFilter = {
    every?: PokerTournamentEventWhereInput
    some?: PokerTournamentEventWhereInput
    none?: PokerTournamentEventWhereInput
  }

  export type PokerTournamentListRelationFilter = {
    every?: PokerTournamentWhereInput
    some?: PokerTournamentWhereInput
    none?: PokerTournamentWhereInput
  }

  export type RolloverEntryListRelationFilter = {
    every?: RolloverEntryWhereInput
    some?: RolloverEntryWhereInput
    none?: RolloverEntryWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BudgetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalContributionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalReminderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PokerTournamentEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PokerTournamentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RolloverEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    passwordHash?: SortOrder
    currency?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    hasSeenWelcome?: SortOrder
    income?: SortOrder
    setupComplete?: SortOrder
    hasSeenAddTransactionTour?: SortOrder
    hasSeenBalanceCardTour?: SortOrder
    hasSeenTransactionSwipeTour?: SortOrder
    fixedExpenses?: SortOrder
    incomeFrequency?: SortOrder
    nextPayDate?: SortOrder
    rolloverAmount?: SortOrder
    lastRolloverDate?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    income?: SortOrder
    fixedExpenses?: SortOrder
    rolloverAmount?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    passwordHash?: SortOrder
    currency?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    hasSeenWelcome?: SortOrder
    income?: SortOrder
    setupComplete?: SortOrder
    hasSeenAddTransactionTour?: SortOrder
    hasSeenBalanceCardTour?: SortOrder
    hasSeenTransactionSwipeTour?: SortOrder
    fixedExpenses?: SortOrder
    incomeFrequency?: SortOrder
    nextPayDate?: SortOrder
    rolloverAmount?: SortOrder
    lastRolloverDate?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    passwordHash?: SortOrder
    currency?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    hasSeenWelcome?: SortOrder
    income?: SortOrder
    setupComplete?: SortOrder
    hasSeenAddTransactionTour?: SortOrder
    hasSeenBalanceCardTour?: SortOrder
    hasSeenTransactionSwipeTour?: SortOrder
    fixedExpenses?: SortOrder
    incomeFrequency?: SortOrder
    nextPayDate?: SortOrder
    rolloverAmount?: SortOrder
    lastRolloverDate?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    income?: SortOrder
    fixedExpenses?: SortOrder
    rolloverAmount?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumIncomeFrequencyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IncomeFrequency | EnumIncomeFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.IncomeFrequency[] | ListEnumIncomeFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.IncomeFrequency[] | ListEnumIncomeFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumIncomeFrequencyNullableWithAggregatesFilter<$PrismaModel> | $Enums.IncomeFrequency | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumIncomeFrequencyNullableFilter<$PrismaModel>
    _max?: NestedEnumIncomeFrequencyNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumBudgetStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BudgetStatus | EnumBudgetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BudgetStatus[] | ListEnumBudgetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BudgetStatus[] | ListEnumBudgetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBudgetStatusFilter<$PrismaModel> | $Enums.BudgetStatus
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BudgetCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    totalAmount?: SortOrder
    currency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isRecurring?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BudgetAvgOrderByAggregateInput = {
    totalAmount?: SortOrder
  }

  export type BudgetMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    totalAmount?: SortOrder
    currency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isRecurring?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BudgetMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    totalAmount?: SortOrder
    currency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isRecurring?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BudgetSumOrderByAggregateInput = {
    totalAmount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumBudgetStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BudgetStatus | EnumBudgetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BudgetStatus[] | ListEnumBudgetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BudgetStatus[] | ListEnumBudgetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBudgetStatusWithAggregatesFilter<$PrismaModel> | $Enums.BudgetStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBudgetStatusFilter<$PrismaModel>
    _max?: NestedEnumBudgetStatusFilter<$PrismaModel>
  }

  export type EnumCategoryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryType | EnumCategoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryTypeFilter<$PrismaModel> | $Enums.CategoryType
  }

  export type CategoryNullableScalarRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CategoryNameIsSystemCompoundUniqueInput = {
    name: string
    isSystem: boolean
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    type?: SortOrder
    isSystem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    type?: SortOrder
    isSystem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    type?: SortOrder
    isSystem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentId?: SortOrder
  }

  export type EnumCategoryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryType | EnumCategoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryTypeWithAggregatesFilter<$PrismaModel> | $Enums.CategoryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryTypeFilter<$PrismaModel>
    _max?: NestedEnumCategoryTypeFilter<$PrismaModel>
  }

  export type EnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumPaymentStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentStatusNullableFilter<$PrismaModel> | $Enums.PaymentStatus | null
  }

  export type BudgetNullableScalarRelationFilter = {
    is?: BudgetWhereInput | null
    isNot?: BudgetWhereInput | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    budgetId?: SortOrder
    categoryId?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    type?: SortOrder
    isAICategorized?: SortOrder
    aiConfidence?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    location?: SortOrder
    merchantName?: SortOrder
    notes?: SortOrder
    recurrence?: SortOrder
    subcategoryId?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
    aiConfidence?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    budgetId?: SortOrder
    categoryId?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    type?: SortOrder
    isAICategorized?: SortOrder
    aiConfidence?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    location?: SortOrder
    merchantName?: SortOrder
    notes?: SortOrder
    recurrence?: SortOrder
    subcategoryId?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    budgetId?: SortOrder
    categoryId?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    type?: SortOrder
    isAICategorized?: SortOrder
    aiConfidence?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    location?: SortOrder
    merchantName?: SortOrder
    notes?: SortOrder
    recurrence?: SortOrder
    subcategoryId?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
    aiConfidence?: SortOrder
  }

  export type EnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumPaymentStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusNullableFilter<$PrismaModel>
  }

  export type EnumGoalCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalCategory | EnumGoalCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.GoalCategory[] | ListEnumGoalCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalCategory[] | ListEnumGoalCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalCategoryFilter<$PrismaModel> | $Enums.GoalCategory
  }

  export type EnumGoalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalType | EnumGoalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalTypeFilter<$PrismaModel> | $Enums.GoalType
  }

  export type EnumGoalPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalPriority | EnumGoalPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.GoalPriority[] | ListEnumGoalPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalPriority[] | ListEnumGoalPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalPriorityFilter<$PrismaModel> | $Enums.GoalPriority
  }

  export type GoalCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    targetAmount?: SortOrder
    currentAmount?: SortOrder
    currency?: SortOrder
    targetDate?: SortOrder
    category?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    isCompleted?: SortOrder
    completedAt?: SortOrder
    priority?: SortOrder
    autoContribute?: SortOrder
    monthlyTarget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalCategory?: SortOrder
  }

  export type GoalAvgOrderByAggregateInput = {
    targetAmount?: SortOrder
    currentAmount?: SortOrder
    monthlyTarget?: SortOrder
  }

  export type GoalMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    targetAmount?: SortOrder
    currentAmount?: SortOrder
    currency?: SortOrder
    targetDate?: SortOrder
    category?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    isCompleted?: SortOrder
    completedAt?: SortOrder
    priority?: SortOrder
    autoContribute?: SortOrder
    monthlyTarget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalCategory?: SortOrder
  }

  export type GoalMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    targetAmount?: SortOrder
    currentAmount?: SortOrder
    currency?: SortOrder
    targetDate?: SortOrder
    category?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    isCompleted?: SortOrder
    completedAt?: SortOrder
    priority?: SortOrder
    autoContribute?: SortOrder
    monthlyTarget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalCategory?: SortOrder
  }

  export type GoalSumOrderByAggregateInput = {
    targetAmount?: SortOrder
    currentAmount?: SortOrder
    monthlyTarget?: SortOrder
  }

  export type EnumGoalCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalCategory | EnumGoalCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.GoalCategory[] | ListEnumGoalCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalCategory[] | ListEnumGoalCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalCategoryWithAggregatesFilter<$PrismaModel> | $Enums.GoalCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGoalCategoryFilter<$PrismaModel>
    _max?: NestedEnumGoalCategoryFilter<$PrismaModel>
  }

  export type EnumGoalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalType | EnumGoalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalTypeWithAggregatesFilter<$PrismaModel> | $Enums.GoalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGoalTypeFilter<$PrismaModel>
    _max?: NestedEnumGoalTypeFilter<$PrismaModel>
  }

  export type EnumGoalPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalPriority | EnumGoalPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.GoalPriority[] | ListEnumGoalPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalPriority[] | ListEnumGoalPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalPriorityWithAggregatesFilter<$PrismaModel> | $Enums.GoalPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGoalPriorityFilter<$PrismaModel>
    _max?: NestedEnumGoalPriorityFilter<$PrismaModel>
  }

  export type EnumContributionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContributionType | EnumContributionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContributionType[] | ListEnumContributionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContributionType[] | ListEnumContributionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContributionTypeFilter<$PrismaModel> | $Enums.ContributionType
  }

  export type GoalScalarRelationFilter = {
    is?: GoalWhereInput
    isNot?: GoalWhereInput
  }

  export type TransactionNullableScalarRelationFilter = {
    is?: TransactionWhereInput | null
    isNot?: TransactionWhereInput | null
  }

  export type GoalContributionCountOrderByAggregateInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    description?: SortOrder
    type?: SortOrder
    transactionId?: SortOrder
  }

  export type GoalContributionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type GoalContributionMaxOrderByAggregateInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    description?: SortOrder
    type?: SortOrder
    transactionId?: SortOrder
  }

  export type GoalContributionMinOrderByAggregateInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    description?: SortOrder
    type?: SortOrder
    transactionId?: SortOrder
  }

  export type GoalContributionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumContributionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContributionType | EnumContributionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContributionType[] | ListEnumContributionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContributionType[] | ListEnumContributionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContributionTypeWithAggregatesFilter<$PrismaModel> | $Enums.ContributionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContributionTypeFilter<$PrismaModel>
    _max?: NestedEnumContributionTypeFilter<$PrismaModel>
  }

  export type EnumReminderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReminderType | EnumReminderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReminderType[] | ListEnumReminderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReminderType[] | ListEnumReminderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReminderTypeFilter<$PrismaModel> | $Enums.ReminderType
  }

  export type EnumReminderFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.ReminderFrequency | EnumReminderFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.ReminderFrequency[] | ListEnumReminderFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReminderFrequency[] | ListEnumReminderFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumReminderFrequencyFilter<$PrismaModel> | $Enums.ReminderFrequency
  }

  export type GoalReminderCountOrderByAggregateInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    frequency?: SortOrder
    isActive?: SortOrder
    lastSent?: SortOrder
    nextDue?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type GoalReminderMaxOrderByAggregateInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    frequency?: SortOrder
    isActive?: SortOrder
    lastSent?: SortOrder
    nextDue?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type GoalReminderMinOrderByAggregateInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    frequency?: SortOrder
    isActive?: SortOrder
    lastSent?: SortOrder
    nextDue?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumReminderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReminderType | EnumReminderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReminderType[] | ListEnumReminderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReminderType[] | ListEnumReminderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReminderTypeWithAggregatesFilter<$PrismaModel> | $Enums.ReminderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReminderTypeFilter<$PrismaModel>
    _max?: NestedEnumReminderTypeFilter<$PrismaModel>
  }

  export type EnumReminderFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReminderFrequency | EnumReminderFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.ReminderFrequency[] | ListEnumReminderFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReminderFrequency[] | ListEnumReminderFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumReminderFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.ReminderFrequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReminderFrequencyFilter<$PrismaModel>
    _max?: NestedEnumReminderFrequencyFilter<$PrismaModel>
  }

  export type PokerTournamentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    venue?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    accommodationCost?: SortOrder
    foodBudget?: SortOrder
    otherExpenses?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PokerTournamentAvgOrderByAggregateInput = {
    accommodationCost?: SortOrder
    foodBudget?: SortOrder
    otherExpenses?: SortOrder
  }

  export type PokerTournamentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    venue?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    accommodationCost?: SortOrder
    foodBudget?: SortOrder
    otherExpenses?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PokerTournamentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    venue?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    accommodationCost?: SortOrder
    foodBudget?: SortOrder
    otherExpenses?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PokerTournamentSumOrderByAggregateInput = {
    accommodationCost?: SortOrder
    foodBudget?: SortOrder
    otherExpenses?: SortOrder
  }

  export type EnumGameTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.GameType | EnumGameTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.GameType[] | ListEnumGameTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.GameType[] | ListEnumGameTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGameTypeNullableFilter<$PrismaModel> | $Enums.GameType | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PokerTournamentScalarRelationFilter = {
    is?: PokerTournamentWhereInput
    isNot?: PokerTournamentWhereInput
  }

  export type PokerTournamentEventCountOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    userId?: SortOrder
    eventName?: SortOrder
    eventNumber?: SortOrder
    buyIn?: SortOrder
    winnings?: SortOrder
    eventDate?: SortOrder
    gameType?: SortOrder
    fieldSize?: SortOrder
    finishPosition?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reBuyAmount?: SortOrder
    reBuys?: SortOrder
    startingStack?: SortOrder
    isClosed?: SortOrder
  }

  export type PokerTournamentEventAvgOrderByAggregateInput = {
    buyIn?: SortOrder
    winnings?: SortOrder
    fieldSize?: SortOrder
    finishPosition?: SortOrder
    reBuyAmount?: SortOrder
    reBuys?: SortOrder
    startingStack?: SortOrder
  }

  export type PokerTournamentEventMaxOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    userId?: SortOrder
    eventName?: SortOrder
    eventNumber?: SortOrder
    buyIn?: SortOrder
    winnings?: SortOrder
    eventDate?: SortOrder
    gameType?: SortOrder
    fieldSize?: SortOrder
    finishPosition?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reBuyAmount?: SortOrder
    reBuys?: SortOrder
    startingStack?: SortOrder
    isClosed?: SortOrder
  }

  export type PokerTournamentEventMinOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    userId?: SortOrder
    eventName?: SortOrder
    eventNumber?: SortOrder
    buyIn?: SortOrder
    winnings?: SortOrder
    eventDate?: SortOrder
    gameType?: SortOrder
    fieldSize?: SortOrder
    finishPosition?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reBuyAmount?: SortOrder
    reBuys?: SortOrder
    startingStack?: SortOrder
    isClosed?: SortOrder
  }

  export type PokerTournamentEventSumOrderByAggregateInput = {
    buyIn?: SortOrder
    winnings?: SortOrder
    fieldSize?: SortOrder
    finishPosition?: SortOrder
    reBuyAmount?: SortOrder
    reBuys?: SortOrder
    startingStack?: SortOrder
  }

  export type EnumGameTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameType | EnumGameTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.GameType[] | ListEnumGameTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.GameType[] | ListEnumGameTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGameTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.GameType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGameTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumGameTypeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumRolloverTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RolloverType | EnumRolloverTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RolloverType[] | ListEnumRolloverTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RolloverType[] | ListEnumRolloverTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRolloverTypeFilter<$PrismaModel> | $Enums.RolloverType
  }

  export type RolloverEntryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    type?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    description?: SortOrder
  }

  export type RolloverEntryAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type RolloverEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    type?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    description?: SortOrder
  }

  export type RolloverEntryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    type?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    description?: SortOrder
  }

  export type RolloverEntrySumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumRolloverTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RolloverType | EnumRolloverTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RolloverType[] | ListEnumRolloverTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RolloverType[] | ListEnumRolloverTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRolloverTypeWithAggregatesFilter<$PrismaModel> | $Enums.RolloverType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolloverTypeFilter<$PrismaModel>
    _max?: NestedEnumRolloverTypeFilter<$PrismaModel>
  }

  export type BudgetCreateNestedManyWithoutUserInput = {
    create?: XOR<BudgetCreateWithoutUserInput, BudgetUncheckedCreateWithoutUserInput> | BudgetCreateWithoutUserInput[] | BudgetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BudgetCreateOrConnectWithoutUserInput | BudgetCreateOrConnectWithoutUserInput[]
    createMany?: BudgetCreateManyUserInputEnvelope
    connect?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
  }

  export type CategoryCreateNestedManyWithoutUserInput = {
    create?: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput> | CategoryCreateWithoutUserInput[] | CategoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUserInput | CategoryCreateOrConnectWithoutUserInput[]
    createMany?: CategoryCreateManyUserInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type GoalContributionCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalContributionCreateWithoutUserInput, GoalContributionUncheckedCreateWithoutUserInput> | GoalContributionCreateWithoutUserInput[] | GoalContributionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalContributionCreateOrConnectWithoutUserInput | GoalContributionCreateOrConnectWithoutUserInput[]
    createMany?: GoalContributionCreateManyUserInputEnvelope
    connect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
  }

  export type GoalReminderCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalReminderCreateWithoutUserInput, GoalReminderUncheckedCreateWithoutUserInput> | GoalReminderCreateWithoutUserInput[] | GoalReminderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalReminderCreateOrConnectWithoutUserInput | GoalReminderCreateOrConnectWithoutUserInput[]
    createMany?: GoalReminderCreateManyUserInputEnvelope
    connect?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
  }

  export type GoalCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type PokerTournamentEventCreateNestedManyWithoutUserInput = {
    create?: XOR<PokerTournamentEventCreateWithoutUserInput, PokerTournamentEventUncheckedCreateWithoutUserInput> | PokerTournamentEventCreateWithoutUserInput[] | PokerTournamentEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PokerTournamentEventCreateOrConnectWithoutUserInput | PokerTournamentEventCreateOrConnectWithoutUserInput[]
    createMany?: PokerTournamentEventCreateManyUserInputEnvelope
    connect?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
  }

  export type PokerTournamentCreateNestedManyWithoutUserInput = {
    create?: XOR<PokerTournamentCreateWithoutUserInput, PokerTournamentUncheckedCreateWithoutUserInput> | PokerTournamentCreateWithoutUserInput[] | PokerTournamentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PokerTournamentCreateOrConnectWithoutUserInput | PokerTournamentCreateOrConnectWithoutUserInput[]
    createMany?: PokerTournamentCreateManyUserInputEnvelope
    connect?: PokerTournamentWhereUniqueInput | PokerTournamentWhereUniqueInput[]
  }

  export type RolloverEntryCreateNestedManyWithoutUserInput = {
    create?: XOR<RolloverEntryCreateWithoutUserInput, RolloverEntryUncheckedCreateWithoutUserInput> | RolloverEntryCreateWithoutUserInput[] | RolloverEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RolloverEntryCreateOrConnectWithoutUserInput | RolloverEntryCreateOrConnectWithoutUserInput[]
    createMany?: RolloverEntryCreateManyUserInputEnvelope
    connect?: RolloverEntryWhereUniqueInput | RolloverEntryWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type BudgetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BudgetCreateWithoutUserInput, BudgetUncheckedCreateWithoutUserInput> | BudgetCreateWithoutUserInput[] | BudgetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BudgetCreateOrConnectWithoutUserInput | BudgetCreateOrConnectWithoutUserInput[]
    createMany?: BudgetCreateManyUserInputEnvelope
    connect?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput> | CategoryCreateWithoutUserInput[] | CategoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUserInput | CategoryCreateOrConnectWithoutUserInput[]
    createMany?: CategoryCreateManyUserInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type GoalContributionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalContributionCreateWithoutUserInput, GoalContributionUncheckedCreateWithoutUserInput> | GoalContributionCreateWithoutUserInput[] | GoalContributionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalContributionCreateOrConnectWithoutUserInput | GoalContributionCreateOrConnectWithoutUserInput[]
    createMany?: GoalContributionCreateManyUserInputEnvelope
    connect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
  }

  export type GoalReminderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalReminderCreateWithoutUserInput, GoalReminderUncheckedCreateWithoutUserInput> | GoalReminderCreateWithoutUserInput[] | GoalReminderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalReminderCreateOrConnectWithoutUserInput | GoalReminderCreateOrConnectWithoutUserInput[]
    createMany?: GoalReminderCreateManyUserInputEnvelope
    connect?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type PokerTournamentEventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PokerTournamentEventCreateWithoutUserInput, PokerTournamentEventUncheckedCreateWithoutUserInput> | PokerTournamentEventCreateWithoutUserInput[] | PokerTournamentEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PokerTournamentEventCreateOrConnectWithoutUserInput | PokerTournamentEventCreateOrConnectWithoutUserInput[]
    createMany?: PokerTournamentEventCreateManyUserInputEnvelope
    connect?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
  }

  export type PokerTournamentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PokerTournamentCreateWithoutUserInput, PokerTournamentUncheckedCreateWithoutUserInput> | PokerTournamentCreateWithoutUserInput[] | PokerTournamentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PokerTournamentCreateOrConnectWithoutUserInput | PokerTournamentCreateOrConnectWithoutUserInput[]
    createMany?: PokerTournamentCreateManyUserInputEnvelope
    connect?: PokerTournamentWhereUniqueInput | PokerTournamentWhereUniqueInput[]
  }

  export type RolloverEntryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RolloverEntryCreateWithoutUserInput, RolloverEntryUncheckedCreateWithoutUserInput> | RolloverEntryCreateWithoutUserInput[] | RolloverEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RolloverEntryCreateOrConnectWithoutUserInput | RolloverEntryCreateOrConnectWithoutUserInput[]
    createMany?: RolloverEntryCreateManyUserInputEnvelope
    connect?: RolloverEntryWhereUniqueInput | RolloverEntryWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableEnumIncomeFrequencyFieldUpdateOperationsInput = {
    set?: $Enums.IncomeFrequency | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BudgetUpdateManyWithoutUserNestedInput = {
    create?: XOR<BudgetCreateWithoutUserInput, BudgetUncheckedCreateWithoutUserInput> | BudgetCreateWithoutUserInput[] | BudgetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BudgetCreateOrConnectWithoutUserInput | BudgetCreateOrConnectWithoutUserInput[]
    upsert?: BudgetUpsertWithWhereUniqueWithoutUserInput | BudgetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BudgetCreateManyUserInputEnvelope
    set?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    disconnect?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    delete?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    connect?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    update?: BudgetUpdateWithWhereUniqueWithoutUserInput | BudgetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BudgetUpdateManyWithWhereWithoutUserInput | BudgetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BudgetScalarWhereInput | BudgetScalarWhereInput[]
  }

  export type CategoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput> | CategoryCreateWithoutUserInput[] | CategoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUserInput | CategoryCreateOrConnectWithoutUserInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutUserInput | CategoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CategoryCreateManyUserInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutUserInput | CategoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutUserInput | CategoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type GoalContributionUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalContributionCreateWithoutUserInput, GoalContributionUncheckedCreateWithoutUserInput> | GoalContributionCreateWithoutUserInput[] | GoalContributionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalContributionCreateOrConnectWithoutUserInput | GoalContributionCreateOrConnectWithoutUserInput[]
    upsert?: GoalContributionUpsertWithWhereUniqueWithoutUserInput | GoalContributionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalContributionCreateManyUserInputEnvelope
    set?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    disconnect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    delete?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    connect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    update?: GoalContributionUpdateWithWhereUniqueWithoutUserInput | GoalContributionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalContributionUpdateManyWithWhereWithoutUserInput | GoalContributionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalContributionScalarWhereInput | GoalContributionScalarWhereInput[]
  }

  export type GoalReminderUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalReminderCreateWithoutUserInput, GoalReminderUncheckedCreateWithoutUserInput> | GoalReminderCreateWithoutUserInput[] | GoalReminderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalReminderCreateOrConnectWithoutUserInput | GoalReminderCreateOrConnectWithoutUserInput[]
    upsert?: GoalReminderUpsertWithWhereUniqueWithoutUserInput | GoalReminderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalReminderCreateManyUserInputEnvelope
    set?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    disconnect?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    delete?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    connect?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    update?: GoalReminderUpdateWithWhereUniqueWithoutUserInput | GoalReminderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalReminderUpdateManyWithWhereWithoutUserInput | GoalReminderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalReminderScalarWhereInput | GoalReminderScalarWhereInput[]
  }

  export type GoalUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutUserInput | GoalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutUserInput | GoalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutUserInput | GoalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type PokerTournamentEventUpdateManyWithoutUserNestedInput = {
    create?: XOR<PokerTournamentEventCreateWithoutUserInput, PokerTournamentEventUncheckedCreateWithoutUserInput> | PokerTournamentEventCreateWithoutUserInput[] | PokerTournamentEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PokerTournamentEventCreateOrConnectWithoutUserInput | PokerTournamentEventCreateOrConnectWithoutUserInput[]
    upsert?: PokerTournamentEventUpsertWithWhereUniqueWithoutUserInput | PokerTournamentEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PokerTournamentEventCreateManyUserInputEnvelope
    set?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    disconnect?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    delete?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    connect?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    update?: PokerTournamentEventUpdateWithWhereUniqueWithoutUserInput | PokerTournamentEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PokerTournamentEventUpdateManyWithWhereWithoutUserInput | PokerTournamentEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PokerTournamentEventScalarWhereInput | PokerTournamentEventScalarWhereInput[]
  }

  export type PokerTournamentUpdateManyWithoutUserNestedInput = {
    create?: XOR<PokerTournamentCreateWithoutUserInput, PokerTournamentUncheckedCreateWithoutUserInput> | PokerTournamentCreateWithoutUserInput[] | PokerTournamentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PokerTournamentCreateOrConnectWithoutUserInput | PokerTournamentCreateOrConnectWithoutUserInput[]
    upsert?: PokerTournamentUpsertWithWhereUniqueWithoutUserInput | PokerTournamentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PokerTournamentCreateManyUserInputEnvelope
    set?: PokerTournamentWhereUniqueInput | PokerTournamentWhereUniqueInput[]
    disconnect?: PokerTournamentWhereUniqueInput | PokerTournamentWhereUniqueInput[]
    delete?: PokerTournamentWhereUniqueInput | PokerTournamentWhereUniqueInput[]
    connect?: PokerTournamentWhereUniqueInput | PokerTournamentWhereUniqueInput[]
    update?: PokerTournamentUpdateWithWhereUniqueWithoutUserInput | PokerTournamentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PokerTournamentUpdateManyWithWhereWithoutUserInput | PokerTournamentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PokerTournamentScalarWhereInput | PokerTournamentScalarWhereInput[]
  }

  export type RolloverEntryUpdateManyWithoutUserNestedInput = {
    create?: XOR<RolloverEntryCreateWithoutUserInput, RolloverEntryUncheckedCreateWithoutUserInput> | RolloverEntryCreateWithoutUserInput[] | RolloverEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RolloverEntryCreateOrConnectWithoutUserInput | RolloverEntryCreateOrConnectWithoutUserInput[]
    upsert?: RolloverEntryUpsertWithWhereUniqueWithoutUserInput | RolloverEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RolloverEntryCreateManyUserInputEnvelope
    set?: RolloverEntryWhereUniqueInput | RolloverEntryWhereUniqueInput[]
    disconnect?: RolloverEntryWhereUniqueInput | RolloverEntryWhereUniqueInput[]
    delete?: RolloverEntryWhereUniqueInput | RolloverEntryWhereUniqueInput[]
    connect?: RolloverEntryWhereUniqueInput | RolloverEntryWhereUniqueInput[]
    update?: RolloverEntryUpdateWithWhereUniqueWithoutUserInput | RolloverEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RolloverEntryUpdateManyWithWhereWithoutUserInput | RolloverEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RolloverEntryScalarWhereInput | RolloverEntryScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type BudgetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BudgetCreateWithoutUserInput, BudgetUncheckedCreateWithoutUserInput> | BudgetCreateWithoutUserInput[] | BudgetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BudgetCreateOrConnectWithoutUserInput | BudgetCreateOrConnectWithoutUserInput[]
    upsert?: BudgetUpsertWithWhereUniqueWithoutUserInput | BudgetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BudgetCreateManyUserInputEnvelope
    set?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    disconnect?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    delete?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    connect?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    update?: BudgetUpdateWithWhereUniqueWithoutUserInput | BudgetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BudgetUpdateManyWithWhereWithoutUserInput | BudgetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BudgetScalarWhereInput | BudgetScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput> | CategoryCreateWithoutUserInput[] | CategoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUserInput | CategoryCreateOrConnectWithoutUserInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutUserInput | CategoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CategoryCreateManyUserInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutUserInput | CategoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutUserInput | CategoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type GoalContributionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalContributionCreateWithoutUserInput, GoalContributionUncheckedCreateWithoutUserInput> | GoalContributionCreateWithoutUserInput[] | GoalContributionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalContributionCreateOrConnectWithoutUserInput | GoalContributionCreateOrConnectWithoutUserInput[]
    upsert?: GoalContributionUpsertWithWhereUniqueWithoutUserInput | GoalContributionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalContributionCreateManyUserInputEnvelope
    set?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    disconnect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    delete?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    connect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    update?: GoalContributionUpdateWithWhereUniqueWithoutUserInput | GoalContributionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalContributionUpdateManyWithWhereWithoutUserInput | GoalContributionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalContributionScalarWhereInput | GoalContributionScalarWhereInput[]
  }

  export type GoalReminderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalReminderCreateWithoutUserInput, GoalReminderUncheckedCreateWithoutUserInput> | GoalReminderCreateWithoutUserInput[] | GoalReminderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalReminderCreateOrConnectWithoutUserInput | GoalReminderCreateOrConnectWithoutUserInput[]
    upsert?: GoalReminderUpsertWithWhereUniqueWithoutUserInput | GoalReminderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalReminderCreateManyUserInputEnvelope
    set?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    disconnect?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    delete?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    connect?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    update?: GoalReminderUpdateWithWhereUniqueWithoutUserInput | GoalReminderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalReminderUpdateManyWithWhereWithoutUserInput | GoalReminderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalReminderScalarWhereInput | GoalReminderScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutUserInput | GoalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutUserInput | GoalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutUserInput | GoalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type PokerTournamentEventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PokerTournamentEventCreateWithoutUserInput, PokerTournamentEventUncheckedCreateWithoutUserInput> | PokerTournamentEventCreateWithoutUserInput[] | PokerTournamentEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PokerTournamentEventCreateOrConnectWithoutUserInput | PokerTournamentEventCreateOrConnectWithoutUserInput[]
    upsert?: PokerTournamentEventUpsertWithWhereUniqueWithoutUserInput | PokerTournamentEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PokerTournamentEventCreateManyUserInputEnvelope
    set?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    disconnect?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    delete?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    connect?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    update?: PokerTournamentEventUpdateWithWhereUniqueWithoutUserInput | PokerTournamentEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PokerTournamentEventUpdateManyWithWhereWithoutUserInput | PokerTournamentEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PokerTournamentEventScalarWhereInput | PokerTournamentEventScalarWhereInput[]
  }

  export type PokerTournamentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PokerTournamentCreateWithoutUserInput, PokerTournamentUncheckedCreateWithoutUserInput> | PokerTournamentCreateWithoutUserInput[] | PokerTournamentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PokerTournamentCreateOrConnectWithoutUserInput | PokerTournamentCreateOrConnectWithoutUserInput[]
    upsert?: PokerTournamentUpsertWithWhereUniqueWithoutUserInput | PokerTournamentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PokerTournamentCreateManyUserInputEnvelope
    set?: PokerTournamentWhereUniqueInput | PokerTournamentWhereUniqueInput[]
    disconnect?: PokerTournamentWhereUniqueInput | PokerTournamentWhereUniqueInput[]
    delete?: PokerTournamentWhereUniqueInput | PokerTournamentWhereUniqueInput[]
    connect?: PokerTournamentWhereUniqueInput | PokerTournamentWhereUniqueInput[]
    update?: PokerTournamentUpdateWithWhereUniqueWithoutUserInput | PokerTournamentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PokerTournamentUpdateManyWithWhereWithoutUserInput | PokerTournamentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PokerTournamentScalarWhereInput | PokerTournamentScalarWhereInput[]
  }

  export type RolloverEntryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RolloverEntryCreateWithoutUserInput, RolloverEntryUncheckedCreateWithoutUserInput> | RolloverEntryCreateWithoutUserInput[] | RolloverEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RolloverEntryCreateOrConnectWithoutUserInput | RolloverEntryCreateOrConnectWithoutUserInput[]
    upsert?: RolloverEntryUpsertWithWhereUniqueWithoutUserInput | RolloverEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RolloverEntryCreateManyUserInputEnvelope
    set?: RolloverEntryWhereUniqueInput | RolloverEntryWhereUniqueInput[]
    disconnect?: RolloverEntryWhereUniqueInput | RolloverEntryWhereUniqueInput[]
    delete?: RolloverEntryWhereUniqueInput | RolloverEntryWhereUniqueInput[]
    connect?: RolloverEntryWhereUniqueInput | RolloverEntryWhereUniqueInput[]
    update?: RolloverEntryUpdateWithWhereUniqueWithoutUserInput | RolloverEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RolloverEntryUpdateManyWithWhereWithoutUserInput | RolloverEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RolloverEntryScalarWhereInput | RolloverEntryScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBudgetsInput = {
    create?: XOR<UserCreateWithoutBudgetsInput, UserUncheckedCreateWithoutBudgetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBudgetsInput
    connect?: UserWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutBudgetInput = {
    create?: XOR<TransactionCreateWithoutBudgetInput, TransactionUncheckedCreateWithoutBudgetInput> | TransactionCreateWithoutBudgetInput[] | TransactionUncheckedCreateWithoutBudgetInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutBudgetInput | TransactionCreateOrConnectWithoutBudgetInput[]
    createMany?: TransactionCreateManyBudgetInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutBudgetInput = {
    create?: XOR<TransactionCreateWithoutBudgetInput, TransactionUncheckedCreateWithoutBudgetInput> | TransactionCreateWithoutBudgetInput[] | TransactionUncheckedCreateWithoutBudgetInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutBudgetInput | TransactionCreateOrConnectWithoutBudgetInput[]
    createMany?: TransactionCreateManyBudgetInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumBudgetStatusFieldUpdateOperationsInput = {
    set?: $Enums.BudgetStatus
  }

  export type UserUpdateOneRequiredWithoutBudgetsNestedInput = {
    create?: XOR<UserCreateWithoutBudgetsInput, UserUncheckedCreateWithoutBudgetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBudgetsInput
    upsert?: UserUpsertWithoutBudgetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBudgetsInput, UserUpdateWithoutBudgetsInput>, UserUncheckedUpdateWithoutBudgetsInput>
  }

  export type TransactionUpdateManyWithoutBudgetNestedInput = {
    create?: XOR<TransactionCreateWithoutBudgetInput, TransactionUncheckedCreateWithoutBudgetInput> | TransactionCreateWithoutBudgetInput[] | TransactionUncheckedCreateWithoutBudgetInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutBudgetInput | TransactionCreateOrConnectWithoutBudgetInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutBudgetInput | TransactionUpsertWithWhereUniqueWithoutBudgetInput[]
    createMany?: TransactionCreateManyBudgetInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutBudgetInput | TransactionUpdateWithWhereUniqueWithoutBudgetInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutBudgetInput | TransactionUpdateManyWithWhereWithoutBudgetInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutBudgetNestedInput = {
    create?: XOR<TransactionCreateWithoutBudgetInput, TransactionUncheckedCreateWithoutBudgetInput> | TransactionCreateWithoutBudgetInput[] | TransactionUncheckedCreateWithoutBudgetInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutBudgetInput | TransactionCreateOrConnectWithoutBudgetInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutBudgetInput | TransactionUpsertWithWhereUniqueWithoutBudgetInput[]
    createMany?: TransactionCreateManyBudgetInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutBudgetInput | TransactionUpdateWithWhereUniqueWithoutBudgetInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutBudgetInput | TransactionUpdateManyWithWhereWithoutBudgetInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutSubcategoriesInput = {
    create?: XOR<CategoryCreateWithoutSubcategoriesInput, CategoryUncheckedCreateWithoutSubcategoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSubcategoriesInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<UserCreateWithoutCategoriesInput, UserUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoriesInput
    connect?: UserWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutCategoryInput = {
    create?: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput> | TransactionCreateWithoutCategoryInput[] | TransactionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCategoryInput | TransactionCreateOrConnectWithoutCategoryInput[]
    createMany?: TransactionCreateManyCategoryInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutSubcategoryInput = {
    create?: XOR<TransactionCreateWithoutSubcategoryInput, TransactionUncheckedCreateWithoutSubcategoryInput> | TransactionCreateWithoutSubcategoryInput[] | TransactionUncheckedCreateWithoutSubcategoryInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutSubcategoryInput | TransactionCreateOrConnectWithoutSubcategoryInput[]
    createMany?: TransactionCreateManySubcategoryInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput> | TransactionCreateWithoutCategoryInput[] | TransactionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCategoryInput | TransactionCreateOrConnectWithoutCategoryInput[]
    createMany?: TransactionCreateManyCategoryInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutSubcategoryInput = {
    create?: XOR<TransactionCreateWithoutSubcategoryInput, TransactionUncheckedCreateWithoutSubcategoryInput> | TransactionCreateWithoutSubcategoryInput[] | TransactionUncheckedCreateWithoutSubcategoryInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutSubcategoryInput | TransactionCreateOrConnectWithoutSubcategoryInput[]
    createMany?: TransactionCreateManySubcategoryInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type EnumCategoryTypeFieldUpdateOperationsInput = {
    set?: $Enums.CategoryType
  }

  export type CategoryUpdateOneWithoutSubcategoriesNestedInput = {
    create?: XOR<CategoryCreateWithoutSubcategoriesInput, CategoryUncheckedCreateWithoutSubcategoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSubcategoriesInput
    upsert?: CategoryUpsertWithoutSubcategoriesInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutSubcategoriesInput, CategoryUpdateWithoutSubcategoriesInput>, CategoryUncheckedUpdateWithoutSubcategoriesInput>
  }

  export type CategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type UserUpdateOneWithoutCategoriesNestedInput = {
    create?: XOR<UserCreateWithoutCategoriesInput, UserUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoriesInput
    upsert?: UserUpsertWithoutCategoriesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCategoriesInput, UserUpdateWithoutCategoriesInput>, UserUncheckedUpdateWithoutCategoriesInput>
  }

  export type TransactionUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput> | TransactionCreateWithoutCategoryInput[] | TransactionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCategoryInput | TransactionCreateOrConnectWithoutCategoryInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCategoryInput | TransactionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: TransactionCreateManyCategoryInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCategoryInput | TransactionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCategoryInput | TransactionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutSubcategoryNestedInput = {
    create?: XOR<TransactionCreateWithoutSubcategoryInput, TransactionUncheckedCreateWithoutSubcategoryInput> | TransactionCreateWithoutSubcategoryInput[] | TransactionUncheckedCreateWithoutSubcategoryInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutSubcategoryInput | TransactionCreateOrConnectWithoutSubcategoryInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutSubcategoryInput | TransactionUpsertWithWhereUniqueWithoutSubcategoryInput[]
    createMany?: TransactionCreateManySubcategoryInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutSubcategoryInput | TransactionUpdateWithWhereUniqueWithoutSubcategoryInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutSubcategoryInput | TransactionUpdateManyWithWhereWithoutSubcategoryInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput> | TransactionCreateWithoutCategoryInput[] | TransactionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCategoryInput | TransactionCreateOrConnectWithoutCategoryInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCategoryInput | TransactionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: TransactionCreateManyCategoryInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCategoryInput | TransactionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCategoryInput | TransactionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutSubcategoryNestedInput = {
    create?: XOR<TransactionCreateWithoutSubcategoryInput, TransactionUncheckedCreateWithoutSubcategoryInput> | TransactionCreateWithoutSubcategoryInput[] | TransactionUncheckedCreateWithoutSubcategoryInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutSubcategoryInput | TransactionCreateOrConnectWithoutSubcategoryInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutSubcategoryInput | TransactionUpsertWithWhereUniqueWithoutSubcategoryInput[]
    createMany?: TransactionCreateManySubcategoryInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutSubcategoryInput | TransactionUpdateWithWhereUniqueWithoutSubcategoryInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutSubcategoryInput | TransactionUpdateManyWithWhereWithoutSubcategoryInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type GoalContributionCreateNestedManyWithoutTransactionInput = {
    create?: XOR<GoalContributionCreateWithoutTransactionInput, GoalContributionUncheckedCreateWithoutTransactionInput> | GoalContributionCreateWithoutTransactionInput[] | GoalContributionUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: GoalContributionCreateOrConnectWithoutTransactionInput | GoalContributionCreateOrConnectWithoutTransactionInput[]
    createMany?: GoalContributionCreateManyTransactionInputEnvelope
    connect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
  }

  export type BudgetCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<BudgetCreateWithoutTransactionsInput, BudgetUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: BudgetCreateOrConnectWithoutTransactionsInput
    connect?: BudgetWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<CategoryCreateWithoutTransactionsInput, CategoryUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTransactionsInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutSubcategoryTransactionsInput = {
    create?: XOR<CategoryCreateWithoutSubcategoryTransactionsInput, CategoryUncheckedCreateWithoutSubcategoryTransactionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSubcategoryTransactionsInput
    connect?: CategoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type GoalContributionUncheckedCreateNestedManyWithoutTransactionInput = {
    create?: XOR<GoalContributionCreateWithoutTransactionInput, GoalContributionUncheckedCreateWithoutTransactionInput> | GoalContributionCreateWithoutTransactionInput[] | GoalContributionUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: GoalContributionCreateOrConnectWithoutTransactionInput | GoalContributionCreateOrConnectWithoutTransactionInput[]
    createMany?: GoalContributionCreateManyTransactionInputEnvelope
    connect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
  }

  export type EnumTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.TransactionType
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus | null
  }

  export type GoalContributionUpdateManyWithoutTransactionNestedInput = {
    create?: XOR<GoalContributionCreateWithoutTransactionInput, GoalContributionUncheckedCreateWithoutTransactionInput> | GoalContributionCreateWithoutTransactionInput[] | GoalContributionUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: GoalContributionCreateOrConnectWithoutTransactionInput | GoalContributionCreateOrConnectWithoutTransactionInput[]
    upsert?: GoalContributionUpsertWithWhereUniqueWithoutTransactionInput | GoalContributionUpsertWithWhereUniqueWithoutTransactionInput[]
    createMany?: GoalContributionCreateManyTransactionInputEnvelope
    set?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    disconnect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    delete?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    connect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    update?: GoalContributionUpdateWithWhereUniqueWithoutTransactionInput | GoalContributionUpdateWithWhereUniqueWithoutTransactionInput[]
    updateMany?: GoalContributionUpdateManyWithWhereWithoutTransactionInput | GoalContributionUpdateManyWithWhereWithoutTransactionInput[]
    deleteMany?: GoalContributionScalarWhereInput | GoalContributionScalarWhereInput[]
  }

  export type BudgetUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<BudgetCreateWithoutTransactionsInput, BudgetUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: BudgetCreateOrConnectWithoutTransactionsInput
    upsert?: BudgetUpsertWithoutTransactionsInput
    disconnect?: BudgetWhereInput | boolean
    delete?: BudgetWhereInput | boolean
    connect?: BudgetWhereUniqueInput
    update?: XOR<XOR<BudgetUpdateToOneWithWhereWithoutTransactionsInput, BudgetUpdateWithoutTransactionsInput>, BudgetUncheckedUpdateWithoutTransactionsInput>
  }

  export type CategoryUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<CategoryCreateWithoutTransactionsInput, CategoryUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTransactionsInput
    upsert?: CategoryUpsertWithoutTransactionsInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutTransactionsInput, CategoryUpdateWithoutTransactionsInput>, CategoryUncheckedUpdateWithoutTransactionsInput>
  }

  export type CategoryUpdateOneWithoutSubcategoryTransactionsNestedInput = {
    create?: XOR<CategoryCreateWithoutSubcategoryTransactionsInput, CategoryUncheckedCreateWithoutSubcategoryTransactionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSubcategoryTransactionsInput
    upsert?: CategoryUpsertWithoutSubcategoryTransactionsInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutSubcategoryTransactionsInput, CategoryUpdateWithoutSubcategoryTransactionsInput>, CategoryUncheckedUpdateWithoutSubcategoryTransactionsInput>
  }

  export type UserUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    upsert?: UserUpsertWithoutTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsInput, UserUpdateWithoutTransactionsInput>, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type GoalContributionUncheckedUpdateManyWithoutTransactionNestedInput = {
    create?: XOR<GoalContributionCreateWithoutTransactionInput, GoalContributionUncheckedCreateWithoutTransactionInput> | GoalContributionCreateWithoutTransactionInput[] | GoalContributionUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: GoalContributionCreateOrConnectWithoutTransactionInput | GoalContributionCreateOrConnectWithoutTransactionInput[]
    upsert?: GoalContributionUpsertWithWhereUniqueWithoutTransactionInput | GoalContributionUpsertWithWhereUniqueWithoutTransactionInput[]
    createMany?: GoalContributionCreateManyTransactionInputEnvelope
    set?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    disconnect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    delete?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    connect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    update?: GoalContributionUpdateWithWhereUniqueWithoutTransactionInput | GoalContributionUpdateWithWhereUniqueWithoutTransactionInput[]
    updateMany?: GoalContributionUpdateManyWithWhereWithoutTransactionInput | GoalContributionUpdateManyWithWhereWithoutTransactionInput[]
    deleteMany?: GoalContributionScalarWhereInput | GoalContributionScalarWhereInput[]
  }

  export type GoalContributionCreateNestedManyWithoutGoalInput = {
    create?: XOR<GoalContributionCreateWithoutGoalInput, GoalContributionUncheckedCreateWithoutGoalInput> | GoalContributionCreateWithoutGoalInput[] | GoalContributionUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalContributionCreateOrConnectWithoutGoalInput | GoalContributionCreateOrConnectWithoutGoalInput[]
    createMany?: GoalContributionCreateManyGoalInputEnvelope
    connect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
  }

  export type GoalReminderCreateNestedManyWithoutGoalInput = {
    create?: XOR<GoalReminderCreateWithoutGoalInput, GoalReminderUncheckedCreateWithoutGoalInput> | GoalReminderCreateWithoutGoalInput[] | GoalReminderUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalReminderCreateOrConnectWithoutGoalInput | GoalReminderCreateOrConnectWithoutGoalInput[]
    createMany?: GoalReminderCreateManyGoalInputEnvelope
    connect?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutGoalsInput = {
    create?: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalsInput
    connect?: UserWhereUniqueInput
  }

  export type GoalContributionUncheckedCreateNestedManyWithoutGoalInput = {
    create?: XOR<GoalContributionCreateWithoutGoalInput, GoalContributionUncheckedCreateWithoutGoalInput> | GoalContributionCreateWithoutGoalInput[] | GoalContributionUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalContributionCreateOrConnectWithoutGoalInput | GoalContributionCreateOrConnectWithoutGoalInput[]
    createMany?: GoalContributionCreateManyGoalInputEnvelope
    connect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
  }

  export type GoalReminderUncheckedCreateNestedManyWithoutGoalInput = {
    create?: XOR<GoalReminderCreateWithoutGoalInput, GoalReminderUncheckedCreateWithoutGoalInput> | GoalReminderCreateWithoutGoalInput[] | GoalReminderUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalReminderCreateOrConnectWithoutGoalInput | GoalReminderCreateOrConnectWithoutGoalInput[]
    createMany?: GoalReminderCreateManyGoalInputEnvelope
    connect?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
  }

  export type EnumGoalCategoryFieldUpdateOperationsInput = {
    set?: $Enums.GoalCategory
  }

  export type EnumGoalTypeFieldUpdateOperationsInput = {
    set?: $Enums.GoalType
  }

  export type EnumGoalPriorityFieldUpdateOperationsInput = {
    set?: $Enums.GoalPriority
  }

  export type GoalContributionUpdateManyWithoutGoalNestedInput = {
    create?: XOR<GoalContributionCreateWithoutGoalInput, GoalContributionUncheckedCreateWithoutGoalInput> | GoalContributionCreateWithoutGoalInput[] | GoalContributionUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalContributionCreateOrConnectWithoutGoalInput | GoalContributionCreateOrConnectWithoutGoalInput[]
    upsert?: GoalContributionUpsertWithWhereUniqueWithoutGoalInput | GoalContributionUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: GoalContributionCreateManyGoalInputEnvelope
    set?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    disconnect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    delete?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    connect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    update?: GoalContributionUpdateWithWhereUniqueWithoutGoalInput | GoalContributionUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: GoalContributionUpdateManyWithWhereWithoutGoalInput | GoalContributionUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: GoalContributionScalarWhereInput | GoalContributionScalarWhereInput[]
  }

  export type GoalReminderUpdateManyWithoutGoalNestedInput = {
    create?: XOR<GoalReminderCreateWithoutGoalInput, GoalReminderUncheckedCreateWithoutGoalInput> | GoalReminderCreateWithoutGoalInput[] | GoalReminderUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalReminderCreateOrConnectWithoutGoalInput | GoalReminderCreateOrConnectWithoutGoalInput[]
    upsert?: GoalReminderUpsertWithWhereUniqueWithoutGoalInput | GoalReminderUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: GoalReminderCreateManyGoalInputEnvelope
    set?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    disconnect?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    delete?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    connect?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    update?: GoalReminderUpdateWithWhereUniqueWithoutGoalInput | GoalReminderUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: GoalReminderUpdateManyWithWhereWithoutGoalInput | GoalReminderUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: GoalReminderScalarWhereInput | GoalReminderScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalsInput
    upsert?: UserUpsertWithoutGoalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGoalsInput, UserUpdateWithoutGoalsInput>, UserUncheckedUpdateWithoutGoalsInput>
  }

  export type GoalContributionUncheckedUpdateManyWithoutGoalNestedInput = {
    create?: XOR<GoalContributionCreateWithoutGoalInput, GoalContributionUncheckedCreateWithoutGoalInput> | GoalContributionCreateWithoutGoalInput[] | GoalContributionUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalContributionCreateOrConnectWithoutGoalInput | GoalContributionCreateOrConnectWithoutGoalInput[]
    upsert?: GoalContributionUpsertWithWhereUniqueWithoutGoalInput | GoalContributionUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: GoalContributionCreateManyGoalInputEnvelope
    set?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    disconnect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    delete?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    connect?: GoalContributionWhereUniqueInput | GoalContributionWhereUniqueInput[]
    update?: GoalContributionUpdateWithWhereUniqueWithoutGoalInput | GoalContributionUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: GoalContributionUpdateManyWithWhereWithoutGoalInput | GoalContributionUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: GoalContributionScalarWhereInput | GoalContributionScalarWhereInput[]
  }

  export type GoalReminderUncheckedUpdateManyWithoutGoalNestedInput = {
    create?: XOR<GoalReminderCreateWithoutGoalInput, GoalReminderUncheckedCreateWithoutGoalInput> | GoalReminderCreateWithoutGoalInput[] | GoalReminderUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalReminderCreateOrConnectWithoutGoalInput | GoalReminderCreateOrConnectWithoutGoalInput[]
    upsert?: GoalReminderUpsertWithWhereUniqueWithoutGoalInput | GoalReminderUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: GoalReminderCreateManyGoalInputEnvelope
    set?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    disconnect?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    delete?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    connect?: GoalReminderWhereUniqueInput | GoalReminderWhereUniqueInput[]
    update?: GoalReminderUpdateWithWhereUniqueWithoutGoalInput | GoalReminderUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: GoalReminderUpdateManyWithWhereWithoutGoalInput | GoalReminderUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: GoalReminderScalarWhereInput | GoalReminderScalarWhereInput[]
  }

  export type GoalCreateNestedOneWithoutContributionsInput = {
    create?: XOR<GoalCreateWithoutContributionsInput, GoalUncheckedCreateWithoutContributionsInput>
    connectOrCreate?: GoalCreateOrConnectWithoutContributionsInput
    connect?: GoalWhereUniqueInput
  }

  export type TransactionCreateNestedOneWithoutGoalContributionsInput = {
    create?: XOR<TransactionCreateWithoutGoalContributionsInput, TransactionUncheckedCreateWithoutGoalContributionsInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutGoalContributionsInput
    connect?: TransactionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGoalContributionsInput = {
    create?: XOR<UserCreateWithoutGoalContributionsInput, UserUncheckedCreateWithoutGoalContributionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalContributionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumContributionTypeFieldUpdateOperationsInput = {
    set?: $Enums.ContributionType
  }

  export type GoalUpdateOneRequiredWithoutContributionsNestedInput = {
    create?: XOR<GoalCreateWithoutContributionsInput, GoalUncheckedCreateWithoutContributionsInput>
    connectOrCreate?: GoalCreateOrConnectWithoutContributionsInput
    upsert?: GoalUpsertWithoutContributionsInput
    connect?: GoalWhereUniqueInput
    update?: XOR<XOR<GoalUpdateToOneWithWhereWithoutContributionsInput, GoalUpdateWithoutContributionsInput>, GoalUncheckedUpdateWithoutContributionsInput>
  }

  export type TransactionUpdateOneWithoutGoalContributionsNestedInput = {
    create?: XOR<TransactionCreateWithoutGoalContributionsInput, TransactionUncheckedCreateWithoutGoalContributionsInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutGoalContributionsInput
    upsert?: TransactionUpsertWithoutGoalContributionsInput
    disconnect?: TransactionWhereInput | boolean
    delete?: TransactionWhereInput | boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutGoalContributionsInput, TransactionUpdateWithoutGoalContributionsInput>, TransactionUncheckedUpdateWithoutGoalContributionsInput>
  }

  export type UserUpdateOneRequiredWithoutGoalContributionsNestedInput = {
    create?: XOR<UserCreateWithoutGoalContributionsInput, UserUncheckedCreateWithoutGoalContributionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalContributionsInput
    upsert?: UserUpsertWithoutGoalContributionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGoalContributionsInput, UserUpdateWithoutGoalContributionsInput>, UserUncheckedUpdateWithoutGoalContributionsInput>
  }

  export type GoalCreateNestedOneWithoutRemindersInput = {
    create?: XOR<GoalCreateWithoutRemindersInput, GoalUncheckedCreateWithoutRemindersInput>
    connectOrCreate?: GoalCreateOrConnectWithoutRemindersInput
    connect?: GoalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGoalRemindersInput = {
    create?: XOR<UserCreateWithoutGoalRemindersInput, UserUncheckedCreateWithoutGoalRemindersInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalRemindersInput
    connect?: UserWhereUniqueInput
  }

  export type EnumReminderTypeFieldUpdateOperationsInput = {
    set?: $Enums.ReminderType
  }

  export type EnumReminderFrequencyFieldUpdateOperationsInput = {
    set?: $Enums.ReminderFrequency
  }

  export type GoalUpdateOneRequiredWithoutRemindersNestedInput = {
    create?: XOR<GoalCreateWithoutRemindersInput, GoalUncheckedCreateWithoutRemindersInput>
    connectOrCreate?: GoalCreateOrConnectWithoutRemindersInput
    upsert?: GoalUpsertWithoutRemindersInput
    connect?: GoalWhereUniqueInput
    update?: XOR<XOR<GoalUpdateToOneWithWhereWithoutRemindersInput, GoalUpdateWithoutRemindersInput>, GoalUncheckedUpdateWithoutRemindersInput>
  }

  export type UserUpdateOneRequiredWithoutGoalRemindersNestedInput = {
    create?: XOR<UserCreateWithoutGoalRemindersInput, UserUncheckedCreateWithoutGoalRemindersInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalRemindersInput
    upsert?: UserUpsertWithoutGoalRemindersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGoalRemindersInput, UserUpdateWithoutGoalRemindersInput>, UserUncheckedUpdateWithoutGoalRemindersInput>
  }

  export type PokerTournamentEventCreateNestedManyWithoutTournamentInput = {
    create?: XOR<PokerTournamentEventCreateWithoutTournamentInput, PokerTournamentEventUncheckedCreateWithoutTournamentInput> | PokerTournamentEventCreateWithoutTournamentInput[] | PokerTournamentEventUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: PokerTournamentEventCreateOrConnectWithoutTournamentInput | PokerTournamentEventCreateOrConnectWithoutTournamentInput[]
    createMany?: PokerTournamentEventCreateManyTournamentInputEnvelope
    connect?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutPokerTournamentsInput = {
    create?: XOR<UserCreateWithoutPokerTournamentsInput, UserUncheckedCreateWithoutPokerTournamentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPokerTournamentsInput
    connect?: UserWhereUniqueInput
  }

  export type PokerTournamentEventUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<PokerTournamentEventCreateWithoutTournamentInput, PokerTournamentEventUncheckedCreateWithoutTournamentInput> | PokerTournamentEventCreateWithoutTournamentInput[] | PokerTournamentEventUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: PokerTournamentEventCreateOrConnectWithoutTournamentInput | PokerTournamentEventCreateOrConnectWithoutTournamentInput[]
    createMany?: PokerTournamentEventCreateManyTournamentInputEnvelope
    connect?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
  }

  export type PokerTournamentEventUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<PokerTournamentEventCreateWithoutTournamentInput, PokerTournamentEventUncheckedCreateWithoutTournamentInput> | PokerTournamentEventCreateWithoutTournamentInput[] | PokerTournamentEventUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: PokerTournamentEventCreateOrConnectWithoutTournamentInput | PokerTournamentEventCreateOrConnectWithoutTournamentInput[]
    upsert?: PokerTournamentEventUpsertWithWhereUniqueWithoutTournamentInput | PokerTournamentEventUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: PokerTournamentEventCreateManyTournamentInputEnvelope
    set?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    disconnect?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    delete?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    connect?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    update?: PokerTournamentEventUpdateWithWhereUniqueWithoutTournamentInput | PokerTournamentEventUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: PokerTournamentEventUpdateManyWithWhereWithoutTournamentInput | PokerTournamentEventUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: PokerTournamentEventScalarWhereInput | PokerTournamentEventScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutPokerTournamentsNestedInput = {
    create?: XOR<UserCreateWithoutPokerTournamentsInput, UserUncheckedCreateWithoutPokerTournamentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPokerTournamentsInput
    upsert?: UserUpsertWithoutPokerTournamentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPokerTournamentsInput, UserUpdateWithoutPokerTournamentsInput>, UserUncheckedUpdateWithoutPokerTournamentsInput>
  }

  export type PokerTournamentEventUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<PokerTournamentEventCreateWithoutTournamentInput, PokerTournamentEventUncheckedCreateWithoutTournamentInput> | PokerTournamentEventCreateWithoutTournamentInput[] | PokerTournamentEventUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: PokerTournamentEventCreateOrConnectWithoutTournamentInput | PokerTournamentEventCreateOrConnectWithoutTournamentInput[]
    upsert?: PokerTournamentEventUpsertWithWhereUniqueWithoutTournamentInput | PokerTournamentEventUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: PokerTournamentEventCreateManyTournamentInputEnvelope
    set?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    disconnect?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    delete?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    connect?: PokerTournamentEventWhereUniqueInput | PokerTournamentEventWhereUniqueInput[]
    update?: PokerTournamentEventUpdateWithWhereUniqueWithoutTournamentInput | PokerTournamentEventUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: PokerTournamentEventUpdateManyWithWhereWithoutTournamentInput | PokerTournamentEventUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: PokerTournamentEventScalarWhereInput | PokerTournamentEventScalarWhereInput[]
  }

  export type PokerTournamentCreateNestedOneWithoutEventsInput = {
    create?: XOR<PokerTournamentCreateWithoutEventsInput, PokerTournamentUncheckedCreateWithoutEventsInput>
    connectOrCreate?: PokerTournamentCreateOrConnectWithoutEventsInput
    connect?: PokerTournamentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPokerTournamentEventsInput = {
    create?: XOR<UserCreateWithoutPokerTournamentEventsInput, UserUncheckedCreateWithoutPokerTournamentEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPokerTournamentEventsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableEnumGameTypeFieldUpdateOperationsInput = {
    set?: $Enums.GameType | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PokerTournamentUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<PokerTournamentCreateWithoutEventsInput, PokerTournamentUncheckedCreateWithoutEventsInput>
    connectOrCreate?: PokerTournamentCreateOrConnectWithoutEventsInput
    upsert?: PokerTournamentUpsertWithoutEventsInput
    connect?: PokerTournamentWhereUniqueInput
    update?: XOR<XOR<PokerTournamentUpdateToOneWithWhereWithoutEventsInput, PokerTournamentUpdateWithoutEventsInput>, PokerTournamentUncheckedUpdateWithoutEventsInput>
  }

  export type UserUpdateOneRequiredWithoutPokerTournamentEventsNestedInput = {
    create?: XOR<UserCreateWithoutPokerTournamentEventsInput, UserUncheckedCreateWithoutPokerTournamentEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPokerTournamentEventsInput
    upsert?: UserUpsertWithoutPokerTournamentEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPokerTournamentEventsInput, UserUpdateWithoutPokerTournamentEventsInput>, UserUncheckedUpdateWithoutPokerTournamentEventsInput>
  }

  export type UserCreateNestedOneWithoutRolloverHistoryInput = {
    create?: XOR<UserCreateWithoutRolloverHistoryInput, UserUncheckedCreateWithoutRolloverHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolloverHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRolloverTypeFieldUpdateOperationsInput = {
    set?: $Enums.RolloverType
  }

  export type UserUpdateOneRequiredWithoutRolloverHistoryNestedInput = {
    create?: XOR<UserCreateWithoutRolloverHistoryInput, UserUncheckedCreateWithoutRolloverHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolloverHistoryInput
    upsert?: UserUpsertWithoutRolloverHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRolloverHistoryInput, UserUpdateWithoutRolloverHistoryInput>, UserUncheckedUpdateWithoutRolloverHistoryInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumIncomeFrequencyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.IncomeFrequency | EnumIncomeFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.IncomeFrequency[] | ListEnumIncomeFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.IncomeFrequency[] | ListEnumIncomeFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumIncomeFrequencyNullableFilter<$PrismaModel> | $Enums.IncomeFrequency | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumIncomeFrequencyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IncomeFrequency | EnumIncomeFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.IncomeFrequency[] | ListEnumIncomeFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.IncomeFrequency[] | ListEnumIncomeFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumIncomeFrequencyNullableWithAggregatesFilter<$PrismaModel> | $Enums.IncomeFrequency | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumIncomeFrequencyNullableFilter<$PrismaModel>
    _max?: NestedEnumIncomeFrequencyNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumBudgetStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BudgetStatus | EnumBudgetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BudgetStatus[] | ListEnumBudgetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BudgetStatus[] | ListEnumBudgetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBudgetStatusFilter<$PrismaModel> | $Enums.BudgetStatus
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumBudgetStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BudgetStatus | EnumBudgetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BudgetStatus[] | ListEnumBudgetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BudgetStatus[] | ListEnumBudgetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBudgetStatusWithAggregatesFilter<$PrismaModel> | $Enums.BudgetStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBudgetStatusFilter<$PrismaModel>
    _max?: NestedEnumBudgetStatusFilter<$PrismaModel>
  }

  export type NestedEnumCategoryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryType | EnumCategoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryTypeFilter<$PrismaModel> | $Enums.CategoryType
  }

  export type NestedEnumCategoryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryType | EnumCategoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryTypeWithAggregatesFilter<$PrismaModel> | $Enums.CategoryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryTypeFilter<$PrismaModel>
    _max?: NestedEnumCategoryTypeFilter<$PrismaModel>
  }

  export type NestedEnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPaymentStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentStatusNullableFilter<$PrismaModel> | $Enums.PaymentStatus | null
  }

  export type NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumGoalCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalCategory | EnumGoalCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.GoalCategory[] | ListEnumGoalCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalCategory[] | ListEnumGoalCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalCategoryFilter<$PrismaModel> | $Enums.GoalCategory
  }

  export type NestedEnumGoalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalType | EnumGoalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalTypeFilter<$PrismaModel> | $Enums.GoalType
  }

  export type NestedEnumGoalPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalPriority | EnumGoalPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.GoalPriority[] | ListEnumGoalPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalPriority[] | ListEnumGoalPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalPriorityFilter<$PrismaModel> | $Enums.GoalPriority
  }

  export type NestedEnumGoalCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalCategory | EnumGoalCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.GoalCategory[] | ListEnumGoalCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalCategory[] | ListEnumGoalCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalCategoryWithAggregatesFilter<$PrismaModel> | $Enums.GoalCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGoalCategoryFilter<$PrismaModel>
    _max?: NestedEnumGoalCategoryFilter<$PrismaModel>
  }

  export type NestedEnumGoalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalType | EnumGoalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalType[] | ListEnumGoalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalTypeWithAggregatesFilter<$PrismaModel> | $Enums.GoalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGoalTypeFilter<$PrismaModel>
    _max?: NestedEnumGoalTypeFilter<$PrismaModel>
  }

  export type NestedEnumGoalPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GoalPriority | EnumGoalPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.GoalPriority[] | ListEnumGoalPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.GoalPriority[] | ListEnumGoalPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumGoalPriorityWithAggregatesFilter<$PrismaModel> | $Enums.GoalPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGoalPriorityFilter<$PrismaModel>
    _max?: NestedEnumGoalPriorityFilter<$PrismaModel>
  }

  export type NestedEnumContributionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContributionType | EnumContributionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContributionType[] | ListEnumContributionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContributionType[] | ListEnumContributionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContributionTypeFilter<$PrismaModel> | $Enums.ContributionType
  }

  export type NestedEnumContributionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContributionType | EnumContributionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContributionType[] | ListEnumContributionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContributionType[] | ListEnumContributionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContributionTypeWithAggregatesFilter<$PrismaModel> | $Enums.ContributionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContributionTypeFilter<$PrismaModel>
    _max?: NestedEnumContributionTypeFilter<$PrismaModel>
  }

  export type NestedEnumReminderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReminderType | EnumReminderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReminderType[] | ListEnumReminderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReminderType[] | ListEnumReminderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReminderTypeFilter<$PrismaModel> | $Enums.ReminderType
  }

  export type NestedEnumReminderFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.ReminderFrequency | EnumReminderFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.ReminderFrequency[] | ListEnumReminderFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReminderFrequency[] | ListEnumReminderFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumReminderFrequencyFilter<$PrismaModel> | $Enums.ReminderFrequency
  }

  export type NestedEnumReminderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReminderType | EnumReminderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReminderType[] | ListEnumReminderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReminderType[] | ListEnumReminderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReminderTypeWithAggregatesFilter<$PrismaModel> | $Enums.ReminderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReminderTypeFilter<$PrismaModel>
    _max?: NestedEnumReminderTypeFilter<$PrismaModel>
  }

  export type NestedEnumReminderFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReminderFrequency | EnumReminderFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.ReminderFrequency[] | ListEnumReminderFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReminderFrequency[] | ListEnumReminderFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumReminderFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.ReminderFrequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReminderFrequencyFilter<$PrismaModel>
    _max?: NestedEnumReminderFrequencyFilter<$PrismaModel>
  }

  export type NestedEnumGameTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.GameType | EnumGameTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.GameType[] | ListEnumGameTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.GameType[] | ListEnumGameTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGameTypeNullableFilter<$PrismaModel> | $Enums.GameType | null
  }

  export type NestedEnumGameTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameType | EnumGameTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.GameType[] | ListEnumGameTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.GameType[] | ListEnumGameTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGameTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.GameType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGameTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumGameTypeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumRolloverTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RolloverType | EnumRolloverTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RolloverType[] | ListEnumRolloverTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RolloverType[] | ListEnumRolloverTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRolloverTypeFilter<$PrismaModel> | $Enums.RolloverType
  }

  export type NestedEnumRolloverTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RolloverType | EnumRolloverTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RolloverType[] | ListEnumRolloverTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RolloverType[] | ListEnumRolloverTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRolloverTypeWithAggregatesFilter<$PrismaModel> | $Enums.RolloverType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolloverTypeFilter<$PrismaModel>
    _max?: NestedEnumRolloverTypeFilter<$PrismaModel>
  }

  export type BudgetCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    startDate: Date | string
    endDate?: Date | string | null
    isRecurring?: boolean
    status?: $Enums.BudgetStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionCreateNestedManyWithoutBudgetInput
  }

  export type BudgetUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    startDate: Date | string
    endDate?: Date | string | null
    isRecurring?: boolean
    status?: $Enums.BudgetStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutBudgetInput
  }

  export type BudgetCreateOrConnectWithoutUserInput = {
    where: BudgetWhereUniqueInput
    create: XOR<BudgetCreateWithoutUserInput, BudgetUncheckedCreateWithoutUserInput>
  }

  export type BudgetCreateManyUserInputEnvelope = {
    data: BudgetCreateManyUserInput | BudgetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutSubcategoriesInput
    subcategories?: CategoryCreateNestedManyWithoutParentInput
    transactions?: TransactionCreateNestedManyWithoutCategoryInput
    subcategoryTransactions?: TransactionCreateNestedManyWithoutSubcategoryInput
  }

  export type CategoryUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    subcategories?: CategoryUncheckedCreateNestedManyWithoutParentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
    subcategoryTransactions?: TransactionUncheckedCreateNestedManyWithoutSubcategoryInput
  }

  export type CategoryCreateOrConnectWithoutUserInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput>
  }

  export type CategoryCreateManyUserInputEnvelope = {
    data: CategoryCreateManyUserInput | CategoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GoalContributionCreateWithoutUserInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date?: Date | string
    description?: string | null
    type?: $Enums.ContributionType
    goal: GoalCreateNestedOneWithoutContributionsInput
    transaction?: TransactionCreateNestedOneWithoutGoalContributionsInput
  }

  export type GoalContributionUncheckedCreateWithoutUserInput = {
    id?: string
    goalId: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date?: Date | string
    description?: string | null
    type?: $Enums.ContributionType
    transactionId?: string | null
  }

  export type GoalContributionCreateOrConnectWithoutUserInput = {
    where: GoalContributionWhereUniqueInput
    create: XOR<GoalContributionCreateWithoutUserInput, GoalContributionUncheckedCreateWithoutUserInput>
  }

  export type GoalContributionCreateManyUserInputEnvelope = {
    data: GoalContributionCreateManyUserInput | GoalContributionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GoalReminderCreateWithoutUserInput = {
    id?: string
    type: $Enums.ReminderType
    frequency: $Enums.ReminderFrequency
    isActive?: boolean
    lastSent?: Date | string | null
    nextDue?: Date | string | null
    message?: string | null
    createdAt?: Date | string
    goal: GoalCreateNestedOneWithoutRemindersInput
  }

  export type GoalReminderUncheckedCreateWithoutUserInput = {
    id?: string
    goalId: string
    type: $Enums.ReminderType
    frequency: $Enums.ReminderFrequency
    isActive?: boolean
    lastSent?: Date | string | null
    nextDue?: Date | string | null
    message?: string | null
    createdAt?: Date | string
  }

  export type GoalReminderCreateOrConnectWithoutUserInput = {
    where: GoalReminderWhereUniqueInput
    create: XOR<GoalReminderCreateWithoutUserInput, GoalReminderUncheckedCreateWithoutUserInput>
  }

  export type GoalReminderCreateManyUserInputEnvelope = {
    data: GoalReminderCreateManyUserInput | GoalReminderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GoalCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    targetAmount: Decimal | DecimalJsLike | number | string
    currentAmount?: Decimal | DecimalJsLike | number | string
    currency?: string
    targetDate?: Date | string | null
    category: $Enums.GoalCategory
    type?: $Enums.GoalType
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    priority?: $Enums.GoalPriority
    autoContribute?: boolean
    monthlyTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    originalCategory?: string | null
    contributions?: GoalContributionCreateNestedManyWithoutGoalInput
    reminders?: GoalReminderCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    targetAmount: Decimal | DecimalJsLike | number | string
    currentAmount?: Decimal | DecimalJsLike | number | string
    currency?: string
    targetDate?: Date | string | null
    category: $Enums.GoalCategory
    type?: $Enums.GoalType
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    priority?: $Enums.GoalPriority
    autoContribute?: boolean
    monthlyTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    originalCategory?: string | null
    contributions?: GoalContributionUncheckedCreateNestedManyWithoutGoalInput
    reminders?: GoalReminderUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutUserInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput>
  }

  export type GoalCreateManyUserInputEnvelope = {
    data: GoalCreateManyUserInput | GoalCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PokerTournamentEventCreateWithoutUserInput = {
    id?: string
    eventName: string
    eventNumber?: string | null
    buyIn: Decimal | DecimalJsLike | number | string
    winnings?: Decimal | DecimalJsLike | number | string
    eventDate: Date | string
    gameType?: $Enums.GameType | null
    fieldSize?: number | null
    finishPosition?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reBuyAmount?: Decimal | DecimalJsLike | number | string | null
    reBuys?: number | null
    startingStack?: number | null
    isClosed?: boolean
    tournament: PokerTournamentCreateNestedOneWithoutEventsInput
  }

  export type PokerTournamentEventUncheckedCreateWithoutUserInput = {
    id?: string
    tournamentId: string
    eventName: string
    eventNumber?: string | null
    buyIn: Decimal | DecimalJsLike | number | string
    winnings?: Decimal | DecimalJsLike | number | string
    eventDate: Date | string
    gameType?: $Enums.GameType | null
    fieldSize?: number | null
    finishPosition?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reBuyAmount?: Decimal | DecimalJsLike | number | string | null
    reBuys?: number | null
    startingStack?: number | null
    isClosed?: boolean
  }

  export type PokerTournamentEventCreateOrConnectWithoutUserInput = {
    where: PokerTournamentEventWhereUniqueInput
    create: XOR<PokerTournamentEventCreateWithoutUserInput, PokerTournamentEventUncheckedCreateWithoutUserInput>
  }

  export type PokerTournamentEventCreateManyUserInputEnvelope = {
    data: PokerTournamentEventCreateManyUserInput | PokerTournamentEventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PokerTournamentCreateWithoutUserInput = {
    id?: string
    name: string
    location: string
    venue?: string | null
    dateStart: Date | string
    dateEnd?: Date | string | null
    accommodationCost?: Decimal | DecimalJsLike | number | string
    foodBudget?: Decimal | DecimalJsLike | number | string
    otherExpenses?: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: PokerTournamentEventCreateNestedManyWithoutTournamentInput
  }

  export type PokerTournamentUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    location: string
    venue?: string | null
    dateStart: Date | string
    dateEnd?: Date | string | null
    accommodationCost?: Decimal | DecimalJsLike | number | string
    foodBudget?: Decimal | DecimalJsLike | number | string
    otherExpenses?: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: PokerTournamentEventUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type PokerTournamentCreateOrConnectWithoutUserInput = {
    where: PokerTournamentWhereUniqueInput
    create: XOR<PokerTournamentCreateWithoutUserInput, PokerTournamentUncheckedCreateWithoutUserInput>
  }

  export type PokerTournamentCreateManyUserInputEnvelope = {
    data: PokerTournamentCreateManyUserInput | PokerTournamentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RolloverEntryCreateWithoutUserInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    date?: Date | string
    type: $Enums.RolloverType
    periodStart: Date | string
    periodEnd: Date | string
    description?: string | null
  }

  export type RolloverEntryUncheckedCreateWithoutUserInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    date?: Date | string
    type: $Enums.RolloverType
    periodStart: Date | string
    periodEnd: Date | string
    description?: string | null
  }

  export type RolloverEntryCreateOrConnectWithoutUserInput = {
    where: RolloverEntryWhereUniqueInput
    create: XOR<RolloverEntryCreateWithoutUserInput, RolloverEntryUncheckedCreateWithoutUserInput>
  }

  export type RolloverEntryCreateManyUserInputEnvelope = {
    data: RolloverEntryCreateManyUserInput | RolloverEntryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutUserInput = {
    id?: string
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
    goalContributions?: GoalContributionCreateNestedManyWithoutTransactionInput
    budget?: BudgetCreateNestedOneWithoutTransactionsInput
    category?: CategoryCreateNestedOneWithoutTransactionsInput
    subcategory?: CategoryCreateNestedOneWithoutSubcategoryTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutUserInput = {
    id?: string
    budgetId?: string | null
    categoryId?: string | null
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    subcategoryId?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionCreateManyUserInputEnvelope = {
    data: TransactionCreateManyUserInput | TransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BudgetUpsertWithWhereUniqueWithoutUserInput = {
    where: BudgetWhereUniqueInput
    update: XOR<BudgetUpdateWithoutUserInput, BudgetUncheckedUpdateWithoutUserInput>
    create: XOR<BudgetCreateWithoutUserInput, BudgetUncheckedCreateWithoutUserInput>
  }

  export type BudgetUpdateWithWhereUniqueWithoutUserInput = {
    where: BudgetWhereUniqueInput
    data: XOR<BudgetUpdateWithoutUserInput, BudgetUncheckedUpdateWithoutUserInput>
  }

  export type BudgetUpdateManyWithWhereWithoutUserInput = {
    where: BudgetScalarWhereInput
    data: XOR<BudgetUpdateManyMutationInput, BudgetUncheckedUpdateManyWithoutUserInput>
  }

  export type BudgetScalarWhereInput = {
    AND?: BudgetScalarWhereInput | BudgetScalarWhereInput[]
    OR?: BudgetScalarWhereInput[]
    NOT?: BudgetScalarWhereInput | BudgetScalarWhereInput[]
    id?: StringFilter<"Budget"> | string
    userId?: StringFilter<"Budget"> | string
    name?: StringFilter<"Budget"> | string
    description?: StringNullableFilter<"Budget"> | string | null
    totalAmount?: DecimalFilter<"Budget"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Budget"> | string
    startDate?: DateTimeFilter<"Budget"> | Date | string
    endDate?: DateTimeNullableFilter<"Budget"> | Date | string | null
    isRecurring?: BoolFilter<"Budget"> | boolean
    status?: EnumBudgetStatusFilter<"Budget"> | $Enums.BudgetStatus
    createdAt?: DateTimeFilter<"Budget"> | Date | string
    updatedAt?: DateTimeFilter<"Budget"> | Date | string
  }

  export type CategoryUpsertWithWhereUniqueWithoutUserInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutUserInput, CategoryUncheckedUpdateWithoutUserInput>
    create: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutUserInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutUserInput, CategoryUncheckedUpdateWithoutUserInput>
  }

  export type CategoryUpdateManyWithWhereWithoutUserInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutUserInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: StringFilter<"Category"> | string
    userId?: StringNullableFilter<"Category"> | string | null
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    icon?: StringNullableFilter<"Category"> | string | null
    color?: StringNullableFilter<"Category"> | string | null
    type?: EnumCategoryTypeFilter<"Category"> | $Enums.CategoryType
    isSystem?: BoolFilter<"Category"> | boolean
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parentId?: StringNullableFilter<"Category"> | string | null
  }

  export type GoalContributionUpsertWithWhereUniqueWithoutUserInput = {
    where: GoalContributionWhereUniqueInput
    update: XOR<GoalContributionUpdateWithoutUserInput, GoalContributionUncheckedUpdateWithoutUserInput>
    create: XOR<GoalContributionCreateWithoutUserInput, GoalContributionUncheckedCreateWithoutUserInput>
  }

  export type GoalContributionUpdateWithWhereUniqueWithoutUserInput = {
    where: GoalContributionWhereUniqueInput
    data: XOR<GoalContributionUpdateWithoutUserInput, GoalContributionUncheckedUpdateWithoutUserInput>
  }

  export type GoalContributionUpdateManyWithWhereWithoutUserInput = {
    where: GoalContributionScalarWhereInput
    data: XOR<GoalContributionUpdateManyMutationInput, GoalContributionUncheckedUpdateManyWithoutUserInput>
  }

  export type GoalContributionScalarWhereInput = {
    AND?: GoalContributionScalarWhereInput | GoalContributionScalarWhereInput[]
    OR?: GoalContributionScalarWhereInput[]
    NOT?: GoalContributionScalarWhereInput | GoalContributionScalarWhereInput[]
    id?: StringFilter<"GoalContribution"> | string
    goalId?: StringFilter<"GoalContribution"> | string
    userId?: StringFilter<"GoalContribution"> | string
    amount?: DecimalFilter<"GoalContribution"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"GoalContribution"> | string
    date?: DateTimeFilter<"GoalContribution"> | Date | string
    description?: StringNullableFilter<"GoalContribution"> | string | null
    type?: EnumContributionTypeFilter<"GoalContribution"> | $Enums.ContributionType
    transactionId?: StringNullableFilter<"GoalContribution"> | string | null
  }

  export type GoalReminderUpsertWithWhereUniqueWithoutUserInput = {
    where: GoalReminderWhereUniqueInput
    update: XOR<GoalReminderUpdateWithoutUserInput, GoalReminderUncheckedUpdateWithoutUserInput>
    create: XOR<GoalReminderCreateWithoutUserInput, GoalReminderUncheckedCreateWithoutUserInput>
  }

  export type GoalReminderUpdateWithWhereUniqueWithoutUserInput = {
    where: GoalReminderWhereUniqueInput
    data: XOR<GoalReminderUpdateWithoutUserInput, GoalReminderUncheckedUpdateWithoutUserInput>
  }

  export type GoalReminderUpdateManyWithWhereWithoutUserInput = {
    where: GoalReminderScalarWhereInput
    data: XOR<GoalReminderUpdateManyMutationInput, GoalReminderUncheckedUpdateManyWithoutUserInput>
  }

  export type GoalReminderScalarWhereInput = {
    AND?: GoalReminderScalarWhereInput | GoalReminderScalarWhereInput[]
    OR?: GoalReminderScalarWhereInput[]
    NOT?: GoalReminderScalarWhereInput | GoalReminderScalarWhereInput[]
    id?: StringFilter<"GoalReminder"> | string
    goalId?: StringFilter<"GoalReminder"> | string
    userId?: StringFilter<"GoalReminder"> | string
    type?: EnumReminderTypeFilter<"GoalReminder"> | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFilter<"GoalReminder"> | $Enums.ReminderFrequency
    isActive?: BoolFilter<"GoalReminder"> | boolean
    lastSent?: DateTimeNullableFilter<"GoalReminder"> | Date | string | null
    nextDue?: DateTimeNullableFilter<"GoalReminder"> | Date | string | null
    message?: StringNullableFilter<"GoalReminder"> | string | null
    createdAt?: DateTimeFilter<"GoalReminder"> | Date | string
  }

  export type GoalUpsertWithWhereUniqueWithoutUserInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutUserInput, GoalUncheckedUpdateWithoutUserInput>
    create: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutUserInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutUserInput, GoalUncheckedUpdateWithoutUserInput>
  }

  export type GoalUpdateManyWithWhereWithoutUserInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutUserInput>
  }

  export type GoalScalarWhereInput = {
    AND?: GoalScalarWhereInput | GoalScalarWhereInput[]
    OR?: GoalScalarWhereInput[]
    NOT?: GoalScalarWhereInput | GoalScalarWhereInput[]
    id?: StringFilter<"Goal"> | string
    userId?: StringFilter<"Goal"> | string
    name?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    targetAmount?: DecimalFilter<"Goal"> | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFilter<"Goal"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Goal"> | string
    targetDate?: DateTimeNullableFilter<"Goal"> | Date | string | null
    category?: EnumGoalCategoryFilter<"Goal"> | $Enums.GoalCategory
    type?: EnumGoalTypeFilter<"Goal"> | $Enums.GoalType
    isActive?: BoolFilter<"Goal"> | boolean
    isCompleted?: BoolFilter<"Goal"> | boolean
    completedAt?: DateTimeNullableFilter<"Goal"> | Date | string | null
    priority?: EnumGoalPriorityFilter<"Goal"> | $Enums.GoalPriority
    autoContribute?: BoolFilter<"Goal"> | boolean
    monthlyTarget?: DecimalNullableFilter<"Goal"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    originalCategory?: StringNullableFilter<"Goal"> | string | null
  }

  export type PokerTournamentEventUpsertWithWhereUniqueWithoutUserInput = {
    where: PokerTournamentEventWhereUniqueInput
    update: XOR<PokerTournamentEventUpdateWithoutUserInput, PokerTournamentEventUncheckedUpdateWithoutUserInput>
    create: XOR<PokerTournamentEventCreateWithoutUserInput, PokerTournamentEventUncheckedCreateWithoutUserInput>
  }

  export type PokerTournamentEventUpdateWithWhereUniqueWithoutUserInput = {
    where: PokerTournamentEventWhereUniqueInput
    data: XOR<PokerTournamentEventUpdateWithoutUserInput, PokerTournamentEventUncheckedUpdateWithoutUserInput>
  }

  export type PokerTournamentEventUpdateManyWithWhereWithoutUserInput = {
    where: PokerTournamentEventScalarWhereInput
    data: XOR<PokerTournamentEventUpdateManyMutationInput, PokerTournamentEventUncheckedUpdateManyWithoutUserInput>
  }

  export type PokerTournamentEventScalarWhereInput = {
    AND?: PokerTournamentEventScalarWhereInput | PokerTournamentEventScalarWhereInput[]
    OR?: PokerTournamentEventScalarWhereInput[]
    NOT?: PokerTournamentEventScalarWhereInput | PokerTournamentEventScalarWhereInput[]
    id?: StringFilter<"PokerTournamentEvent"> | string
    tournamentId?: StringFilter<"PokerTournamentEvent"> | string
    userId?: StringFilter<"PokerTournamentEvent"> | string
    eventName?: StringFilter<"PokerTournamentEvent"> | string
    eventNumber?: StringNullableFilter<"PokerTournamentEvent"> | string | null
    buyIn?: DecimalFilter<"PokerTournamentEvent"> | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFilter<"PokerTournamentEvent"> | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFilter<"PokerTournamentEvent"> | Date | string
    gameType?: EnumGameTypeNullableFilter<"PokerTournamentEvent"> | $Enums.GameType | null
    fieldSize?: IntNullableFilter<"PokerTournamentEvent"> | number | null
    finishPosition?: IntNullableFilter<"PokerTournamentEvent"> | number | null
    notes?: StringNullableFilter<"PokerTournamentEvent"> | string | null
    createdAt?: DateTimeFilter<"PokerTournamentEvent"> | Date | string
    updatedAt?: DateTimeFilter<"PokerTournamentEvent"> | Date | string
    reBuyAmount?: DecimalNullableFilter<"PokerTournamentEvent"> | Decimal | DecimalJsLike | number | string | null
    reBuys?: IntNullableFilter<"PokerTournamentEvent"> | number | null
    startingStack?: IntNullableFilter<"PokerTournamentEvent"> | number | null
    isClosed?: BoolFilter<"PokerTournamentEvent"> | boolean
  }

  export type PokerTournamentUpsertWithWhereUniqueWithoutUserInput = {
    where: PokerTournamentWhereUniqueInput
    update: XOR<PokerTournamentUpdateWithoutUserInput, PokerTournamentUncheckedUpdateWithoutUserInput>
    create: XOR<PokerTournamentCreateWithoutUserInput, PokerTournamentUncheckedCreateWithoutUserInput>
  }

  export type PokerTournamentUpdateWithWhereUniqueWithoutUserInput = {
    where: PokerTournamentWhereUniqueInput
    data: XOR<PokerTournamentUpdateWithoutUserInput, PokerTournamentUncheckedUpdateWithoutUserInput>
  }

  export type PokerTournamentUpdateManyWithWhereWithoutUserInput = {
    where: PokerTournamentScalarWhereInput
    data: XOR<PokerTournamentUpdateManyMutationInput, PokerTournamentUncheckedUpdateManyWithoutUserInput>
  }

  export type PokerTournamentScalarWhereInput = {
    AND?: PokerTournamentScalarWhereInput | PokerTournamentScalarWhereInput[]
    OR?: PokerTournamentScalarWhereInput[]
    NOT?: PokerTournamentScalarWhereInput | PokerTournamentScalarWhereInput[]
    id?: StringFilter<"PokerTournament"> | string
    userId?: StringFilter<"PokerTournament"> | string
    name?: StringFilter<"PokerTournament"> | string
    location?: StringFilter<"PokerTournament"> | string
    venue?: StringNullableFilter<"PokerTournament"> | string | null
    dateStart?: DateTimeFilter<"PokerTournament"> | Date | string
    dateEnd?: DateTimeNullableFilter<"PokerTournament"> | Date | string | null
    accommodationCost?: DecimalFilter<"PokerTournament"> | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalFilter<"PokerTournament"> | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalFilter<"PokerTournament"> | Decimal | DecimalJsLike | number | string
    notes?: StringNullableFilter<"PokerTournament"> | string | null
    createdAt?: DateTimeFilter<"PokerTournament"> | Date | string
    updatedAt?: DateTimeFilter<"PokerTournament"> | Date | string
  }

  export type RolloverEntryUpsertWithWhereUniqueWithoutUserInput = {
    where: RolloverEntryWhereUniqueInput
    update: XOR<RolloverEntryUpdateWithoutUserInput, RolloverEntryUncheckedUpdateWithoutUserInput>
    create: XOR<RolloverEntryCreateWithoutUserInput, RolloverEntryUncheckedCreateWithoutUserInput>
  }

  export type RolloverEntryUpdateWithWhereUniqueWithoutUserInput = {
    where: RolloverEntryWhereUniqueInput
    data: XOR<RolloverEntryUpdateWithoutUserInput, RolloverEntryUncheckedUpdateWithoutUserInput>
  }

  export type RolloverEntryUpdateManyWithWhereWithoutUserInput = {
    where: RolloverEntryScalarWhereInput
    data: XOR<RolloverEntryUpdateManyMutationInput, RolloverEntryUncheckedUpdateManyWithoutUserInput>
  }

  export type RolloverEntryScalarWhereInput = {
    AND?: RolloverEntryScalarWhereInput | RolloverEntryScalarWhereInput[]
    OR?: RolloverEntryScalarWhereInput[]
    NOT?: RolloverEntryScalarWhereInput | RolloverEntryScalarWhereInput[]
    id?: StringFilter<"RolloverEntry"> | string
    userId?: StringFilter<"RolloverEntry"> | string
    amount?: DecimalFilter<"RolloverEntry"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"RolloverEntry"> | Date | string
    type?: EnumRolloverTypeFilter<"RolloverEntry"> | $Enums.RolloverType
    periodStart?: DateTimeFilter<"RolloverEntry"> | Date | string
    periodEnd?: DateTimeFilter<"RolloverEntry"> | Date | string
    description?: StringNullableFilter<"RolloverEntry"> | string | null
  }

  export type TransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    userId?: StringFilter<"Transaction"> | string
    budgetId?: StringNullableFilter<"Transaction"> | string | null
    categoryId?: StringNullableFilter<"Transaction"> | string | null
    description?: StringFilter<"Transaction"> | string
    amount?: DecimalFilter<"Transaction"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Transaction"> | string
    date?: DateTimeFilter<"Transaction"> | Date | string
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    isAICategorized?: BoolFilter<"Transaction"> | boolean
    aiConfidence?: FloatNullableFilter<"Transaction"> | number | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    location?: StringNullableFilter<"Transaction"> | string | null
    merchantName?: StringNullableFilter<"Transaction"> | string | null
    notes?: StringNullableFilter<"Transaction"> | string | null
    recurrence?: StringNullableFilter<"Transaction"> | string | null
    subcategoryId?: StringNullableFilter<"Transaction"> | string | null
    dueDate?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    status?: EnumPaymentStatusNullableFilter<"Transaction"> | $Enums.PaymentStatus | null
  }

  export type UserCreateWithoutBudgetsInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    categories?: CategoryCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBudgetsInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentUncheckedCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBudgetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBudgetsInput, UserUncheckedCreateWithoutBudgetsInput>
  }

  export type TransactionCreateWithoutBudgetInput = {
    id?: string
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
    goalContributions?: GoalContributionCreateNestedManyWithoutTransactionInput
    category?: CategoryCreateNestedOneWithoutTransactionsInput
    subcategory?: CategoryCreateNestedOneWithoutSubcategoryTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutBudgetInput = {
    id?: string
    userId: string
    categoryId?: string | null
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    subcategoryId?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutBudgetInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutBudgetInput, TransactionUncheckedCreateWithoutBudgetInput>
  }

  export type TransactionCreateManyBudgetInputEnvelope = {
    data: TransactionCreateManyBudgetInput | TransactionCreateManyBudgetInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBudgetsInput = {
    update: XOR<UserUpdateWithoutBudgetsInput, UserUncheckedUpdateWithoutBudgetsInput>
    create: XOR<UserCreateWithoutBudgetsInput, UserUncheckedCreateWithoutBudgetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBudgetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBudgetsInput, UserUncheckedUpdateWithoutBudgetsInput>
  }

  export type UserUpdateWithoutBudgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: CategoryUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBudgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUncheckedUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutBudgetInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutBudgetInput, TransactionUncheckedUpdateWithoutBudgetInput>
    create: XOR<TransactionCreateWithoutBudgetInput, TransactionUncheckedCreateWithoutBudgetInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutBudgetInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutBudgetInput, TransactionUncheckedUpdateWithoutBudgetInput>
  }

  export type TransactionUpdateManyWithWhereWithoutBudgetInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutBudgetInput>
  }

  export type CategoryCreateWithoutSubcategoriesInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutSubcategoriesInput
    user?: UserCreateNestedOneWithoutCategoriesInput
    transactions?: TransactionCreateNestedManyWithoutCategoryInput
    subcategoryTransactions?: TransactionCreateNestedManyWithoutSubcategoryInput
  }

  export type CategoryUncheckedCreateWithoutSubcategoriesInput = {
    id?: string
    userId?: string | null
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
    subcategoryTransactions?: TransactionUncheckedCreateNestedManyWithoutSubcategoryInput
  }

  export type CategoryCreateOrConnectWithoutSubcategoriesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutSubcategoriesInput, CategoryUncheckedCreateWithoutSubcategoriesInput>
  }

  export type CategoryCreateWithoutParentInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subcategories?: CategoryCreateNestedManyWithoutParentInput
    user?: UserCreateNestedOneWithoutCategoriesInput
    transactions?: TransactionCreateNestedManyWithoutCategoryInput
    subcategoryTransactions?: TransactionCreateNestedManyWithoutSubcategoryInput
  }

  export type CategoryUncheckedCreateWithoutParentInput = {
    id?: string
    userId?: string | null
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subcategories?: CategoryUncheckedCreateNestedManyWithoutParentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
    subcategoryTransactions?: TransactionUncheckedCreateNestedManyWithoutSubcategoryInput
  }

  export type CategoryCreateOrConnectWithoutParentInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryCreateManyParentInputEnvelope = {
    data: CategoryCreateManyParentInput | CategoryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCategoriesInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCategoriesInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentUncheckedCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCategoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCategoriesInput, UserUncheckedCreateWithoutCategoriesInput>
  }

  export type TransactionCreateWithoutCategoryInput = {
    id?: string
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
    goalContributions?: GoalContributionCreateNestedManyWithoutTransactionInput
    budget?: BudgetCreateNestedOneWithoutTransactionsInput
    subcategory?: CategoryCreateNestedOneWithoutSubcategoryTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutCategoryInput = {
    id?: string
    userId: string
    budgetId?: string | null
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    subcategoryId?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutCategoryInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput>
  }

  export type TransactionCreateManyCategoryInputEnvelope = {
    data: TransactionCreateManyCategoryInput | TransactionCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutSubcategoryInput = {
    id?: string
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
    goalContributions?: GoalContributionCreateNestedManyWithoutTransactionInput
    budget?: BudgetCreateNestedOneWithoutTransactionsInput
    category?: CategoryCreateNestedOneWithoutTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutSubcategoryInput = {
    id?: string
    userId: string
    budgetId?: string | null
    categoryId?: string | null
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutSubcategoryInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutSubcategoryInput, TransactionUncheckedCreateWithoutSubcategoryInput>
  }

  export type TransactionCreateManySubcategoryInputEnvelope = {
    data: TransactionCreateManySubcategoryInput | TransactionCreateManySubcategoryInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutSubcategoriesInput = {
    update: XOR<CategoryUpdateWithoutSubcategoriesInput, CategoryUncheckedUpdateWithoutSubcategoriesInput>
    create: XOR<CategoryCreateWithoutSubcategoriesInput, CategoryUncheckedCreateWithoutSubcategoriesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutSubcategoriesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutSubcategoriesInput, CategoryUncheckedUpdateWithoutSubcategoriesInput>
  }

  export type CategoryUpdateWithoutSubcategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutSubcategoriesNestedInput
    user?: UserUpdateOneWithoutCategoriesNestedInput
    transactions?: TransactionUpdateManyWithoutCategoryNestedInput
    subcategoryTransactions?: TransactionUpdateManyWithoutSubcategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutSubcategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    transactions?: TransactionUncheckedUpdateManyWithoutCategoryNestedInput
    subcategoryTransactions?: TransactionUncheckedUpdateManyWithoutSubcategoryNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParentInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type UserUpsertWithoutCategoriesInput = {
    update: XOR<UserUpdateWithoutCategoriesInput, UserUncheckedUpdateWithoutCategoriesInput>
    create: XOR<UserCreateWithoutCategoriesInput, UserUncheckedCreateWithoutCategoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCategoriesInput, UserUncheckedUpdateWithoutCategoriesInput>
  }

  export type UserUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUncheckedUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUncheckedUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCategoryInput, TransactionUncheckedUpdateWithoutCategoryInput>
    create: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCategoryInput, TransactionUncheckedUpdateWithoutCategoryInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCategoryInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutCategoryInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutSubcategoryInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutSubcategoryInput, TransactionUncheckedUpdateWithoutSubcategoryInput>
    create: XOR<TransactionCreateWithoutSubcategoryInput, TransactionUncheckedCreateWithoutSubcategoryInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutSubcategoryInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutSubcategoryInput, TransactionUncheckedUpdateWithoutSubcategoryInput>
  }

  export type TransactionUpdateManyWithWhereWithoutSubcategoryInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutSubcategoryInput>
  }

  export type GoalContributionCreateWithoutTransactionInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date?: Date | string
    description?: string | null
    type?: $Enums.ContributionType
    goal: GoalCreateNestedOneWithoutContributionsInput
    user: UserCreateNestedOneWithoutGoalContributionsInput
  }

  export type GoalContributionUncheckedCreateWithoutTransactionInput = {
    id?: string
    goalId: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date?: Date | string
    description?: string | null
    type?: $Enums.ContributionType
  }

  export type GoalContributionCreateOrConnectWithoutTransactionInput = {
    where: GoalContributionWhereUniqueInput
    create: XOR<GoalContributionCreateWithoutTransactionInput, GoalContributionUncheckedCreateWithoutTransactionInput>
  }

  export type GoalContributionCreateManyTransactionInputEnvelope = {
    data: GoalContributionCreateManyTransactionInput | GoalContributionCreateManyTransactionInput[]
    skipDuplicates?: boolean
  }

  export type BudgetCreateWithoutTransactionsInput = {
    id?: string
    name: string
    description?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    startDate: Date | string
    endDate?: Date | string | null
    isRecurring?: boolean
    status?: $Enums.BudgetStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBudgetsInput
  }

  export type BudgetUncheckedCreateWithoutTransactionsInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    startDate: Date | string
    endDate?: Date | string | null
    isRecurring?: boolean
    status?: $Enums.BudgetStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BudgetCreateOrConnectWithoutTransactionsInput = {
    where: BudgetWhereUniqueInput
    create: XOR<BudgetCreateWithoutTransactionsInput, BudgetUncheckedCreateWithoutTransactionsInput>
  }

  export type CategoryCreateWithoutTransactionsInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutSubcategoriesInput
    subcategories?: CategoryCreateNestedManyWithoutParentInput
    user?: UserCreateNestedOneWithoutCategoriesInput
    subcategoryTransactions?: TransactionCreateNestedManyWithoutSubcategoryInput
  }

  export type CategoryUncheckedCreateWithoutTransactionsInput = {
    id?: string
    userId?: string | null
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    subcategories?: CategoryUncheckedCreateNestedManyWithoutParentInput
    subcategoryTransactions?: TransactionUncheckedCreateNestedManyWithoutSubcategoryInput
  }

  export type CategoryCreateOrConnectWithoutTransactionsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutTransactionsInput, CategoryUncheckedCreateWithoutTransactionsInput>
  }

  export type CategoryCreateWithoutSubcategoryTransactionsInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutSubcategoriesInput
    subcategories?: CategoryCreateNestedManyWithoutParentInput
    user?: UserCreateNestedOneWithoutCategoriesInput
    transactions?: TransactionCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutSubcategoryTransactionsInput = {
    id?: string
    userId?: string | null
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
    subcategories?: CategoryUncheckedCreateNestedManyWithoutParentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutSubcategoryTransactionsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutSubcategoryTransactionsInput, CategoryUncheckedCreateWithoutSubcategoryTransactionsInput>
  }

  export type UserCreateWithoutTransactionsInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetCreateNestedManyWithoutUserInput
    categories?: CategoryCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTransactionsInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentUncheckedCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type GoalContributionUpsertWithWhereUniqueWithoutTransactionInput = {
    where: GoalContributionWhereUniqueInput
    update: XOR<GoalContributionUpdateWithoutTransactionInput, GoalContributionUncheckedUpdateWithoutTransactionInput>
    create: XOR<GoalContributionCreateWithoutTransactionInput, GoalContributionUncheckedCreateWithoutTransactionInput>
  }

  export type GoalContributionUpdateWithWhereUniqueWithoutTransactionInput = {
    where: GoalContributionWhereUniqueInput
    data: XOR<GoalContributionUpdateWithoutTransactionInput, GoalContributionUncheckedUpdateWithoutTransactionInput>
  }

  export type GoalContributionUpdateManyWithWhereWithoutTransactionInput = {
    where: GoalContributionScalarWhereInput
    data: XOR<GoalContributionUpdateManyMutationInput, GoalContributionUncheckedUpdateManyWithoutTransactionInput>
  }

  export type BudgetUpsertWithoutTransactionsInput = {
    update: XOR<BudgetUpdateWithoutTransactionsInput, BudgetUncheckedUpdateWithoutTransactionsInput>
    create: XOR<BudgetCreateWithoutTransactionsInput, BudgetUncheckedCreateWithoutTransactionsInput>
    where?: BudgetWhereInput
  }

  export type BudgetUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: BudgetWhereInput
    data: XOR<BudgetUpdateWithoutTransactionsInput, BudgetUncheckedUpdateWithoutTransactionsInput>
  }

  export type BudgetUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBudgetStatusFieldUpdateOperationsInput | $Enums.BudgetStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBudgetsNestedInput
  }

  export type BudgetUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBudgetStatusFieldUpdateOperationsInput | $Enums.BudgetStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUpsertWithoutTransactionsInput = {
    update: XOR<CategoryUpdateWithoutTransactionsInput, CategoryUncheckedUpdateWithoutTransactionsInput>
    create: XOR<CategoryCreateWithoutTransactionsInput, CategoryUncheckedCreateWithoutTransactionsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutTransactionsInput, CategoryUncheckedUpdateWithoutTransactionsInput>
  }

  export type CategoryUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutSubcategoriesNestedInput
    subcategories?: CategoryUpdateManyWithoutParentNestedInput
    user?: UserUpdateOneWithoutCategoriesNestedInput
    subcategoryTransactions?: TransactionUpdateManyWithoutSubcategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    subcategories?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    subcategoryTransactions?: TransactionUncheckedUpdateManyWithoutSubcategoryNestedInput
  }

  export type CategoryUpsertWithoutSubcategoryTransactionsInput = {
    update: XOR<CategoryUpdateWithoutSubcategoryTransactionsInput, CategoryUncheckedUpdateWithoutSubcategoryTransactionsInput>
    create: XOR<CategoryCreateWithoutSubcategoryTransactionsInput, CategoryUncheckedCreateWithoutSubcategoryTransactionsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutSubcategoryTransactionsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutSubcategoryTransactionsInput, CategoryUncheckedUpdateWithoutSubcategoryTransactionsInput>
  }

  export type CategoryUpdateWithoutSubcategoryTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutSubcategoriesNestedInput
    subcategories?: CategoryUpdateManyWithoutParentNestedInput
    user?: UserUpdateOneWithoutCategoriesNestedInput
    transactions?: TransactionUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutSubcategoryTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    subcategories?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type UserUpsertWithoutTransactionsInput = {
    update: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUpdateManyWithoutUserNestedInput
    categories?: CategoryUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUncheckedUpdateManyWithoutUserNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUncheckedUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GoalContributionCreateWithoutGoalInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date?: Date | string
    description?: string | null
    type?: $Enums.ContributionType
    transaction?: TransactionCreateNestedOneWithoutGoalContributionsInput
    user: UserCreateNestedOneWithoutGoalContributionsInput
  }

  export type GoalContributionUncheckedCreateWithoutGoalInput = {
    id?: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date?: Date | string
    description?: string | null
    type?: $Enums.ContributionType
    transactionId?: string | null
  }

  export type GoalContributionCreateOrConnectWithoutGoalInput = {
    where: GoalContributionWhereUniqueInput
    create: XOR<GoalContributionCreateWithoutGoalInput, GoalContributionUncheckedCreateWithoutGoalInput>
  }

  export type GoalContributionCreateManyGoalInputEnvelope = {
    data: GoalContributionCreateManyGoalInput | GoalContributionCreateManyGoalInput[]
    skipDuplicates?: boolean
  }

  export type GoalReminderCreateWithoutGoalInput = {
    id?: string
    type: $Enums.ReminderType
    frequency: $Enums.ReminderFrequency
    isActive?: boolean
    lastSent?: Date | string | null
    nextDue?: Date | string | null
    message?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutGoalRemindersInput
  }

  export type GoalReminderUncheckedCreateWithoutGoalInput = {
    id?: string
    userId: string
    type: $Enums.ReminderType
    frequency: $Enums.ReminderFrequency
    isActive?: boolean
    lastSent?: Date | string | null
    nextDue?: Date | string | null
    message?: string | null
    createdAt?: Date | string
  }

  export type GoalReminderCreateOrConnectWithoutGoalInput = {
    where: GoalReminderWhereUniqueInput
    create: XOR<GoalReminderCreateWithoutGoalInput, GoalReminderUncheckedCreateWithoutGoalInput>
  }

  export type GoalReminderCreateManyGoalInputEnvelope = {
    data: GoalReminderCreateManyGoalInput | GoalReminderCreateManyGoalInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutGoalsInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetCreateNestedManyWithoutUserInput
    categories?: CategoryCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGoalsInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderUncheckedCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentUncheckedCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGoalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
  }

  export type GoalContributionUpsertWithWhereUniqueWithoutGoalInput = {
    where: GoalContributionWhereUniqueInput
    update: XOR<GoalContributionUpdateWithoutGoalInput, GoalContributionUncheckedUpdateWithoutGoalInput>
    create: XOR<GoalContributionCreateWithoutGoalInput, GoalContributionUncheckedCreateWithoutGoalInput>
  }

  export type GoalContributionUpdateWithWhereUniqueWithoutGoalInput = {
    where: GoalContributionWhereUniqueInput
    data: XOR<GoalContributionUpdateWithoutGoalInput, GoalContributionUncheckedUpdateWithoutGoalInput>
  }

  export type GoalContributionUpdateManyWithWhereWithoutGoalInput = {
    where: GoalContributionScalarWhereInput
    data: XOR<GoalContributionUpdateManyMutationInput, GoalContributionUncheckedUpdateManyWithoutGoalInput>
  }

  export type GoalReminderUpsertWithWhereUniqueWithoutGoalInput = {
    where: GoalReminderWhereUniqueInput
    update: XOR<GoalReminderUpdateWithoutGoalInput, GoalReminderUncheckedUpdateWithoutGoalInput>
    create: XOR<GoalReminderCreateWithoutGoalInput, GoalReminderUncheckedCreateWithoutGoalInput>
  }

  export type GoalReminderUpdateWithWhereUniqueWithoutGoalInput = {
    where: GoalReminderWhereUniqueInput
    data: XOR<GoalReminderUpdateWithoutGoalInput, GoalReminderUncheckedUpdateWithoutGoalInput>
  }

  export type GoalReminderUpdateManyWithWhereWithoutGoalInput = {
    where: GoalReminderScalarWhereInput
    data: XOR<GoalReminderUpdateManyMutationInput, GoalReminderUncheckedUpdateManyWithoutGoalInput>
  }

  export type UserUpsertWithoutGoalsInput = {
    update: XOR<UserUpdateWithoutGoalsInput, UserUncheckedUpdateWithoutGoalsInput>
    create: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGoalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGoalsInput, UserUncheckedUpdateWithoutGoalsInput>
  }

  export type UserUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUpdateManyWithoutUserNestedInput
    categories?: CategoryUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUncheckedUpdateManyWithoutUserNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUncheckedUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUncheckedUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GoalCreateWithoutContributionsInput = {
    id?: string
    name: string
    description?: string | null
    targetAmount: Decimal | DecimalJsLike | number | string
    currentAmount?: Decimal | DecimalJsLike | number | string
    currency?: string
    targetDate?: Date | string | null
    category: $Enums.GoalCategory
    type?: $Enums.GoalType
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    priority?: $Enums.GoalPriority
    autoContribute?: boolean
    monthlyTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    originalCategory?: string | null
    reminders?: GoalReminderCreateNestedManyWithoutGoalInput
    user: UserCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateWithoutContributionsInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    targetAmount: Decimal | DecimalJsLike | number | string
    currentAmount?: Decimal | DecimalJsLike | number | string
    currency?: string
    targetDate?: Date | string | null
    category: $Enums.GoalCategory
    type?: $Enums.GoalType
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    priority?: $Enums.GoalPriority
    autoContribute?: boolean
    monthlyTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    originalCategory?: string | null
    reminders?: GoalReminderUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutContributionsInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutContributionsInput, GoalUncheckedCreateWithoutContributionsInput>
  }

  export type TransactionCreateWithoutGoalContributionsInput = {
    id?: string
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
    budget?: BudgetCreateNestedOneWithoutTransactionsInput
    category?: CategoryCreateNestedOneWithoutTransactionsInput
    subcategory?: CategoryCreateNestedOneWithoutSubcategoryTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutGoalContributionsInput = {
    id?: string
    userId: string
    budgetId?: string | null
    categoryId?: string | null
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    subcategoryId?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
  }

  export type TransactionCreateOrConnectWithoutGoalContributionsInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutGoalContributionsInput, TransactionUncheckedCreateWithoutGoalContributionsInput>
  }

  export type UserCreateWithoutGoalContributionsInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetCreateNestedManyWithoutUserInput
    categories?: CategoryCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGoalContributionsInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentUncheckedCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGoalContributionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGoalContributionsInput, UserUncheckedCreateWithoutGoalContributionsInput>
  }

  export type GoalUpsertWithoutContributionsInput = {
    update: XOR<GoalUpdateWithoutContributionsInput, GoalUncheckedUpdateWithoutContributionsInput>
    create: XOR<GoalCreateWithoutContributionsInput, GoalUncheckedCreateWithoutContributionsInput>
    where?: GoalWhereInput
  }

  export type GoalUpdateToOneWithWhereWithoutContributionsInput = {
    where?: GoalWhereInput
    data: XOR<GoalUpdateWithoutContributionsInput, GoalUncheckedUpdateWithoutContributionsInput>
  }

  export type GoalUpdateWithoutContributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    targetAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumGoalCategoryFieldUpdateOperationsInput | $Enums.GoalCategory
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumGoalPriorityFieldUpdateOperationsInput | $Enums.GoalPriority
    autoContribute?: BoolFieldUpdateOperationsInput | boolean
    monthlyTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalCategory?: NullableStringFieldUpdateOperationsInput | string | null
    reminders?: GoalReminderUpdateManyWithoutGoalNestedInput
    user?: UserUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateWithoutContributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    targetAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumGoalCategoryFieldUpdateOperationsInput | $Enums.GoalCategory
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumGoalPriorityFieldUpdateOperationsInput | $Enums.GoalPriority
    autoContribute?: BoolFieldUpdateOperationsInput | boolean
    monthlyTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalCategory?: NullableStringFieldUpdateOperationsInput | string | null
    reminders?: GoalReminderUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type TransactionUpsertWithoutGoalContributionsInput = {
    update: XOR<TransactionUpdateWithoutGoalContributionsInput, TransactionUncheckedUpdateWithoutGoalContributionsInput>
    create: XOR<TransactionCreateWithoutGoalContributionsInput, TransactionUncheckedCreateWithoutGoalContributionsInput>
    where?: TransactionWhereInput
  }

  export type TransactionUpdateToOneWithWhereWithoutGoalContributionsInput = {
    where?: TransactionWhereInput
    data: XOR<TransactionUpdateWithoutGoalContributionsInput, TransactionUncheckedUpdateWithoutGoalContributionsInput>
  }

  export type TransactionUpdateWithoutGoalContributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    budget?: BudgetUpdateOneWithoutTransactionsNestedInput
    category?: CategoryUpdateOneWithoutTransactionsNestedInput
    subcategory?: CategoryUpdateOneWithoutSubcategoryTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutGoalContributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    subcategoryId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
  }

  export type UserUpsertWithoutGoalContributionsInput = {
    update: XOR<UserUpdateWithoutGoalContributionsInput, UserUncheckedUpdateWithoutGoalContributionsInput>
    create: XOR<UserCreateWithoutGoalContributionsInput, UserUncheckedCreateWithoutGoalContributionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGoalContributionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGoalContributionsInput, UserUncheckedUpdateWithoutGoalContributionsInput>
  }

  export type UserUpdateWithoutGoalContributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUpdateManyWithoutUserNestedInput
    categories?: CategoryUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGoalContributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUncheckedUpdateManyWithoutUserNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUncheckedUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GoalCreateWithoutRemindersInput = {
    id?: string
    name: string
    description?: string | null
    targetAmount: Decimal | DecimalJsLike | number | string
    currentAmount?: Decimal | DecimalJsLike | number | string
    currency?: string
    targetDate?: Date | string | null
    category: $Enums.GoalCategory
    type?: $Enums.GoalType
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    priority?: $Enums.GoalPriority
    autoContribute?: boolean
    monthlyTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    originalCategory?: string | null
    contributions?: GoalContributionCreateNestedManyWithoutGoalInput
    user: UserCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateWithoutRemindersInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    targetAmount: Decimal | DecimalJsLike | number | string
    currentAmount?: Decimal | DecimalJsLike | number | string
    currency?: string
    targetDate?: Date | string | null
    category: $Enums.GoalCategory
    type?: $Enums.GoalType
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    priority?: $Enums.GoalPriority
    autoContribute?: boolean
    monthlyTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    originalCategory?: string | null
    contributions?: GoalContributionUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutRemindersInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutRemindersInput, GoalUncheckedCreateWithoutRemindersInput>
  }

  export type UserCreateWithoutGoalRemindersInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetCreateNestedManyWithoutUserInput
    categories?: CategoryCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGoalRemindersInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentUncheckedCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGoalRemindersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGoalRemindersInput, UserUncheckedCreateWithoutGoalRemindersInput>
  }

  export type GoalUpsertWithoutRemindersInput = {
    update: XOR<GoalUpdateWithoutRemindersInput, GoalUncheckedUpdateWithoutRemindersInput>
    create: XOR<GoalCreateWithoutRemindersInput, GoalUncheckedCreateWithoutRemindersInput>
    where?: GoalWhereInput
  }

  export type GoalUpdateToOneWithWhereWithoutRemindersInput = {
    where?: GoalWhereInput
    data: XOR<GoalUpdateWithoutRemindersInput, GoalUncheckedUpdateWithoutRemindersInput>
  }

  export type GoalUpdateWithoutRemindersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    targetAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumGoalCategoryFieldUpdateOperationsInput | $Enums.GoalCategory
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumGoalPriorityFieldUpdateOperationsInput | $Enums.GoalPriority
    autoContribute?: BoolFieldUpdateOperationsInput | boolean
    monthlyTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalCategory?: NullableStringFieldUpdateOperationsInput | string | null
    contributions?: GoalContributionUpdateManyWithoutGoalNestedInput
    user?: UserUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateWithoutRemindersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    targetAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumGoalCategoryFieldUpdateOperationsInput | $Enums.GoalCategory
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumGoalPriorityFieldUpdateOperationsInput | $Enums.GoalPriority
    autoContribute?: BoolFieldUpdateOperationsInput | boolean
    monthlyTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalCategory?: NullableStringFieldUpdateOperationsInput | string | null
    contributions?: GoalContributionUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type UserUpsertWithoutGoalRemindersInput = {
    update: XOR<UserUpdateWithoutGoalRemindersInput, UserUncheckedUpdateWithoutGoalRemindersInput>
    create: XOR<UserCreateWithoutGoalRemindersInput, UserUncheckedCreateWithoutGoalRemindersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGoalRemindersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGoalRemindersInput, UserUncheckedUpdateWithoutGoalRemindersInput>
  }

  export type UserUpdateWithoutGoalRemindersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUpdateManyWithoutUserNestedInput
    categories?: CategoryUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGoalRemindersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUncheckedUpdateManyWithoutUserNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUncheckedUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PokerTournamentEventCreateWithoutTournamentInput = {
    id?: string
    eventName: string
    eventNumber?: string | null
    buyIn: Decimal | DecimalJsLike | number | string
    winnings?: Decimal | DecimalJsLike | number | string
    eventDate: Date | string
    gameType?: $Enums.GameType | null
    fieldSize?: number | null
    finishPosition?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reBuyAmount?: Decimal | DecimalJsLike | number | string | null
    reBuys?: number | null
    startingStack?: number | null
    isClosed?: boolean
    user: UserCreateNestedOneWithoutPokerTournamentEventsInput
  }

  export type PokerTournamentEventUncheckedCreateWithoutTournamentInput = {
    id?: string
    userId: string
    eventName: string
    eventNumber?: string | null
    buyIn: Decimal | DecimalJsLike | number | string
    winnings?: Decimal | DecimalJsLike | number | string
    eventDate: Date | string
    gameType?: $Enums.GameType | null
    fieldSize?: number | null
    finishPosition?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reBuyAmount?: Decimal | DecimalJsLike | number | string | null
    reBuys?: number | null
    startingStack?: number | null
    isClosed?: boolean
  }

  export type PokerTournamentEventCreateOrConnectWithoutTournamentInput = {
    where: PokerTournamentEventWhereUniqueInput
    create: XOR<PokerTournamentEventCreateWithoutTournamentInput, PokerTournamentEventUncheckedCreateWithoutTournamentInput>
  }

  export type PokerTournamentEventCreateManyTournamentInputEnvelope = {
    data: PokerTournamentEventCreateManyTournamentInput | PokerTournamentEventCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutPokerTournamentsInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetCreateNestedManyWithoutUserInput
    categories?: CategoryCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPokerTournamentsInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPokerTournamentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPokerTournamentsInput, UserUncheckedCreateWithoutPokerTournamentsInput>
  }

  export type PokerTournamentEventUpsertWithWhereUniqueWithoutTournamentInput = {
    where: PokerTournamentEventWhereUniqueInput
    update: XOR<PokerTournamentEventUpdateWithoutTournamentInput, PokerTournamentEventUncheckedUpdateWithoutTournamentInput>
    create: XOR<PokerTournamentEventCreateWithoutTournamentInput, PokerTournamentEventUncheckedCreateWithoutTournamentInput>
  }

  export type PokerTournamentEventUpdateWithWhereUniqueWithoutTournamentInput = {
    where: PokerTournamentEventWhereUniqueInput
    data: XOR<PokerTournamentEventUpdateWithoutTournamentInput, PokerTournamentEventUncheckedUpdateWithoutTournamentInput>
  }

  export type PokerTournamentEventUpdateManyWithWhereWithoutTournamentInput = {
    where: PokerTournamentEventScalarWhereInput
    data: XOR<PokerTournamentEventUpdateManyMutationInput, PokerTournamentEventUncheckedUpdateManyWithoutTournamentInput>
  }

  export type UserUpsertWithoutPokerTournamentsInput = {
    update: XOR<UserUpdateWithoutPokerTournamentsInput, UserUncheckedUpdateWithoutPokerTournamentsInput>
    create: XOR<UserCreateWithoutPokerTournamentsInput, UserUncheckedCreateWithoutPokerTournamentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPokerTournamentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPokerTournamentsInput, UserUncheckedUpdateWithoutPokerTournamentsInput>
  }

  export type UserUpdateWithoutPokerTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUpdateManyWithoutUserNestedInput
    categories?: CategoryUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPokerTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUncheckedUpdateManyWithoutUserNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PokerTournamentCreateWithoutEventsInput = {
    id?: string
    name: string
    location: string
    venue?: string | null
    dateStart: Date | string
    dateEnd?: Date | string | null
    accommodationCost?: Decimal | DecimalJsLike | number | string
    foodBudget?: Decimal | DecimalJsLike | number | string
    otherExpenses?: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPokerTournamentsInput
  }

  export type PokerTournamentUncheckedCreateWithoutEventsInput = {
    id?: string
    userId: string
    name: string
    location: string
    venue?: string | null
    dateStart: Date | string
    dateEnd?: Date | string | null
    accommodationCost?: Decimal | DecimalJsLike | number | string
    foodBudget?: Decimal | DecimalJsLike | number | string
    otherExpenses?: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PokerTournamentCreateOrConnectWithoutEventsInput = {
    where: PokerTournamentWhereUniqueInput
    create: XOR<PokerTournamentCreateWithoutEventsInput, PokerTournamentUncheckedCreateWithoutEventsInput>
  }

  export type UserCreateWithoutPokerTournamentEventsInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetCreateNestedManyWithoutUserInput
    categories?: CategoryCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPokerTournamentEventsInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentUncheckedCreateNestedManyWithoutUserInput
    rolloverHistory?: RolloverEntryUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPokerTournamentEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPokerTournamentEventsInput, UserUncheckedCreateWithoutPokerTournamentEventsInput>
  }

  export type PokerTournamentUpsertWithoutEventsInput = {
    update: XOR<PokerTournamentUpdateWithoutEventsInput, PokerTournamentUncheckedUpdateWithoutEventsInput>
    create: XOR<PokerTournamentCreateWithoutEventsInput, PokerTournamentUncheckedCreateWithoutEventsInput>
    where?: PokerTournamentWhereInput
  }

  export type PokerTournamentUpdateToOneWithWhereWithoutEventsInput = {
    where?: PokerTournamentWhereInput
    data: XOR<PokerTournamentUpdateWithoutEventsInput, PokerTournamentUncheckedUpdateWithoutEventsInput>
  }

  export type PokerTournamentUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accommodationCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPokerTournamentsNestedInput
  }

  export type PokerTournamentUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accommodationCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutPokerTournamentEventsInput = {
    update: XOR<UserUpdateWithoutPokerTournamentEventsInput, UserUncheckedUpdateWithoutPokerTournamentEventsInput>
    create: XOR<UserCreateWithoutPokerTournamentEventsInput, UserUncheckedCreateWithoutPokerTournamentEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPokerTournamentEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPokerTournamentEventsInput, UserUncheckedUpdateWithoutPokerTournamentEventsInput>
  }

  export type UserUpdateWithoutPokerTournamentEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUpdateManyWithoutUserNestedInput
    categories?: CategoryUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPokerTournamentEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUncheckedUpdateManyWithoutUserNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUncheckedUpdateManyWithoutUserNestedInput
    rolloverHistory?: RolloverEntryUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRolloverHistoryInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetCreateNestedManyWithoutUserInput
    categories?: CategoryCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRolloverHistoryInput = {
    id?: string
    email: string
    username?: string | null
    firstName: string
    lastName: string
    passwordHash?: string | null
    currency?: string
    timezone?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    hasSeenWelcome?: boolean
    income?: Decimal | DecimalJsLike | number | string | null
    setupComplete?: boolean
    hasSeenAddTransactionTour?: boolean
    hasSeenBalanceCardTour?: boolean
    hasSeenTransactionSwipeTour?: boolean
    fixedExpenses?: Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: $Enums.IncomeFrequency | null
    nextPayDate?: Date | string | null
    rolloverAmount?: Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: Date | string | null
    budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    goalContributions?: GoalContributionUncheckedCreateNestedManyWithoutUserInput
    goalReminders?: GoalReminderUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedCreateNestedManyWithoutUserInput
    pokerTournaments?: PokerTournamentUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRolloverHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRolloverHistoryInput, UserUncheckedCreateWithoutRolloverHistoryInput>
  }

  export type UserUpsertWithoutRolloverHistoryInput = {
    update: XOR<UserUpdateWithoutRolloverHistoryInput, UserUncheckedUpdateWithoutRolloverHistoryInput>
    create: XOR<UserCreateWithoutRolloverHistoryInput, UserUncheckedCreateWithoutRolloverHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRolloverHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRolloverHistoryInput, UserUncheckedUpdateWithoutRolloverHistoryInput>
  }

  export type UserUpdateWithoutRolloverHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUpdateManyWithoutUserNestedInput
    categories?: CategoryUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRolloverHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hasSeenWelcome?: BoolFieldUpdateOperationsInput | boolean
    income?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    setupComplete?: BoolFieldUpdateOperationsInput | boolean
    hasSeenAddTransactionTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenBalanceCardTour?: BoolFieldUpdateOperationsInput | boolean
    hasSeenTransactionSwipeTour?: BoolFieldUpdateOperationsInput | boolean
    fixedExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeFrequency?: NullableEnumIncomeFrequencyFieldUpdateOperationsInput | $Enums.IncomeFrequency | null
    nextPayDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rolloverAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    lastRolloverDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budgets?: BudgetUncheckedUpdateManyWithoutUserNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutUserNestedInput
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutUserNestedInput
    goalReminders?: GoalReminderUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    pokerTournamentEvents?: PokerTournamentEventUncheckedUpdateManyWithoutUserNestedInput
    pokerTournaments?: PokerTournamentUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BudgetCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    startDate: Date | string
    endDate?: Date | string | null
    isRecurring?: boolean
    status?: $Enums.BudgetStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentId?: string | null
  }

  export type GoalContributionCreateManyUserInput = {
    id?: string
    goalId: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date?: Date | string
    description?: string | null
    type?: $Enums.ContributionType
    transactionId?: string | null
  }

  export type GoalReminderCreateManyUserInput = {
    id?: string
    goalId: string
    type: $Enums.ReminderType
    frequency: $Enums.ReminderFrequency
    isActive?: boolean
    lastSent?: Date | string | null
    nextDue?: Date | string | null
    message?: string | null
    createdAt?: Date | string
  }

  export type GoalCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    targetAmount: Decimal | DecimalJsLike | number | string
    currentAmount?: Decimal | DecimalJsLike | number | string
    currency?: string
    targetDate?: Date | string | null
    category: $Enums.GoalCategory
    type?: $Enums.GoalType
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    priority?: $Enums.GoalPriority
    autoContribute?: boolean
    monthlyTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    originalCategory?: string | null
  }

  export type PokerTournamentEventCreateManyUserInput = {
    id?: string
    tournamentId: string
    eventName: string
    eventNumber?: string | null
    buyIn: Decimal | DecimalJsLike | number | string
    winnings?: Decimal | DecimalJsLike | number | string
    eventDate: Date | string
    gameType?: $Enums.GameType | null
    fieldSize?: number | null
    finishPosition?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reBuyAmount?: Decimal | DecimalJsLike | number | string | null
    reBuys?: number | null
    startingStack?: number | null
    isClosed?: boolean
  }

  export type PokerTournamentCreateManyUserInput = {
    id?: string
    name: string
    location: string
    venue?: string | null
    dateStart: Date | string
    dateEnd?: Date | string | null
    accommodationCost?: Decimal | DecimalJsLike | number | string
    foodBudget?: Decimal | DecimalJsLike | number | string
    otherExpenses?: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RolloverEntryCreateManyUserInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    date?: Date | string
    type: $Enums.RolloverType
    periodStart: Date | string
    periodEnd: Date | string
    description?: string | null
  }

  export type TransactionCreateManyUserInput = {
    id?: string
    budgetId?: string | null
    categoryId?: string | null
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    subcategoryId?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
  }

  export type BudgetUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBudgetStatusFieldUpdateOperationsInput | $Enums.BudgetStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUpdateManyWithoutBudgetNestedInput
  }

  export type BudgetUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBudgetStatusFieldUpdateOperationsInput | $Enums.BudgetStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutBudgetNestedInput
  }

  export type BudgetUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBudgetStatusFieldUpdateOperationsInput | $Enums.BudgetStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutSubcategoriesNestedInput
    subcategories?: CategoryUpdateManyWithoutParentNestedInput
    transactions?: TransactionUpdateManyWithoutCategoryNestedInput
    subcategoryTransactions?: TransactionUpdateManyWithoutSubcategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    subcategories?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCategoryNestedInput
    subcategoryTransactions?: TransactionUncheckedUpdateManyWithoutSubcategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalContributionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
    goal?: GoalUpdateOneRequiredWithoutContributionsNestedInput
    transaction?: TransactionUpdateOneWithoutGoalContributionsNestedInput
  }

  export type GoalContributionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalContributionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalReminderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFieldUpdateOperationsInput | $Enums.ReminderFrequency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneRequiredWithoutRemindersNestedInput
  }

  export type GoalReminderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    type?: EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFieldUpdateOperationsInput | $Enums.ReminderFrequency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalReminderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    type?: EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFieldUpdateOperationsInput | $Enums.ReminderFrequency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    targetAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumGoalCategoryFieldUpdateOperationsInput | $Enums.GoalCategory
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumGoalPriorityFieldUpdateOperationsInput | $Enums.GoalPriority
    autoContribute?: BoolFieldUpdateOperationsInput | boolean
    monthlyTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalCategory?: NullableStringFieldUpdateOperationsInput | string | null
    contributions?: GoalContributionUpdateManyWithoutGoalNestedInput
    reminders?: GoalReminderUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    targetAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumGoalCategoryFieldUpdateOperationsInput | $Enums.GoalCategory
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumGoalPriorityFieldUpdateOperationsInput | $Enums.GoalPriority
    autoContribute?: BoolFieldUpdateOperationsInput | boolean
    monthlyTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalCategory?: NullableStringFieldUpdateOperationsInput | string | null
    contributions?: GoalContributionUncheckedUpdateManyWithoutGoalNestedInput
    reminders?: GoalReminderUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    targetAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumGoalCategoryFieldUpdateOperationsInput | $Enums.GoalCategory
    type?: EnumGoalTypeFieldUpdateOperationsInput | $Enums.GoalType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumGoalPriorityFieldUpdateOperationsInput | $Enums.GoalPriority
    autoContribute?: BoolFieldUpdateOperationsInput | boolean
    monthlyTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalCategory?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PokerTournamentEventUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventName?: StringFieldUpdateOperationsInput | string
    eventNumber?: NullableStringFieldUpdateOperationsInput | string | null
    buyIn?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: NullableEnumGameTypeFieldUpdateOperationsInput | $Enums.GameType | null
    fieldSize?: NullableIntFieldUpdateOperationsInput | number | null
    finishPosition?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reBuyAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reBuys?: NullableIntFieldUpdateOperationsInput | number | null
    startingStack?: NullableIntFieldUpdateOperationsInput | number | null
    isClosed?: BoolFieldUpdateOperationsInput | boolean
    tournament?: PokerTournamentUpdateOneRequiredWithoutEventsNestedInput
  }

  export type PokerTournamentEventUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    eventName?: StringFieldUpdateOperationsInput | string
    eventNumber?: NullableStringFieldUpdateOperationsInput | string | null
    buyIn?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: NullableEnumGameTypeFieldUpdateOperationsInput | $Enums.GameType | null
    fieldSize?: NullableIntFieldUpdateOperationsInput | number | null
    finishPosition?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reBuyAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reBuys?: NullableIntFieldUpdateOperationsInput | number | null
    startingStack?: NullableIntFieldUpdateOperationsInput | number | null
    isClosed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PokerTournamentEventUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    eventName?: StringFieldUpdateOperationsInput | string
    eventNumber?: NullableStringFieldUpdateOperationsInput | string | null
    buyIn?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: NullableEnumGameTypeFieldUpdateOperationsInput | $Enums.GameType | null
    fieldSize?: NullableIntFieldUpdateOperationsInput | number | null
    finishPosition?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reBuyAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reBuys?: NullableIntFieldUpdateOperationsInput | number | null
    startingStack?: NullableIntFieldUpdateOperationsInput | number | null
    isClosed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PokerTournamentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accommodationCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: PokerTournamentEventUpdateManyWithoutTournamentNestedInput
  }

  export type PokerTournamentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accommodationCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: PokerTournamentEventUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type PokerTournamentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accommodationCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    foodBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    otherExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolloverEntryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumRolloverTypeFieldUpdateOperationsInput | $Enums.RolloverType
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolloverEntryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumRolloverTypeFieldUpdateOperationsInput | $Enums.RolloverType
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolloverEntryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumRolloverTypeFieldUpdateOperationsInput | $Enums.RolloverType
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUpdateManyWithoutTransactionNestedInput
    budget?: BudgetUpdateOneWithoutTransactionsNestedInput
    category?: CategoryUpdateOneWithoutTransactionsNestedInput
    subcategory?: CategoryUpdateOneWithoutSubcategoryTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    subcategoryId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    subcategoryId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
  }

  export type TransactionCreateManyBudgetInput = {
    id?: string
    userId: string
    categoryId?: string | null
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    subcategoryId?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
  }

  export type TransactionUpdateWithoutBudgetInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUpdateManyWithoutTransactionNestedInput
    category?: CategoryUpdateOneWithoutTransactionsNestedInput
    subcategory?: CategoryUpdateOneWithoutSubcategoryTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutBudgetInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    subcategoryId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateManyWithoutBudgetInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    subcategoryId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
  }

  export type CategoryCreateManyParentInput = {
    id?: string
    userId?: string | null
    name: string
    description?: string | null
    icon?: string | null
    color?: string | null
    type?: $Enums.CategoryType
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyCategoryInput = {
    id?: string
    userId: string
    budgetId?: string | null
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    subcategoryId?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
  }

  export type TransactionCreateManySubcategoryInput = {
    id?: string
    userId: string
    budgetId?: string | null
    categoryId?: string | null
    description: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date: Date | string
    type: $Enums.TransactionType
    isAICategorized?: boolean
    aiConfidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    merchantName?: string | null
    notes?: string | null
    recurrence?: string | null
    dueDate?: Date | string | null
    status?: $Enums.PaymentStatus | null
  }

  export type CategoryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subcategories?: CategoryUpdateManyWithoutParentNestedInput
    user?: UserUpdateOneWithoutCategoriesNestedInput
    transactions?: TransactionUpdateManyWithoutCategoryNestedInput
    subcategoryTransactions?: TransactionUpdateManyWithoutSubcategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subcategories?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCategoryNestedInput
    subcategoryTransactions?: TransactionUncheckedUpdateManyWithoutSubcategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUpdateManyWithoutTransactionNestedInput
    budget?: BudgetUpdateOneWithoutTransactionsNestedInput
    subcategory?: CategoryUpdateOneWithoutSubcategoryTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    subcategoryId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    subcategoryId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
  }

  export type TransactionUpdateWithoutSubcategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUpdateManyWithoutTransactionNestedInput
    budget?: BudgetUpdateOneWithoutTransactionsNestedInput
    category?: CategoryUpdateOneWithoutTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutSubcategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    goalContributions?: GoalContributionUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateManyWithoutSubcategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    isAICategorized?: BoolFieldUpdateOperationsInput | boolean
    aiConfidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    merchantName?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recurrence?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
  }

  export type GoalContributionCreateManyTransactionInput = {
    id?: string
    goalId: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date?: Date | string
    description?: string | null
    type?: $Enums.ContributionType
  }

  export type GoalContributionUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
    goal?: GoalUpdateOneRequiredWithoutContributionsNestedInput
    user?: UserUpdateOneRequiredWithoutGoalContributionsNestedInput
  }

  export type GoalContributionUncheckedUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
  }

  export type GoalContributionUncheckedUpdateManyWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
  }

  export type GoalContributionCreateManyGoalInput = {
    id?: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    date?: Date | string
    description?: string | null
    type?: $Enums.ContributionType
    transactionId?: string | null
  }

  export type GoalReminderCreateManyGoalInput = {
    id?: string
    userId: string
    type: $Enums.ReminderType
    frequency: $Enums.ReminderFrequency
    isActive?: boolean
    lastSent?: Date | string | null
    nextDue?: Date | string | null
    message?: string | null
    createdAt?: Date | string
  }

  export type GoalContributionUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
    transaction?: TransactionUpdateOneWithoutGoalContributionsNestedInput
    user?: UserUpdateOneRequiredWithoutGoalContributionsNestedInput
  }

  export type GoalContributionUncheckedUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalContributionUncheckedUpdateManyWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumContributionTypeFieldUpdateOperationsInput | $Enums.ContributionType
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalReminderUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFieldUpdateOperationsInput | $Enums.ReminderFrequency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGoalRemindersNestedInput
  }

  export type GoalReminderUncheckedUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFieldUpdateOperationsInput | $Enums.ReminderFrequency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalReminderUncheckedUpdateManyWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType
    frequency?: EnumReminderFrequencyFieldUpdateOperationsInput | $Enums.ReminderFrequency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSent?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextDue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PokerTournamentEventCreateManyTournamentInput = {
    id?: string
    userId: string
    eventName: string
    eventNumber?: string | null
    buyIn: Decimal | DecimalJsLike | number | string
    winnings?: Decimal | DecimalJsLike | number | string
    eventDate: Date | string
    gameType?: $Enums.GameType | null
    fieldSize?: number | null
    finishPosition?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reBuyAmount?: Decimal | DecimalJsLike | number | string | null
    reBuys?: number | null
    startingStack?: number | null
    isClosed?: boolean
  }

  export type PokerTournamentEventUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventName?: StringFieldUpdateOperationsInput | string
    eventNumber?: NullableStringFieldUpdateOperationsInput | string | null
    buyIn?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: NullableEnumGameTypeFieldUpdateOperationsInput | $Enums.GameType | null
    fieldSize?: NullableIntFieldUpdateOperationsInput | number | null
    finishPosition?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reBuyAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reBuys?: NullableIntFieldUpdateOperationsInput | number | null
    startingStack?: NullableIntFieldUpdateOperationsInput | number | null
    isClosed?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPokerTournamentEventsNestedInput
  }

  export type PokerTournamentEventUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventName?: StringFieldUpdateOperationsInput | string
    eventNumber?: NullableStringFieldUpdateOperationsInput | string | null
    buyIn?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: NullableEnumGameTypeFieldUpdateOperationsInput | $Enums.GameType | null
    fieldSize?: NullableIntFieldUpdateOperationsInput | number | null
    finishPosition?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reBuyAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reBuys?: NullableIntFieldUpdateOperationsInput | number | null
    startingStack?: NullableIntFieldUpdateOperationsInput | number | null
    isClosed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PokerTournamentEventUncheckedUpdateManyWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventName?: StringFieldUpdateOperationsInput | string
    eventNumber?: NullableStringFieldUpdateOperationsInput | string | null
    buyIn?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    winnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gameType?: NullableEnumGameTypeFieldUpdateOperationsInput | $Enums.GameType | null
    fieldSize?: NullableIntFieldUpdateOperationsInput | number | null
    finishPosition?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reBuyAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reBuys?: NullableIntFieldUpdateOperationsInput | number | null
    startingStack?: NullableIntFieldUpdateOperationsInput | number | null
    isClosed?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}