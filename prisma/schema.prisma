generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  username       String?       @unique
  firstName      String
  lastName       String
  passwordHash   String?
  currency       String        @default("USD")
  timezone       String        @default("UTC")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isActive       Boolean       @default(true)
  
  // User setup fields for AppNavigator - Enhanced with income frequency
  income              Decimal?         @db.Decimal(12, 2)
  incomeFrequency     IncomeFrequency?
  nextPayDate         DateTime?
  fixedExpenses       Decimal?         @db.Decimal(12, 2)
  setupComplete       Boolean          @default(false)
  hasSeenWelcome      Boolean          @default(false)
  
  // Tutorial onboarding fields
  hasSeenBalanceCardTour     Boolean @default(false)
  hasSeenAddTransactionTour   Boolean @default(false)
  hasSeenTransactionSwipeTour Boolean @default(false)
  
  budgets        Budget[]
  categories     Category[]
  transactions   Transaction[]
  goals          Goal[]
  goalContributions GoalContribution[]
  goalReminders  GoalReminder[]

  @@map("users")
}

model Budget {
  id           String        @id @default(cuid())
  userId       String
  name         String
  description  String?
  totalAmount  Decimal       @db.Decimal(12, 2)
  currency     String        @default("USD")
  startDate    DateTime
  endDate      DateTime?
  isRecurring  Boolean       @default(true)
  status       BudgetStatus  @default(ACTIVE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("budgets")
}

model Category {
  id                      String        @id @default(cuid())
  userId                  String?
  name                    String
  description             String?
  icon                    String?
  color                   String?
  type                    CategoryType  @default(EXPENSE)
  parentId                String?
  isSystem                Boolean       @default(false)
  isActive                Boolean       @default(true)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  parent                  Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories           Category[]    @relation("CategoryHierarchy")
  user                    User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions            Transaction[]
  subcategoryTransactions Transaction[] @relation("TransactionSubcategory")

  @@unique([name, isSystem])
  @@map("categories")
}

model Transaction {
  id              String          @id @default(cuid())
  userId          String
  budgetId        String?
  categoryId      String?
  subcategoryId   String?
  description     String
  amount          Decimal         @db.Decimal(12, 2)
  currency        String          @default("USD")
  date            DateTime
  dueDate         DateTime?
  type            TransactionType
  status          PaymentStatus?
  recurrence      String?
  isAICategorized Boolean         @default(false)
  aiConfidence    Float?
  notes           String?
  location        String?
  merchantName    String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  budget          Budget?         @relation(fields: [budgetId], references: [id])
  category        Category?       @relation(fields: [categoryId], references: [id])
  subcategory     Category?       @relation("TransactionSubcategory", fields: [subcategoryId], references: [id])
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalContributions GoalContribution[]

  @@index([userId, date])
  @@index([categoryId])
  @@index([subcategoryId])
  @@map("transactions")
}

model Goal {
  id              String      @id @default(cuid())
  userId          String
  name            String
  description     String?
  targetAmount    Decimal     @db.Decimal(12, 2)
  currentAmount   Decimal     @default(0) @db.Decimal(12, 2)
  currency        String      @default("USD")
  targetDate      DateTime?
  category        GoalCategory
  originalCategory String?  
  type            GoalType    @default(SAVINGS)
  isActive        Boolean     @default(true)
  isCompleted     Boolean     @default(false)
  completedAt     DateTime?
  priority        GoalPriority @default(MEDIUM)
  autoContribute  Boolean     @default(false)
  monthlyTarget   Decimal?    @db.Decimal(12, 2)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributions   GoalContribution[]
  reminders       GoalReminder[]

  @@index([userId, isActive])
  @@index([userId, category])
  @@map("goals")
}

model GoalContribution {
  id          String   @id @default(cuid())
  goalId      String
  userId      String
  amount      Decimal  @db.Decimal(12, 2)
  currency    String   @default("USD")
  date        DateTime @default(now())
  description String?
  type        ContributionType @default(MANUAL)
  
  // Link to transaction if contribution came from a transaction
  transactionId String?
  
  // Relations
  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction Transaction? @relation(fields: [transactionId], references: [id])

  @@index([goalId, date])
  @@index([userId, date])
  @@map("goal_contributions")
}

model GoalReminder {
  id          String        @id @default(cuid())
  goalId      String
  userId      String
  type        ReminderType
  frequency   ReminderFrequency
  isActive    Boolean       @default(true)
  lastSent    DateTime?
  nextDue     DateTime?
  message     String?
  createdAt   DateTime      @default(now())
  
  // Relations
  goal        Goal         @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, nextDue])
  @@map("goal_reminders")
}

enum BudgetStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum CategoryType {
  INCOME
  EXPENSE
  TRANSFER
  INVESTMENT
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  REFUND
}

enum IncomeFrequency {
  WEEKLY
  FORTNIGHTLY
  MONTHLY
}

enum GoalCategory {
  EMERGENCY_FUND
  VACATION
  HOME_PURCHASE
  CAR_PURCHASE
  DEBT_PAYOFF
  EDUCATION
  RETIREMENT
  INVESTMENT
  GENERAL_SAVINGS
  OTHER
}

enum GoalType {
  SAVINGS
  SPENDING_LIMIT
  DEBT_PAYOFF
  INVESTMENT
}

enum GoalPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ContributionType {
  MANUAL
  AUTOMATIC
  TRANSACTION
  INTEREST
  WINDFALL
}

enum ReminderType {
  CONTRIBUTION
  PROGRESS
  MILESTONE
  DEADLINE
}

enum ReminderFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
}

enum PaymentStatus {
  UPCOMING
  PAID
  OVERDUE
}